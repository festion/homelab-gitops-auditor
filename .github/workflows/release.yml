name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      skip_tests:
        description: 'Skip test suite (emergency releases only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install -g conventional-changelog-cli conventional-recommended-bump
        cd api && npm ci
        cd ../dashboard && npm ci
        
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
          # Release triggered by tag
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG=${GITHUB_REF#refs/tags/}
          echo "Release triggered by tag: $TAG"
        else
          # Manual release workflow
          CURRENT_VERSION=$(jq -r '.version' package.json)
          
          case "${{ github.event.inputs.release_type }}" in
            major)
              NEW_VERSION=$(npm version major --no-git-tag-version --prefix .)
              ;;
            minor)
              NEW_VERSION=$(npm version minor --no-git-tag-version --prefix .)
              ;;
            patch)
              NEW_VERSION=$(npm version patch --no-git-tag-version --prefix .)
              ;;
            prerelease)
              NEW_VERSION=$(npm version prerelease --no-git-tag-version --prefix .)
              ;;
          esac
          
          VERSION=${NEW_VERSION#v}
          TAG="v$VERSION"
          
          echo "Bumped version from $CURRENT_VERSION to $VERSION"
          
          # Update package.json files
          jq ".version = \"$VERSION\"" package.json > package.json.tmp && mv package.json.tmp package.json
          jq ".version = \"$VERSION\"" api/package.json > api/package.json.tmp && mv api/package.json.tmp api/package.json
          jq ".version = \"$VERSION\"" dashboard/package.json > dashboard/package.json.tmp && mv dashboard/package.json.tmp dashboard/package.json
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"
        echo "Final tag: $TAG"
        
    - name: Generate changelog
      id: changelog
      run: |
        echo "Generating changelog for version ${{ steps.version.outputs.version }}..."
        
        # Generate conventional changelog
        conventional-changelog -p angular -r 2 > CHANGELOG_NEW.md
        
        # Extract latest version changelog
        if [ -f CHANGELOG.md ]; then
          # Append to existing changelog
          cat CHANGELOG_NEW.md CHANGELOG.md > CHANGELOG_TEMP.md
          mv CHANGELOG_TEMP.md CHANGELOG.md
        else
          mv CHANGELOG_NEW.md CHANGELOG.md
        fi
        
        # Extract just the new version changes for release notes
        CHANGELOG_CONTENT=$(head -n 50 CHANGELOG.md | sed '/^$/,$d')
        
        # Save changelog for release notes (escape for JSON)
        cat > release_notes.md << EOF
        ## What's Changed
        
        $CHANGELOG_CONTENT
        
        ## Installation
        
        ### Docker
        \`\`\`bash
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        \`\`\`
        
        ### Manual Installation
        1. Download the deployment package from the assets below
        2. Extract to your deployment directory
        3. Run: \`npm install --production\`
        4. Start services: \`npm start\`
        
        ## Deployment Commands
        
        ### Staging
        \`\`\`bash
        gh workflow run deploy-staging.yml
        \`\`\`
        
        ### Production
        \`\`\`bash
        gh workflow run deploy-production.yml
        \`\`\`
        
        ## Rollback (if needed)
        \`\`\`bash
        gh workflow run rollback.yml -f environment=production -f reason="Issue description"
        \`\`\`
        EOF
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Commit version bump
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json api/package.json dashboard/package.json CHANGELOG.md
        git commit -m "chore: release ${{ steps.version.outputs.version }}" || echo "No changes to commit"
        git tag ${{ steps.version.outputs.tag }}
        git push origin main
        git push origin ${{ steps.version.outputs.tag }}

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: prepare-release
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd api && npm ci
        cd ../dashboard && npm ci
        
    - name: Run test suite
      run: |
        # Run comprehensive test suite
        cd api && (npm run test:unit || npm test)
        cd ../dashboard && (npm run test:unit || npm test)
        
        # Integration tests
        cd ../api && (npm run test:integration || echo "Integration tests not configured")
        cd ../dashboard && (npm run test:integration || echo "Integration tests not configured")
        
        # Security tests
        cd .. && (npm run test:security || echo "Security tests not configured")
        
    - name: Build release
      run: |
        cd api
        npm run build || echo "API build not configured"
        cd ../dashboard
        npm run build
        
    - name: Validate build artifacts
      run: |
        # Validate that builds completed successfully
        if [ -d "dashboard/dist" ]; then
          echo "✅ Dashboard build successful"
          ls -la dashboard/dist/
        else
          echo "❌ Dashboard build failed"
          exit 1
        fi
        
        # Check for critical files
        if [ -f "package.json" ] && [ -f "api/package.json" ] && [ -f "dashboard/package.json" ]; then
          echo "✅ Package files present"
        else
          echo "❌ Missing package files"
          exit 1
        fi

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [prepare-release, test-release]
    if: always() && needs.prepare-release.result == 'success' && (needs.test-release.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        cd api && npm ci
        cd ../dashboard && npm ci
        
    - name: Build production assets
      run: |
        cd api
        npm run build || echo "API build not configured"
        cd ../dashboard
        npm run build
        
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.prepare-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.prepare-release.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.prepare-release.outputs.version }}
          type=raw,value=latest
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Create deployment package
      run: |
        # Create comprehensive deployment package
        tar -czf homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='api/node_modules' \
          --exclude='dashboard/node_modules' \
          --exclude='*.tar.gz' \
          --exclude='coverage' \
          --exclude='.nyc_output' \
          .
          
    - name: Create source package
      run: |
        # Create source code package
        git archive --format=tar.gz --prefix=homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}/ \
          ${{ needs.prepare-release.outputs.tag }} > homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz
          
    - name: Generate checksums
      run: |
        sha256sum homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz > checksums.txt
        sha256sum homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz >> checksums.txt
        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-assets-${{ needs.prepare-release.outputs.version }}
        path: |
          homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz
          homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz
          checksums.txt
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag }}
        
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-assets-${{ needs.prepare-release.outputs.version }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        release_name: Release ${{ needs.prepare-release.outputs.tag }}
        body: ${{ needs.prepare-release.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.version, 'alpha') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'rc') }}
        
    - name: Upload deployment package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz
        asset_name: homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload source package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz
        asset_name: homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: ${{ !contains(needs.prepare-release.outputs.version, 'alpha') && !contains(needs.prepare-release.outputs.version, 'beta') && !contains(needs.prepare-release.outputs.version, 'rc') }}
    
    steps:
    - name: Trigger staging deployment
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy-staging.yml',
            ref: '${{ needs.prepare-release.outputs.tag }}'
          });
          console.log('Triggered staging deployment');
          
    - name: Wait for staging deployment
      run: |
        echo "Waiting for staging deployment to complete..."
        sleep 180 # Wait 3 minutes for staging
        
    - name: Trigger production deployment
      uses: actions/github-script@v7
      with:
        script: |
          // Only deploy stable releases to production automatically
          if (!'${{ needs.prepare-release.outputs.version }}'.includes('alpha') && 
              !'${{ needs.prepare-release.outputs.version }}'.includes('beta') && 
              !'${{ needs.prepare-release.outputs.version }}'.includes('rc')) {
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy-production.yml',
              ref: '${{ needs.prepare-release.outputs.tag }}'
            });
            console.log('Triggered production deployment');
          } else {
            console.log('Skipping production deployment for pre-release version');
          }

  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Notify release
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 New Release Published!
          
          **Version:** ${{ needs.prepare-release.outputs.version }}
          **Tag:** ${{ needs.prepare-release.outputs.tag }}
          **Type:** ${{ github.event.inputs.release_type || 'tag-triggered' }}
          
          **Download:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}
          **Docker:** `docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}`
          
          **Deployment Status:**
          - Staging: Triggered
          - Production: ${{ contains(needs.prepare-release.outputs.version, 'alpha') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'rc') && 'Manual' || 'Triggered' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Update documentation
      uses: actions/github-script@v7
      with:
        script: |
          // Create documentation update issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📚 Update documentation for v${{ needs.prepare-release.outputs.version }}`,
            body: `
          A new release has been published. Please update the following documentation:
          
          - [ ] Update installation instructions
          - [ ] Update API documentation
          - [ ] Update deployment guides
          - [ ] Update CHANGELOG.md with final notes
          - [ ] Update README.md version badges
          - [ ] Update Docker documentation
          
          **Release:** ${{ needs.prepare-release.outputs.tag }}
          **Release Notes:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}
          `,
            labels: ['documentation', 'release']
          });
          
          console.log(\`Created documentation update issue #\${issue.data.number}\`);
          
    - name: Generate release report
      run: |
        cat > RELEASE_REPORT.md << EOF
        # Release Report: ${{ needs.prepare-release.outputs.version }}
        
        **Release Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Release Tag:** ${{ needs.prepare-release.outputs.tag }}
        **Release Type:** ${{ github.event.inputs.release_type || 'tag-triggered' }}
        **Pre-release:** ${{ contains(needs.prepare-release.outputs.version, 'alpha') || contains(needs.prepare-release.outputs.version, 'beta') || contains(needs.prepare-release.outputs.version, 'rc') }}
        
        ## Assets Created
        - Docker Image: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }}\`
        - Deployment Package: \`homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}.tar.gz\`
        - Source Package: \`homelab-gitops-auditor-${{ needs.prepare-release.outputs.version }}-source.tar.gz\`
        - Checksums: \`checksums.txt\`
        
        ## Deployment Status
        - **Staging:** ${{ needs.deploy-release.result == 'success' && 'Deployed' || 'Pending' }}
        - **Production:** ${{ needs.deploy-release.result == 'success' && !contains(needs.prepare-release.outputs.version, 'alpha') && !contains(needs.prepare-release.outputs.version, 'beta') && !contains(needs.prepare-release.outputs.version, 'rc') && 'Deployed' || 'Manual' }}
        
        ## Quick Links
        - [Release Page](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }})
        - [Docker Image](${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-release.outputs.version }})
        - [Deployment Workflows](${{ github.server_url }}/${{ github.repository }}/actions)
        
        ## Post-Release Tasks
        - [ ] Monitor deployment health
        - [ ] Update documentation
        - [ ] Notify stakeholders
        - [ ] Update project roadmap
        EOF
        
    - name: Upload release report
      uses: actions/upload-artifact@v4
      with:
        name: release-report-${{ needs.prepare-release.outputs.version }}
        path: RELEASE_REPORT.md
        retention-days: 365