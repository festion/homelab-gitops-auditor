name: GitOps Audit and Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 3:00 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  lint-and-validate:
    name: Code Quality Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            dashboard/package-lock.json
            api/package-lock.json

      - name: Install root dependencies
        run: npm ci --only=dev

      - name: Install API dependencies
        run: |
          cd api
          npm ci

      - name: Install dashboard dependencies
        run: |
          cd dashboard
          npm ci

      - name: Lint dashboard code
        run: |
          cd dashboard
          npm run lint

      - name: TypeScript compilation check
        run: |
          cd dashboard
          npx tsc -b

      - name: Build dashboard for production
        run: |
          cd dashboard
          npm run build

      - name: Validate shell scripts
        run: |
          # Install shellcheck for shell script validation
          sudo apt-get update
          sudo apt-get install -y shellcheck
          
          # Check all shell scripts
          find scripts -name "*.sh" -type f -exec shellcheck {} \;

      - name: Validate JSON files
        run: |
          # Validate existing JSON files
          find . -name "*.json" -type f -exec python3 -m json.tool {} \; > /dev/null

  comprehensive-audit:
    name: Repository Mismatch Detection
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl git

      - name: Run comprehensive audit (simulation)
        run: |
          # Create simulation of C:\GIT structure for testing
          mkdir -p /tmp/git-simulation
          
          # Simulate some repositories
          git clone --depth 1 https://github.com/festion/homelab-gitops-auditor.git /tmp/git-simulation/homelab-gitops-auditor
          git clone --depth 1 https://github.com/festion/ESPHome.git /tmp/git-simulation/ESPHome || true
          
          # Modify script to use simulation directory
          sed 's|LOCAL_GIT_ROOT="/mnt/c/GIT"|LOCAL_GIT_ROOT="/tmp/git-simulation"|g' scripts/comprehensive_audit.sh > /tmp/audit_test.sh
          chmod +x /tmp/audit_test.sh
          
          # Run the audit script
          bash /tmp/audit_test.sh --dev

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: audit-history/
          retention-days: 30

  security-scan:
    name: Security and Dependencies Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies and audit
        run: |
          cd dashboard
          npm ci
          npm audit --audit-level=moderate
          
          cd ../api
          npm ci
          npm audit --audit-level=moderate

      - name: Check for sensitive files
        run: |
          # Check for common sensitive file patterns
          if find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*password*" | grep -v node_modules | grep -q .; then
            echo "‚ö†Ô∏è Potentially sensitive files found"
            find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*password*" | grep -v node_modules
          else
            echo "‚úÖ No sensitive files detected"
          fi

  create-issues-for-mismatches:
    name: Create GitHub Issues for Audit Findings
    runs-on: ubuntu-latest
    needs: comprehensive-audit
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download audit results
        uses: actions/download-artifact@v4
        with:
          name: audit-report
          path: audit-history/

      - name: Process audit results and create issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if latest audit report exists
          if [ -f "audit-history/latest.json" ]; then
            # Extract health status
            health_status=$(jq -r '.health_status' audit-history/latest.json)
            
            if [ "$health_status" != "green" ]; then
              # Create issue for audit findings
              issue_title="üîç GitOps Audit Findings - $(date +%Y-%m-%d)"
              issue_body="## Repository Audit Results\n\n"
              issue_body+="**Health Status:** $health_status\n\n"
              
              # Add summary
              summary=$(jq -r '.summary' audit-history/latest.json)
              issue_body+="### Summary\n\`\`\`json\n$summary\n\`\`\`\n\n"
              
              # Add mitigation actions
              issue_body+="### Recommended Actions\n"
              issue_body+="Please review the audit dashboard and take appropriate actions.\n\n"
              issue_body+="**Production Dashboard:** [View Audit Results](http://192.168.1.58/audit)\n"
              issue_body+="**Local Dashboard:** [View Local Results](http://gitopsdashboard.local/audit)\n\n"
              issue_body+="This issue was automatically created by the GitOps Audit workflow."
              
              # Create the issue using GitHub CLI
              echo "$issue_body" | gh issue create \
                --title "$issue_title" \
                --body-file - \
                --label "audit,automation" \
                --assignee "@me"
            fi
          fi