{"version":3,"names":["cov_1jd3hw5m69","actualCoverage","AuditLogger","s","require","Logger","AuthorizationMiddleware","constructor","f","roles","Map","permissions","logger","initialized","initialize","b","setupRoles","setupPermissions","info","error","set","requirePermission","requiredPermissions","req","res","next","auth","sendUnauthorizedResponse","userPermissions","getUserPermissions","required","Array","isArray","hasPermission","every","permission","logAuthorizationEvent","type","userId","username","keyName","ipAddress","ip","endpoint","path","method","sendForbiddenResponse","join","status","json","code","message","timestamp","Date","toISOString","requireRole","requiredRoles","userRoles","role","hasRole","some","includes","requireResourceAccess","resourceType","getResourceId","resourceId","hasAccess","checkResourceAccess","requireAdmin","requireDeploymentPermission","operation","permissionMap","Error","Set","forEach","rolePermissions","get","add","from","requiredPermission","impliedPermissions","checkRepositoryAccess","checkDeploymentAccess","checkUserAccess","repositoryId","deploymentId","custom","authorizationFunction","isAuthorized","getRoleInfo","roleName","name","getAllRoles","getAllPermissions","allPermissions","values","sort","authorizationMiddleware","module","exports"],"sources":["authorization.js"],"sourcesContent":["const { AuditLogger } = require('../utils/audit-logger');\nconst { Logger } = require('../utils/logger');\n\n/**\n * Authorization Middleware\n * Provides comprehensive Role-Based Access Control (RBAC) and permission-based authorization\n */\nclass AuthorizationMiddleware {\n  constructor() {\n    this.roles = new Map();\n    this.permissions = new Map();\n    this.logger = new Logger('AuthorizationMiddleware');\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize the authorization middleware\n   */\n  async initialize() {\n    if (this.initialized) return;\n    \n    try {\n      this.setupRoles();\n      this.setupPermissions();\n      this.initialized = true;\n      this.logger.info('Authorization middleware initialized');\n    } catch (error) {\n      this.logger.error('Failed to initialize authorization middleware:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup role definitions and their permissions\n   */\n  setupRoles() {\n    // Define roles and their permissions\n    this.roles.set('admin', [\n      'deployment:read',\n      'deployment:write',\n      'deployment:rollback',\n      'deployment:admin',\n      'system:admin',\n      'user:manage',\n      'config:manage',\n      'audit:read'\n    ]);\n\n    this.roles.set('operator', [\n      'deployment:read',\n      'deployment:write',\n      'deployment:rollback',\n      'monitoring:read'\n    ]);\n\n    this.roles.set('viewer', [\n      'deployment:read',\n      'monitoring:read'\n    ]);\n\n    this.roles.set('webhook', [\n      'webhook:receive',\n      'deployment:trigger'\n    ]);\n  }\n\n  /**\n   * Setup permission hierarchy\n   */\n  setupPermissions() {\n    // Define permission hierarchy (higher permissions include lower ones)\n    this.permissions.set('system:admin', [\n      'deployment:admin',\n      'user:manage',\n      'config:manage',\n      'audit:read'\n    ]);\n\n    this.permissions.set('deployment:admin', [\n      'deployment:read',\n      'deployment:write',\n      'deployment:rollback',\n      'deployment:configure'\n    ]);\n\n    this.permissions.set('deployment:write', [\n      'deployment:read'\n    ]);\n\n    this.permissions.set('user:manage', [\n      'user:read',\n      'user:create',\n      'user:update',\n      'user:delete'\n    ]);\n  }\n\n  /**\n   * Authorization middleware factory\n   * Creates middleware to check specific permissions\n   */\n  requirePermission = (requiredPermissions) => {\n    return async (req, res, next) => {\n      try {\n        // Ensure middleware is initialized\n        if (!this.initialized) {\n          await this.initialize();\n        }\n\n        if (!req.auth) {\n          return this.sendUnauthorizedResponse(res, 'Authentication required');\n        }\n\n        const userPermissions = this.getUserPermissions(req.auth);\n        const required = Array.isArray(requiredPermissions) ? requiredPermissions : [requiredPermissions];\n        \n        const hasPermission = required.every(permission => \n          this.hasPermission(userPermissions, permission)\n        );\n\n        if (!hasPermission) {\n          AuditLogger.logAuthorizationEvent({\n            type: 'authorization-failure',\n            userId: req.auth.userId || null,\n            username: req.auth.username || req.auth.keyName || null,\n            requiredPermissions: required,\n            userPermissions: userPermissions,\n            ipAddress: req.ip,\n            endpoint: req.path,\n            method: req.method\n          });\n\n          return this.sendForbiddenResponse(res, `Insufficient permissions. Required: ${required.join(', ')}`);\n        }\n\n        // Log successful authorization\n        AuditLogger.logAuthorizationEvent({\n          type: 'authorization-success',\n          userId: req.auth.userId || null,\n          username: req.auth.username || req.auth.keyName || null,\n          requiredPermissions: required,\n          ipAddress: req.ip,\n          endpoint: req.path,\n          method: req.method\n        });\n\n        next();\n      } catch (error) {\n        this.logger.error('Authorization error', error);\n        \n        return res.status(500).json({\n          status: 'error',\n          error: {\n            code: 'AUTHORIZATION_ERROR',\n            message: 'Authorization check failed',\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    };\n  };\n\n  /**\n   * Role-based authorization middleware\n   */\n  requireRole = (requiredRoles) => {\n    return async (req, res, next) => {\n      try {\n        // Ensure middleware is initialized\n        if (!this.initialized) {\n          await this.initialize();\n        }\n\n        if (!req.auth) {\n          return this.sendUnauthorizedResponse(res, 'Authentication required');\n        }\n\n        // API keys don't have roles, only users do\n        if (req.auth.type !== 'jwt') {\n          return this.sendForbiddenResponse(res, 'User authentication required for this operation');\n        }\n\n        const userRoles = Array.isArray(req.auth.role) ? req.auth.role : [req.auth.role];\n        const required = Array.isArray(requiredRoles) ? requiredRoles : [requiredRoles];\n        \n        const hasRole = required.some(role => userRoles.includes(role)) || userRoles.includes('admin');\n\n        if (!hasRole) {\n          AuditLogger.logAuthorizationEvent({\n            type: 'role-authorization-failure',\n            userId: req.auth.userId,\n            username: req.auth.username,\n            requiredRoles: required,\n            userRoles: userRoles,\n            ipAddress: req.ip,\n            endpoint: req.path,\n            method: req.method\n          });\n\n          return this.sendForbiddenResponse(res, `Required role: ${required.join(' or ')}`);\n        }\n\n        AuditLogger.logAuthorizationEvent({\n          type: 'role-authorization-success',\n          userId: req.auth.userId,\n          username: req.auth.username,\n          requiredRoles: required,\n          userRoles: userRoles,\n          ipAddress: req.ip,\n          endpoint: req.path,\n          method: req.method\n        });\n\n        next();\n      } catch (error) {\n        this.logger.error('Role check error', error);\n        \n        return res.status(500).json({\n          status: 'error',\n          error: {\n            code: 'ROLE_CHECK_ERROR',\n            message: 'Role check failed',\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    };\n  };\n\n  /**\n   * Resource-level authorization middleware\n   * Checks if user can access specific resources\n   */\n  requireResourceAccess = (resourceType, getResourceId) => {\n    return async (req, res, next) => {\n      try {\n        if (!req.auth) {\n          return this.sendUnauthorizedResponse(res, 'Authentication required');\n        }\n\n        const resourceId = typeof getResourceId === 'function' ? getResourceId(req) : getResourceId;\n        \n        // Check if user has access to this specific resource\n        const hasAccess = await this.checkResourceAccess(req.auth, resourceType, resourceId);\n\n        if (!hasAccess) {\n          AuditLogger.logAuthorizationEvent({\n            type: 'resource-access-denied',\n            userId: req.auth.userId || null,\n            username: req.auth.username || req.auth.keyName || null,\n            resourceType: resourceType,\n            resourceId: resourceId,\n            ipAddress: req.ip,\n            endpoint: req.path,\n            method: req.method\n          });\n\n          return this.sendForbiddenResponse(res, `Access denied to ${resourceType}: ${resourceId}`);\n        }\n\n        next();\n      } catch (error) {\n        this.logger.error('Resource access check error', error);\n        \n        return res.status(500).json({\n          status: 'error',\n          error: {\n            code: 'RESOURCE_ACCESS_ERROR',\n            message: 'Resource access check failed',\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    };\n  };\n\n  /**\n   * Admin-only middleware\n   */\n  requireAdmin = () => {\n    return this.requireRole('admin');\n  };\n\n  /**\n   * Deployment operation authorization\n   */\n  requireDeploymentPermission = (operation) => {\n    const permissionMap = {\n      'read': 'deployment:read',\n      'deploy': 'deployment:write',\n      'rollback': 'deployment:rollback',\n      'configure': 'deployment:admin'\n    };\n\n    const permission = permissionMap[operation];\n    if (!permission) {\n      throw new Error(`Invalid deployment operation: ${operation}`);\n    }\n\n    return this.requirePermission(permission);\n  };\n\n  /**\n   * Get user permissions including role-based permissions\n   */\n  getUserPermissions(auth) {\n    if (!auth) return [];\n    \n    const permissions = new Set(auth.permissions || []);\n    \n    // Add permissions from roles (if user authentication)\n    if (auth.type === 'jwt' && auth.role) {\n      const roles = Array.isArray(auth.role) ? auth.role : [auth.role];\n      roles.forEach(role => {\n        const rolePermissions = this.roles.get(role) || [];\n        rolePermissions.forEach(permission => permissions.add(permission));\n      });\n    }\n    \n    return Array.from(permissions);\n  }\n\n  /**\n   * Check if user has specific permission\n   */\n  hasPermission(userPermissions, requiredPermission) {\n    // Direct permission check\n    if (userPermissions.includes(requiredPermission)) {\n      return true;\n    }\n    \n    // Check for higher-level permissions that include this permission\n    for (const [permission, impliedPermissions] of this.permissions) {\n      if (userPermissions.includes(permission) && impliedPermissions.includes(requiredPermission)) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  /**\n   * Check resource-level access\n   */\n  async checkResourceAccess(auth, resourceType, resourceId) {\n    // Admin users have access to all resources\n    if (auth.type === 'jwt' && (auth.role === 'admin' || (Array.isArray(auth.role) && auth.role.includes('admin')))) {\n      return true;\n    }\n\n    // Implement resource-specific access control logic here\n    switch (resourceType) {\n      case 'repository':\n        return this.checkRepositoryAccess(auth, resourceId);\n      case 'deployment':\n        return this.checkDeploymentAccess(auth, resourceId);\n      case 'user':\n        return this.checkUserAccess(auth, resourceId);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Check repository access\n   */\n  async checkRepositoryAccess(auth, repositoryId) {\n    // For now, allow access if user has deployment permissions\n    // In production, this would check against a repository access control list\n    const userPermissions = this.getUserPermissions(auth);\n    return this.hasPermission(userPermissions, 'deployment:read');\n  }\n\n  /**\n   * Check deployment access\n   */\n  async checkDeploymentAccess(auth, deploymentId) {\n    // Check if user has deployment read permission\n    const userPermissions = this.getUserPermissions(auth);\n    return this.hasPermission(userPermissions, 'deployment:read');\n  }\n\n  /**\n   * Check user access (for user management operations)\n   */\n  async checkUserAccess(auth, userId) {\n    // Users can access their own data\n    if (auth.type === 'jwt' && auth.userId === userId) {\n      return true;\n    }\n    \n    // Check if user has user management permissions\n    const userPermissions = this.getUserPermissions(auth);\n    return this.hasPermission(userPermissions, 'user:read');\n  }\n\n  /**\n   * Create custom authorization middleware\n   */\n  custom = (authorizationFunction) => {\n    return async (req, res, next) => {\n      try {\n        if (!req.auth) {\n          return this.sendUnauthorizedResponse(res, 'Authentication required');\n        }\n\n        const isAuthorized = await authorizationFunction(req.auth, req);\n\n        if (!isAuthorized) {\n          AuditLogger.logAuthorizationEvent({\n            type: 'custom-authorization-failure',\n            userId: req.auth.userId || null,\n            username: req.auth.username || req.auth.keyName || null,\n            ipAddress: req.ip,\n            endpoint: req.path,\n            method: req.method\n          });\n\n          return this.sendForbiddenResponse(res, 'Custom authorization failed');\n        }\n\n        next();\n      } catch (error) {\n        this.logger.error('Custom authorization error', error);\n        \n        return res.status(500).json({\n          status: 'error',\n          error: {\n            code: 'CUSTOM_AUTHORIZATION_ERROR',\n            message: 'Custom authorization check failed',\n            timestamp: new Date().toISOString()\n          }\n        });\n      }\n    };\n  };\n\n  /**\n   * Send unauthorized response\n   */\n  sendUnauthorizedResponse(res, message) {\n    res.status(401).json({\n      status: 'error',\n      error: {\n        code: 'UNAUTHORIZED',\n        message: message,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Send forbidden response\n   */\n  sendForbiddenResponse(res, message) {\n    res.status(403).json({\n      status: 'error',\n      error: {\n        code: 'FORBIDDEN',\n        message: message,\n        timestamp: new Date().toISOString()\n      }\n    });\n  }\n\n  /**\n   * Get role information\n   */\n  getRoleInfo(roleName) {\n    return {\n      name: roleName,\n      permissions: this.roles.get(roleName) || []\n    };\n  }\n\n  /**\n   * Get all available roles\n   */\n  getAllRoles() {\n    const roles = {};\n    for (const [roleName, permissions] of this.roles) {\n      roles[roleName] = permissions;\n    }\n    return roles;\n  }\n\n  /**\n   * Get all available permissions\n   */\n  getAllPermissions() {\n    const allPermissions = new Set();\n    \n    // Add all role permissions\n    for (const permissions of this.roles.values()) {\n      permissions.forEach(permission => allPermissions.add(permission));\n    }\n    \n    // Add all implied permissions\n    for (const permissions of this.permissions.values()) {\n      permissions.forEach(permission => allPermissions.add(permission));\n    }\n    \n    return Array.from(allPermissions).sort();\n  }\n}\n\n// Create singleton instance\nconst authorizationMiddleware = new AuthorizationMiddleware();\n\n// Export individual middleware functions\nmodule.exports = {\n  requirePermission: authorizationMiddleware.requirePermission,\n  requireRole: authorizationMiddleware.requireRole,\n  requireResourceAccess: authorizationMiddleware.requireResourceAccess,\n  requireAdmin: authorizationMiddleware.requireAdmin,\n  requireDeploymentPermission: authorizationMiddleware.requireDeploymentPermission,\n  custom: authorizationMiddleware.custom,\n  AuthorizationMiddleware,\n  // Export instance for direct access\n  authorizationMiddleware\n};"],"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","ignoreList":[]}