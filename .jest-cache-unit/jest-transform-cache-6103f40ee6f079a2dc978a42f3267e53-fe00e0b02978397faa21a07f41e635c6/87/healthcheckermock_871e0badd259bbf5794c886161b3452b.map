{"version":3,"names":["MockHealthChecker","constructor","performPreDeploymentChecks","jest","fn","performPostDeploymentChecks","validateConfiguration","checkHomeAssistantHealth","checkMCPServerHealth","checkSystemResources","validateYAMLSyntax","_healthState","homeAssistant","mcpServers","systemResources","overallStatus","mockPreDeploymentSuccess","mockResolvedValue","overall","healthy","healthyChecks","unhealthyChecks","timestamp","Date","toISOString","checks","name","status","responseTime","details","value","threshold","mockPreDeploymentFailure","failingCheck","mockRejectedValue","Error","mockPostDeploymentSuccess","mockPostDeploymentFailure","mockConfigurationValidationSuccess","valid","yamlSyntax","errors","homeAssistantConfig","warnings","integrations","loaded","failed","mockConfigurationValidationYAMLError","line","column","message","severity","mockConfigurationValidationHAError","mockHomeAssistantHealthy","api","reachable","version","supervisor","running","addons","total","stopped","mockHomeAssistantUnreachable","mockHomeAssistantConfigurationError","configurationErrors","error","mockSystemResourcesHealthy","disk","usage","available","memory","cpu","mockSystemResourcesWarning","setHealthState","component","_updateOverallStatus","unhealthyComponents","Object","values","filter","length","getHealthState","reset","clearAllMocks","module","exports"],"sources":["health-checker.mock.js"],"sourcesContent":["/**\n * Mock implementation for Health Checker\n * Used to isolate deployment and orchestration components during testing\n */\nclass MockHealthChecker {\n  constructor() {\n    this.performPreDeploymentChecks = jest.fn();\n    this.performPostDeploymentChecks = jest.fn();\n    this.validateConfiguration = jest.fn();\n    this.checkHomeAssistantHealth = jest.fn();\n    this.checkMCPServerHealth = jest.fn();\n    this.checkSystemResources = jest.fn();\n    this.validateYAMLSyntax = jest.fn();\n    \n    // Internal state for health status\n    this._healthState = {\n      homeAssistant: 'healthy',\n      mcpServers: 'healthy',\n      systemResources: 'healthy',\n      overallStatus: 'healthy'\n    };\n  }\n\n  // Mock successful pre-deployment checks\n  mockPreDeploymentSuccess() {\n    this.performPreDeploymentChecks.mockResolvedValue({\n      overall: {\n        healthy: true,\n        healthyChecks: 5,\n        unhealthyChecks: 0,\n        timestamp: new Date().toISOString()\n      },\n      checks: [\n        {\n          name: 'home-assistant-api',\n          status: 'healthy',\n          responseTime: 45,\n          details: 'API responding normally'\n        },\n        {\n          name: 'mcp-network-fs',\n          status: 'healthy',\n          responseTime: 12,\n          details: 'Network FS server connected'\n        },\n        {\n          name: 'mcp-github',\n          status: 'healthy',\n          responseTime: 156,\n          details: 'GitHub MCP server connected'\n        },\n        {\n          name: 'disk-space',\n          status: 'healthy',\n          value: 75,\n          threshold: 90,\n          details: 'Sufficient disk space available'\n        },\n        {\n          name: 'memory-usage',\n          status: 'healthy',\n          value: 68,\n          threshold: 85,\n          details: 'Memory usage within acceptable limits'\n        }\n      ]\n    });\n  }\n\n  // Mock pre-deployment check failure\n  mockPreDeploymentFailure(failingCheck = 'home-assistant-api') {\n    this.performPreDeploymentChecks.mockRejectedValue(\n      new Error(`Pre-deployment health checks failed: ${failingCheck} is unhealthy`)\n    );\n  }\n\n  // Mock successful post-deployment checks\n  mockPostDeploymentSuccess() {\n    this.performPostDeploymentChecks.mockResolvedValue({\n      overall: {\n        healthy: true,\n        healthyChecks: 4,\n        unhealthyChecks: 0,\n        timestamp: new Date().toISOString()\n      },\n      checks: [\n        {\n          name: 'home-assistant-api',\n          status: 'healthy',\n          responseTime: 52,\n          details: 'API responding after deployment'\n        },\n        {\n          name: 'configuration-valid',\n          status: 'healthy',\n          details: 'Home Assistant configuration is valid'\n        },\n        {\n          name: 'services-running',\n          status: 'healthy',\n          details: 'All critical services operational'\n        },\n        {\n          name: 'integrations-loaded',\n          status: 'healthy',\n          details: 'All integrations loaded successfully'\n        }\n      ]\n    });\n  }\n\n  // Mock post-deployment check failure\n  mockPostDeploymentFailure(failingCheck = 'configuration-valid') {\n    this.performPostDeploymentChecks.mockRejectedValue(\n      new Error(`Post-deployment health checks failed: ${failingCheck} failed`)\n    );\n  }\n\n  // Mock configuration validation success\n  mockConfigurationValidationSuccess() {\n    this.validateConfiguration.mockResolvedValue({\n      valid: true,\n      yamlSyntax: {\n        valid: true,\n        errors: []\n      },\n      homeAssistantConfig: {\n        valid: true,\n        warnings: [],\n        errors: []\n      },\n      integrations: {\n        valid: true,\n        loaded: 45,\n        failed: 0\n      }\n    });\n  }\n\n  // Mock configuration validation with YAML errors\n  mockConfigurationValidationYAMLError() {\n    this.validateConfiguration.mockResolvedValue({\n      valid: false,\n      yamlSyntax: {\n        valid: false,\n        errors: [\n          {\n            line: 42,\n            column: 15,\n            message: 'mapping values are not allowed here',\n            severity: 'error'\n          }\n        ]\n      },\n      homeAssistantConfig: {\n        valid: false,\n        warnings: [],\n        errors: ['YAML syntax error prevents configuration validation']\n      }\n    });\n  }\n\n  // Mock configuration validation with Home Assistant errors\n  mockConfigurationValidationHAError() {\n    this.validateConfiguration.mockResolvedValue({\n      valid: false,\n      yamlSyntax: {\n        valid: true,\n        errors: []\n      },\n      homeAssistantConfig: {\n        valid: false,\n        warnings: [\n          'Deprecated sensor platform detected',\n          'Unused integration configuration found'\n        ],\n        errors: [\n          'Invalid entity_id format in automation',\n          'Missing required integration: mqtt'\n        ]\n      }\n    });\n  }\n\n  // Mock Home Assistant health check\n  mockHomeAssistantHealthy() {\n    this.checkHomeAssistantHealth.mockResolvedValue({\n      status: 'healthy',\n      api: {\n        reachable: true,\n        responseTime: 45,\n        version: '2025.7.0'\n      },\n      supervisor: {\n        running: true,\n        version: '2025.07.0'\n      },\n      addons: {\n        total: 12,\n        running: 12,\n        stopped: 0\n      }\n    });\n  }\n\n  // Mock Home Assistant unreachable\n  mockHomeAssistantUnreachable() {\n    this.checkHomeAssistantHealth.mockRejectedValue(\n      new Error('Home Assistant API unreachable: Connection timeout')\n    );\n  }\n\n  // Mock Home Assistant configuration error\n  mockHomeAssistantConfigurationError() {\n    this.checkHomeAssistantHealth.mockResolvedValue({\n      status: 'unhealthy',\n      api: {\n        reachable: true,\n        responseTime: 89,\n        version: '2025.7.0'\n      },\n      configurationErrors: [\n        'Invalid YAML in configuration.yaml',\n        'Failed to load integration: invalid_sensor'\n      ],\n      supervisor: {\n        running: false,\n        error: 'Configuration validation failed'\n      }\n    });\n  }\n\n  // Mock system resource checks\n  mockSystemResourcesHealthy() {\n    this.checkSystemResources.mockResolvedValue({\n      disk: {\n        status: 'healthy',\n        usage: 75,\n        threshold: 90,\n        available: '2.5GB'\n      },\n      memory: {\n        status: 'healthy',\n        usage: 68,\n        threshold: 85,\n        available: '1.2GB'\n      },\n      cpu: {\n        status: 'healthy',\n        usage: 45,\n        threshold: 80\n      }\n    });\n  }\n\n  // Mock system resource warnings\n  mockSystemResourcesWarning() {\n    this.checkSystemResources.mockResolvedValue({\n      disk: {\n        status: 'warning',\n        usage: 92,\n        threshold: 90,\n        available: '256MB'\n      },\n      memory: {\n        status: 'healthy',\n        usage: 72,\n        threshold: 85,\n        available: '896MB'\n      },\n      cpu: {\n        status: 'healthy',\n        usage: 55,\n        threshold: 80\n      }\n    });\n  }\n\n  // Utility methods for state management\n  setHealthState(component, status) {\n    this._healthState[component] = status;\n    this._updateOverallStatus();\n  }\n\n  _updateOverallStatus() {\n    const unhealthyComponents = Object.values(this._healthState)\n      .filter(status => status !== 'healthy');\n    this._healthState.overallStatus = unhealthyComponents.length > 0 ? 'unhealthy' : 'healthy';\n  }\n\n  getHealthState() {\n    return { ...this._healthState };\n  }\n\n  // Reset all mocks to default state\n  reset() {\n    jest.clearAllMocks();\n    this._healthState = {\n      homeAssistant: 'healthy',\n      mcpServers: 'healthy',\n      systemResources: 'healthy',\n      overallStatus: 'healthy'\n    };\n  }\n}\n\nmodule.exports = { MockHealthChecker };"],"mappings":"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","ignoreList":[]}