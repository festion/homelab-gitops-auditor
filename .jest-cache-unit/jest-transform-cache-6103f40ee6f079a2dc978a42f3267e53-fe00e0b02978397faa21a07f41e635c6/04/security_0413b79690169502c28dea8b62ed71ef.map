{"version":3,"names":["cov_2mnpvwaihp","actualCoverage","helmet","s","require","cors","rateLimit","SecurityMiddleware","f","allowedOrigins","process","env","ALLOWED_ORIGINS","b","split","origin","callback","indexOf","Error","credentials","methods","allowedHeaders","contentSecurityPolicy","directives","defaultSrc","styleSrc","scriptSrc","imgSrc","connectSrc","fontSrc","objectSrc","mediaSrc","frameSrc","hsts","maxAge","includeSubDomains","preload","noSniff","frameguard","action","xssFilter","referrerPolicy","policy","hidePoweredBy","dnsPrefetchControl","allow","noCache","expectCt","enforce","apiRateLimit","windowMs","max","message","error","standardHeaders","legacyHeaders","skip","req","NODE_ENV","ip","authRateLimit","retryAfter","skipSuccessfulRequests","skipFailedRequests","keyGenerator","get","sensitiveRateLimit","customHeaders","res","next","setHeader","removeHeader","path","startsWith","requestLogger","start","Date","now","console","log","toISOString","method","on","duration","statusCode","inputValidation","maxSize","headers","parseInt","status","json","userAgent","length","errorHandler","err","name","productionSecurity","middleware","push","developmentSecurity","module","exports"],"sources":["security.js"],"sourcesContent":["const helmet = require('helmet');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\n\n/**\n * Security middleware configuration\n */\nclass SecurityMiddleware {\n  /**\n   * Configure CORS middleware\n   */\n  static cors() {\n    const allowedOrigins = process.env.ALLOWED_ORIGINS \n      ? process.env.ALLOWED_ORIGINS.split(',') \n      : ['http://localhost:3000', 'http://localhost:5173']; // Default for dev\n\n    return cors({\n      origin: function (origin, callback) {\n        // Allow requests with no origin (like mobile apps or curl requests)\n        if (!origin) return callback(null, true);\n        \n        if (allowedOrigins.indexOf(origin) !== -1) {\n          callback(null, true);\n        } else {\n          callback(new Error('Not allowed by CORS'));\n        }\n      },\n      credentials: true,\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n      allowedHeaders: [\n        'Origin',\n        'X-Requested-With', \n        'Content-Type',\n        'Accept',\n        'Authorization',\n        'X-API-Key',\n        'X-Forwarded-For'\n      ]\n    });\n  }\n\n  /**\n   * Configure Helmet security headers\n   */\n  static helmet() {\n    return helmet({\n      // Content Security Policy\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          scriptSrc: [\"'self'\"],\n          imgSrc: [\"'self'\", \"data:\", \"https:\"],\n          connectSrc: [\"'self'\"],\n          fontSrc: [\"'self'\"],\n          objectSrc: [\"'none'\"],\n          mediaSrc: [\"'self'\"],\n          frameSrc: [\"'none'\"]\n        }\n      },\n      \n      // HTTP Strict Transport Security\n      hsts: {\n        maxAge: 31536000, // 1 year\n        includeSubDomains: true,\n        preload: true\n      },\n      \n      // Prevent MIME type sniffing\n      noSniff: true,\n      \n      // X-Frame-Options\n      frameguard: { action: 'deny' },\n      \n      // X-XSS-Protection\n      xssFilter: true,\n      \n      // Referrer Policy\n      referrerPolicy: { policy: 'same-origin' },\n      \n      // Hide X-Powered-By header\n      hidePoweredBy: true,\n      \n      // DNS Prefetch Control\n      dnsPrefetchControl: { allow: false },\n      \n      // Don't cache sensitive content\n      noCache: false,\n      \n      // Expect-CT header\n      expectCt: {\n        maxAge: 86400,\n        enforce: true\n      }\n    });\n  }\n\n  /**\n   * General API rate limiting\n   */\n  static apiRateLimit() {\n    return rateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 1000, // Limit each IP to 1000 requests per windowMs\n      message: {\n        error: 'Too many requests',\n        message: 'Too many requests from this IP, please try again later.'\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skip: (req) => {\n        // Skip rate limiting for local development\n        return process.env.NODE_ENV === 'development' && \n               (req.ip === '127.0.0.1' || req.ip === '::1');\n      }\n    });\n  }\n\n  /**\n   * Strict rate limiting for authentication endpoints\n   */\n  static authRateLimit() {\n    return rateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 5, // Limit each IP to 5 login attempts per windowMs\n      message: {\n        error: 'Too many authentication attempts',\n        message: 'Too many authentication attempts from this IP, please try again later.',\n        retryAfter: 15 * 60 // 15 minutes in seconds\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skipSuccessfulRequests: true, // Don't count successful requests\n      skipFailedRequests: false,    // Do count failed requests\n      keyGenerator: (req) => {\n        // Use a combination of IP and User-Agent for more specific tracking\n        return `${req.ip}-${req.get('User-Agent') || 'unknown'}`;\n      }\n    });\n  }\n\n  /**\n   * Rate limiting for sensitive operations\n   */\n  static sensitiveRateLimit() {\n    return rateLimit({\n      windowMs: 10 * 60 * 1000, // 10 minutes\n      max: 10, // Limit each IP to 10 sensitive operations per windowMs\n      message: {\n        error: 'Too many sensitive operations',\n        message: 'Too many sensitive operations from this IP, please try again later.'\n      },\n      standardHeaders: true,\n      legacyHeaders: false\n    });\n  }\n\n  /**\n   * Custom security headers middleware\n   */\n  static customHeaders() {\n    return (req, res, next) => {\n      // API-specific headers\n      res.setHeader('X-API-Version', 'v2');\n      res.setHeader('X-Content-Type-Options', 'nosniff');\n      res.setHeader('X-Download-Options', 'noopen');\n      res.setHeader('X-Permitted-Cross-Domain-Policies', 'none');\n      \n      // Remove server information\n      res.removeHeader('X-Powered-By');\n      res.removeHeader('Server');\n      \n      // Cache control for API responses\n      if (req.path.startsWith('/api/')) {\n        res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.setHeader('Pragma', 'no-cache');\n        res.setHeader('Expires', '0');\n      }\n      \n      next();\n    };\n  }\n\n  /**\n   * Request logging middleware\n   */\n  static requestLogger() {\n    return (req, res, next) => {\n      const start = Date.now();\n      \n      // Log request\n      console.log(`${new Date().toISOString()} - ${req.method} ${req.path} - ${req.ip}`);\n      \n      // Log response when finished\n      res.on('finish', () => {\n        const duration = Date.now() - start;\n        console.log(\n          `${new Date().toISOString()} - ${req.method} ${req.path} - ${res.statusCode} - ${duration}ms`\n        );\n      });\n      \n      next();\n    };\n  }\n\n  /**\n   * Input validation middleware\n   */\n  static inputValidation() {\n    return (req, res, next) => {\n      // Limit request body size (already handled by express.json() but good to be explicit)\n      const maxSize = 10 * 1024 * 1024; // 10MB\n      \n      if (req.headers['content-length'] && parseInt(req.headers['content-length']) > maxSize) {\n        return res.status(413).json({\n          error: 'Payload too large',\n          message: 'Request body exceeds maximum allowed size'\n        });\n      }\n      \n      // Basic header validation\n      const userAgent = req.get('User-Agent');\n      if (userAgent && userAgent.length > 1000) {\n        return res.status(400).json({\n          error: 'Bad request',\n          message: 'Invalid User-Agent header'\n        });\n      }\n      \n      next();\n    };\n  }\n\n  /**\n   * Error handling middleware\n   */\n  static errorHandler() {\n    return (err, req, res, next) => {\n      // Log error\n      console.error(`Error on ${req.method} ${req.path}:`, err);\n      \n      // Handle CORS errors\n      if (err.message === 'Not allowed by CORS') {\n        return res.status(403).json({\n          error: 'Forbidden',\n          message: 'CORS policy violation'\n        });\n      }\n      \n      // Handle rate limit errors\n      if (err.status === 429) {\n        return res.status(429).json({\n          error: 'Too many requests',\n          message: err.message || 'Rate limit exceeded'\n        });\n      }\n      \n      // Handle JWT errors\n      if (err.name === 'JsonWebTokenError') {\n        return res.status(401).json({\n          error: 'Unauthorized',\n          message: 'Invalid token'\n        });\n      }\n      \n      if (err.name === 'TokenExpiredError') {\n        return res.status(401).json({\n          error: 'Unauthorized',\n          message: 'Token expired'\n        });\n      }\n      \n      // Handle validation errors\n      if (err.name === 'ValidationError') {\n        return res.status(400).json({\n          error: 'Validation error',\n          message: err.message\n        });\n      }\n      \n      // Generic error response (don't expose internal errors)\n      res.status(err.status || 500).json({\n        error: 'Internal server error',\n        message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong'\n      });\n    };\n  }\n\n  /**\n   * Security configuration for production\n   */\n  static productionSecurity() {\n    const middleware = [];\n    \n    // Add all security middleware for production\n    middleware.push(this.helmet());\n    middleware.push(this.cors());\n    middleware.push(this.apiRateLimit());\n    middleware.push(this.customHeaders());\n    middleware.push(this.inputValidation());\n    \n    if (process.env.NODE_ENV === 'production') {\n      middleware.push(this.requestLogger());\n    }\n    \n    return middleware;\n  }\n\n  /**\n   * Security configuration for development\n   */\n  static developmentSecurity() {\n    const middleware = [];\n    \n    // Relaxed security for development\n    middleware.push(this.cors());\n    middleware.push(this.customHeaders());\n    middleware.push(this.inputValidation());\n    middleware.push(this.requestLogger());\n    \n    return middleware;\n  }\n}\n\nmodule.exports = SecurityMiddleware;"],"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","ignoreList":[]}