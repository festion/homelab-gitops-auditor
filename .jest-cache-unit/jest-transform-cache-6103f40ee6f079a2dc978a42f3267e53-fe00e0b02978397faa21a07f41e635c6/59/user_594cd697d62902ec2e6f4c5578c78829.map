{"version":3,"names":["cov_2jfedswrqp","actualCoverage","v4","uuidv4","s","require","UserRole","ADMIN","OPERATOR","VIEWER","ALL_ROLES","isValid","role","f","includes","Permission","RESOURCES","REPOSITORIES","PIPELINES","TEMPLATES","METRICS","WEBHOOKS","SYSTEM","ACTIONS","READ","WRITE","DELETE","TRIGGER","CANCEL","APPLY","CREATE","EXPORT","CONFIGURE","format","resource","action","permission","b","split","Object","values","RolePermissions","get","ApiKey","constructor","data","id","name","key","permissions","createdAt","Date","lastUsed","expiresAt","isExpired","updateLastUsed","hasPermission","requiredPermission","toJSON","User","username","email","passwordHash","apiKeys","map","keyData","lastLogin","addApiKey","apiKey","push","removeApiKey","keyId","filter","getApiKey","find","updateLastLogin","module","exports"],"sources":["user.js"],"sourcesContent":["const { v4: uuidv4 } = require('uuid');\n\n/**\n * User Role Definitions\n */\nclass UserRole {\n  static ADMIN = 'admin';\n  static OPERATOR = 'operator'; \n  static VIEWER = 'viewer';\n\n  static ALL_ROLES = [this.ADMIN, this.OPERATOR, this.VIEWER];\n\n  static isValid(role) {\n    return this.ALL_ROLES.includes(role);\n  }\n}\n\n/**\n * Permission Definitions\n */\nclass Permission {\n  static RESOURCES = {\n    REPOSITORIES: 'repositories',\n    PIPELINES: 'pipelines', \n    TEMPLATES: 'templates',\n    METRICS: 'metrics',\n    WEBHOOKS: 'webhooks',\n    SYSTEM: 'system'\n  };\n\n  static ACTIONS = {\n    READ: 'read',\n    WRITE: 'write',\n    DELETE: 'delete',\n    TRIGGER: 'trigger',\n    CANCEL: 'cancel',\n    APPLY: 'apply',\n    CREATE: 'create',\n    EXPORT: 'export',\n    CONFIGURE: 'configure',\n    ADMIN: 'admin'\n  };\n\n  /**\n   * Format permission as resource:action\n   */\n  static format(resource, action) {\n    return `${resource}:${action}`;\n  }\n\n  /**\n   * Check if permission string is valid\n   */\n  static isValid(permission) {\n    if (permission === '*:*') return true;\n    \n    const [resource, action] = permission.split(':');\n    if (!resource || !action) return false;\n    \n    return Object.values(this.RESOURCES).includes(resource) && \n           Object.values(this.ACTIONS).includes(action);\n  }\n}\n\n/**\n * Role-based permission sets\n */\nclass RolePermissions {\n  static get(role) {\n    switch (role) {\n      case UserRole.ADMIN:\n        return ['*:*']; // All permissions\n        \n      case UserRole.OPERATOR:\n        return [\n          Permission.format(Permission.RESOURCES.REPOSITORIES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.REPOSITORIES, Permission.ACTIONS.WRITE),\n          Permission.format(Permission.RESOURCES.PIPELINES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.PIPELINES, Permission.ACTIONS.TRIGGER),\n          Permission.format(Permission.RESOURCES.PIPELINES, Permission.ACTIONS.CANCEL),\n          Permission.format(Permission.RESOURCES.TEMPLATES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.TEMPLATES, Permission.ACTIONS.APPLY),\n          Permission.format(Permission.RESOURCES.TEMPLATES, Permission.ACTIONS.CREATE),\n          Permission.format(Permission.RESOURCES.METRICS, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.WEBHOOKS, Permission.ACTIONS.READ)\n        ];\n        \n      case UserRole.VIEWER:\n        return [\n          Permission.format(Permission.RESOURCES.REPOSITORIES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.PIPELINES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.TEMPLATES, Permission.ACTIONS.READ),\n          Permission.format(Permission.RESOURCES.METRICS, Permission.ACTIONS.READ)\n        ];\n        \n      default:\n        return [];\n    }\n  }\n}\n\n/**\n * API Key Model\n */\nclass ApiKey {\n  constructor(data = {}) {\n    this.id = data.id || uuidv4();\n    this.name = data.name || '';\n    this.key = data.key || '';\n    this.permissions = data.permissions || [];\n    this.createdAt = data.createdAt || new Date();\n    this.lastUsed = data.lastUsed || null;\n    this.expiresAt = data.expiresAt || null;\n  }\n\n  /**\n   * Check if API key is expired\n   */\n  isExpired() {\n    return this.expiresAt && new Date() > this.expiresAt;\n  }\n\n  /**\n   * Update last used timestamp\n   */\n  updateLastUsed() {\n    this.lastUsed = new Date();\n  }\n\n  /**\n   * Check if key has specific permission\n   */\n  hasPermission(resource, action) {\n    const requiredPermission = Permission.format(resource, action);\n    \n    // Check for wildcard permission\n    if (this.permissions.includes('*:*')) {\n      return true;\n    }\n    \n    // Check for exact permission match\n    return this.permissions.includes(requiredPermission);\n  }\n\n  /**\n   * Convert to JSON representation\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      permissions: this.permissions,\n      createdAt: this.createdAt,\n      lastUsed: this.lastUsed,\n      expiresAt: this.expiresAt\n      // Note: 'key' is intentionally omitted for security\n    };\n  }\n}\n\n/**\n * User Model\n */\nclass User {\n  constructor(data = {}) {\n    this.id = data.id || uuidv4();\n    this.username = data.username || '';\n    this.email = data.email || '';\n    this.passwordHash = data.passwordHash || '';\n    this.role = data.role || UserRole.VIEWER;\n    this.permissions = data.permissions || RolePermissions.get(this.role);\n    this.apiKeys = (data.apiKeys || []).map(keyData => new ApiKey(keyData));\n    this.createdAt = data.createdAt || new Date();\n    this.lastLogin = data.lastLogin || null;\n  }\n\n  /**\n   * Check if user has specific permission\n   */\n  hasPermission(resource, action) {\n    const requiredPermission = Permission.format(resource, action);\n    \n    // Check for wildcard permission\n    if (this.permissions.includes('*:*')) {\n      return true;\n    }\n    \n    // Check for exact permission match\n    return this.permissions.includes(requiredPermission);\n  }\n\n  /**\n   * Add API key to user\n   */\n  addApiKey(apiKey) {\n    this.apiKeys.push(apiKey);\n  }\n\n  /**\n   * Remove API key by ID\n   */\n  removeApiKey(keyId) {\n    this.apiKeys = this.apiKeys.filter(key => key.id !== keyId);\n  }\n\n  /**\n   * Get API key by ID\n   */\n  getApiKey(keyId) {\n    return this.apiKeys.find(key => key.id === keyId);\n  }\n\n  /**\n   * Update last login timestamp\n   */\n  updateLastLogin() {\n    this.lastLogin = new Date();\n  }\n\n  /**\n   * Convert to JSON representation (safe for API responses)\n   */\n  toJSON() {\n    return {\n      id: this.id,\n      username: this.username,\n      email: this.email,\n      role: this.role,\n      permissions: this.permissions,\n      apiKeys: this.apiKeys.map(key => key.toJSON()),\n      createdAt: this.createdAt,\n      lastLogin: this.lastLogin\n      // Note: 'passwordHash' is intentionally omitted for security\n    };\n  }\n}\n\nmodule.exports = {\n  User,\n  ApiKey,\n  UserRole,\n  Permission,\n  RolePermissions\n};"],"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","ignoreList":[]}