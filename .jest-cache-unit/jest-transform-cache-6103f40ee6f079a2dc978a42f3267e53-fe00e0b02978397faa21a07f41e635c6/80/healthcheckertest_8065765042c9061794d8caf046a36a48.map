{"version":3,"names":["_getJestObj","mock","promises","readFile","jest","fn","readdir","require","HealthChecker","MockHomeAssistantAPI","MockMCPCoordinator","DeploymentFixtures","axios","fs","exec","yaml","describe","healthChecker","mockAxios","mockMCPCoordinator","mockLogger","mockExec","beforeEach","get","MockMCPCoordinatorClass","MCPCoordinator","mockImplementation","info","error","warn","debug","MockLogger","Logger","command","options","callback","mockResolvedValue","afterEach","clearAllMocks","it","initialize","expect","toHaveBeenCalled","toHaveBeenCalledWith","config","toBeDefined","thresholds","process","env","HOME_ASSISTANT_URL","HOME_ASSISTANT_TOKEN","deployment","homeAssistantConfig","healthCheckEndpoint","toBe","token","baselineMetrics","responseTime","diskUsage","memoryUsage","mockResolvedValueOnce","JSON","stringify","toEqual","mockRejectedValueOnce","Error","toBeNull","status","data","entity_id","state","headers","mockImplementationOnce","cmd","cb","stdout","stderr","getHealthStatus","networkFs","github","result","performPreDeploymentChecks","overall","healthy","healthyChecks","toBeGreaterThan","unhealthyChecks","checks","toHaveLength","mockRejectedValue","opts","rejects","toThrow","lastError","spyOn","version","unit_system","time_zone","components","Array","fill","valid","yamlSyntax","errors","performPostDeploymentChecks","find","c","name","Promise","resolve","setTimeout","mockResponse","checkHomeAssistantAPI","details","stateCount","toContain","timeoutError","code","timeout","checkSystemResources","cpuUsage","configFiles","path","isFile","yamlContent","validHomeAssistantConfig","load","mockReturnValue","homeassistant","includes","validateConfiguration","invalidYaml","invalidYAMLConfig","validYaml","insecureConfig","security","issues","stringContaining","checkMCPServers","healthyServers","unhealthyServers","totalServers","server","checkNetworkConnectivity","totalEndpoints","failedEndpoints","checkBackupSpace","currentUsage","availableSpace","results","value","report","processHealthResults","phase","totalChecks","failureReason","timestamp","files","getConfigurationFiles","map","f"],"sources":["health-checker.test.js"],"sourcesContent":["/**\n * Unit tests for Health Checker\n * Tests all health checking functionality with proper mocking\n */\n\nconst { HealthChecker } = require('../../../scripts/health-checks/health-checker');\nconst { MockHomeAssistantAPI } = require('../../mocks/home-assistant-api.mock');\nconst { MockMCPCoordinator } = require('../../mocks/mcp-coordinator.mock');\nconst { DeploymentFixtures } = require('../../fixtures/deployment-data');\nconst axios = require('axios');\nconst fs = require('fs').promises;\nconst { exec } = require('child_process');\nconst yaml = require('js-yaml');\n\n// Mock all external dependencies\njest.mock('axios');\njest.mock('fs', () => ({\n  promises: {\n    readFile: jest.fn(),\n    readdir: jest.fn()\n  }\n}));\njest.mock('child_process');\njest.mock('js-yaml');\njest.mock('../../../api/services/mcp-coordinator');\njest.mock('../../../api/utils/logger');\n\ndescribe('HealthChecker', () => {\n  let healthChecker;\n  let mockAxios;\n  let mockMCPCoordinator;\n  let mockLogger;\n  let mockExec;\n\n  beforeEach(() => {\n    mockAxios = axios;\n    mockAxios.get = jest.fn();\n\n    mockMCPCoordinator = new MockMCPCoordinator();\n    const MockMCPCoordinatorClass = require('../../../api/services/mcp-coordinator').MCPCoordinator;\n    MockMCPCoordinatorClass.mockImplementation(() => mockMCPCoordinator);\n\n    mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn()\n    };\n    const MockLogger = require('../../../api/utils/logger').Logger;\n    MockLogger.mockImplementation(() => mockLogger);\n\n    mockExec = jest.fn();\n    exec.mockImplementation((command, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      mockExec(command, options, callback);\n    });\n\n    healthChecker = new HealthChecker();\n\n    // Mock file system operations\n    fs.readFile.mockResolvedValue('{}');\n    fs.readdir.mockResolvedValue([]);\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('initialization', () => {\n    it('should initialize successfully with default configuration', async () => {\n      mockMCPCoordinator.initialize.mockResolvedValue(true);\n\n      await healthChecker.initialize();\n\n      expect(mockMCPCoordinator.initialize).toHaveBeenCalled();\n      expect(mockLogger.info).toHaveBeenCalledWith('Health Checker initialized');\n      expect(healthChecker.config).toBeDefined();\n      expect(healthChecker.config.thresholds).toBeDefined();\n    });\n\n    it('should use environment variables for configuration', async () => {\n      process.env.HOME_ASSISTANT_URL = 'http://test-ha-url:8123/api';\n      process.env.HOME_ASSISTANT_TOKEN = 'test-token-123';\n\n      await healthChecker.initialize();\n\n      expect(healthChecker.config.deployment.homeAssistantConfig.healthCheckEndpoint).toBe('http://test-ha-url:8123/api');\n      expect(healthChecker.config.deployment.homeAssistantConfig.token).toBe('test-token-123');\n\n      // Cleanup\n      delete process.env.HOME_ASSISTANT_URL;\n      delete process.env.HOME_ASSISTANT_TOKEN;\n    });\n\n    it('should load baseline metrics if available', async () => {\n      const baselineMetrics = {\n        responseTime: 100,\n        diskUsage: 50,\n        memoryUsage: 60\n      };\n      fs.readFile.mockResolvedValueOnce(JSON.stringify(baselineMetrics));\n\n      await healthChecker.initialize();\n\n      expect(healthChecker.baselineMetrics).toEqual(baselineMetrics);\n    });\n\n    it('should handle missing baseline metrics gracefully', async () => {\n      fs.readFile.mockRejectedValueOnce(new Error('File not found'));\n\n      await healthChecker.initialize();\n\n      expect(healthChecker.baselineMetrics).toBeNull();\n      expect(mockLogger.warn).toHaveBeenCalledWith('No baseline metrics found, will create new baseline');\n    });\n  });\n\n  describe('pre-deployment checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should pass all pre-deployment checks when system is healthy', async () => {\n      // Mock Home Assistant API\n      mockAxios.get.mockResolvedValue({\n        status: 200,\n        data: [{ entity_id: 'sensor.test', state: 'on' }],\n        headers: { 'x-ha-version': '2025.7.0' }\n      });\n\n      // Mock system resources using promisify-compatible format\n      mockExec\n        .mockImplementationOnce((cmd, cb) => cb(null, { stdout: '75', stderr: '' })) // disk usage (75%)\n        .mockImplementationOnce((cmd, cb) => cb(null, { stdout: '68.5', stderr: '' })) // memory usage (68.5%)\n        .mockImplementationOnce((cmd, cb) => cb(null, { stdout: '45.2', stderr: '' })) // CPU usage (45.2%)\n        .mockImplementationOnce((cmd, cb) => cb(null, { stdout: '1000000', stderr: '' })) // backup directory size (1MB)\n        .mockImplementationOnce((cmd, cb) => cb(null, { stdout: '5000000', stderr: '' })); // available space (5GB in KB)\n\n      // Mock MCP coordinator health\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'healthy' },\n        github: { status: 'healthy' }\n      });\n\n      const result = await healthChecker.performPreDeploymentChecks();\n\n      expect(result.overall.healthy).toBe(true);\n      expect(result.overall.healthyChecks).toBeGreaterThan(0);\n      expect(result.overall.unhealthyChecks).toBe(0);\n      expect(result.checks).toHaveLength(5);\n      expect(mockLogger.info).toHaveBeenCalledWith('Pre-deployment health checks passed');\n    });\n\n    it('should fail pre-deployment checks when Home Assistant is unreachable', async () => {\n      mockAxios.get.mockRejectedValue(new Error('ECONNREFUSED'));\n\n      // Mock other systems as healthy\n      mockExec.mockImplementation((cmd, opts, cb) => cb(null, { stdout: '50', stderr: '' }));\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'healthy' },\n        github: { status: 'healthy' }\n      });\n\n      await expect(healthChecker.performPreDeploymentChecks()).rejects.toThrow('Pre-deployment health checks failed');\n    });\n\n    it('should fail pre-deployment checks when system resources are critical', async () => {\n      // Mock Home Assistant as healthy\n      mockAxios.get.mockResolvedValue({\n        status: 200,\n        data: [],\n        headers: {}\n      });\n\n      // Mock critical system resources\n      mockExec\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '95', stderr: '' })) // critical disk usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '98.5', stderr: '' })) // critical memory usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '99.2', stderr: '' })); // critical CPU usage\n\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'healthy' },\n        github: { status: 'healthy' }\n      });\n\n      await expect(healthChecker.performPreDeploymentChecks()).rejects.toThrow('Pre-deployment health checks failed');\n    });\n\n    it('should fail when MCP servers are unhealthy', async () => {\n      // Mock Home Assistant as healthy\n      mockAxios.get.mockResolvedValue({\n        status: 200,\n        data: [],\n        headers: {}\n      });\n\n      // Mock system resources as healthy\n      mockExec.mockImplementation((cmd, opts, cb) => cb(null, { stdout: '50', stderr: '' }));\n\n      // Mock MCP coordinator with unhealthy servers\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'error', lastError: 'Connection timeout' },\n        github: { status: 'healthy' }\n      });\n\n      await expect(healthChecker.performPreDeploymentChecks()).rejects.toThrow('Pre-deployment health checks failed');\n    });\n  });\n\n  describe('post-deployment checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n      // Mock sleep function to avoid delays in tests\n      jest.spyOn(healthChecker, 'sleep').mockResolvedValue();\n    });\n\n    it('should pass all post-deployment checks when system is healthy', async () => {\n      // Mock Home Assistant API\n      mockAxios.get\n        .mockResolvedValueOnce({ // /states endpoint\n          status: 200,\n          data: [{ entity_id: 'sensor.test', state: 'on' }],\n          headers: { 'x-ha-version': '2025.7.0' }\n        })\n        .mockResolvedValueOnce({ // /config endpoint\n          status: 200,\n          data: {\n            version: '2025.7.0',\n            unit_system: 'metric',\n            time_zone: 'America/New_York',\n            components: ['mqtt', 'homekit']\n          }\n        })\n        .mockResolvedValueOnce({ // performance check\n          status: 200,\n          data: Array(100).fill({ entity_id: 'test' })\n        });\n\n      // Mock configuration validation\n      jest.spyOn(healthChecker, 'validateConfiguration').mockResolvedValue({\n        valid: true,\n        yamlSyntax: { valid: true, errors: [] },\n        homeAssistantConfig: { valid: true, errors: [] }\n      });\n\n      const result = await healthChecker.performPostDeploymentChecks();\n\n      expect(result.overall.healthy).toBe(true);\n      expect(result.checks).toHaveLength(5);\n      expect(result.checks.find(c => c.name === 'home-assistant-api')).toBeDefined();\n      expect(result.checks.find(c => c.name === 'configuration-integrity')).toBeDefined();\n      expect(result.checks.find(c => c.name === 'service-availability')).toBeDefined();\n      expect(mockLogger.info).toHaveBeenCalledWith('Post-deployment health checks passed');\n    });\n\n    it('should fail when configuration is invalid', async () => {\n      // Mock Home Assistant API as healthy\n      mockAxios.get.mockResolvedValue({\n        status: 200,\n        data: [],\n        headers: {}\n      });\n\n      // Mock invalid configuration\n      jest.spyOn(healthChecker, 'validateConfiguration').mockResolvedValue({\n        valid: false,\n        yamlSyntax: { valid: false, errors: [{ error: 'Invalid YAML syntax' }] }\n      });\n\n      await expect(healthChecker.performPostDeploymentChecks()).rejects.toThrow('Post-deployment health checks failed');\n    });\n\n    it('should detect performance degradation', async () => {\n      // Mock slow Home Assistant API responses\n      mockAxios.get.mockImplementation(() => {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve({\n              status: 200,\n              data: [],\n              headers: {}\n            });\n          }, 3000); // 3 second delay, exceeds threshold\n        });\n      });\n\n      await expect(healthChecker.performPostDeploymentChecks()).rejects.toThrow('Post-deployment health checks failed');\n    });\n  });\n\n  describe('Home Assistant API checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should check Home Assistant API successfully', async () => {\n      const mockResponse = {\n        status: 200,\n        data: [\n          { entity_id: 'sensor.temperature', state: '22.5' },\n          { entity_id: 'light.living_room', state: 'on' }\n        ],\n        headers: { 'x-ha-version': '2025.7.0' }\n      };\n\n      mockAxios.get.mockResolvedValue(mockResponse);\n\n      const result = await healthChecker.checkHomeAssistantAPI();\n\n      expect(result.name).toBe('home-assistant-api');\n      expect(result.status).toBe('healthy');\n      expect(result.responseTime).toBeGreaterThan(0);\n      expect(result.details.stateCount).toBe(2);\n      expect(result.details.version).toBe('2025.7.0');\n    });\n\n    it('should handle Home Assistant API errors', async () => {\n      mockAxios.get.mockRejectedValue(new Error('ECONNREFUSED'));\n\n      const result = await healthChecker.checkHomeAssistantAPI();\n\n      expect(result.name).toBe('home-assistant-api');\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('ECONNREFUSED');\n    });\n\n    it('should handle timeout errors', async () => {\n      const timeoutError = new Error('Request timeout');\n      timeoutError.code = 'ECONNABORTED';\n      mockAxios.get.mockRejectedValue(timeoutError);\n\n      const result = await healthChecker.checkHomeAssistantAPI();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.details.timeout).toBe(true);\n    });\n\n    it('should handle unexpected status codes', async () => {\n      mockAxios.get.mockResolvedValue({\n        status: 503,\n        data: { error: 'Service unavailable' }\n      });\n\n      const result = await healthChecker.checkHomeAssistantAPI();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('Unexpected status code: 503');\n    });\n  });\n\n  describe('system resource checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should check system resources when healthy', async () => {\n      mockExec\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '75', stderr: '' })) // disk usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '68.5', stderr: '' })) // memory usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '45.2', stderr: '' })); // CPU usage\n\n      const result = await healthChecker.checkSystemResources();\n\n      expect(result.name).toBe('system-resources');\n      expect(result.status).toBe('healthy');\n      expect(result.details.diskUsage).toBe(75);\n      expect(result.details.memoryUsage).toBe(68.5);\n      expect(result.details.cpuUsage).toBe(45.2);\n    });\n\n    it('should detect high resource usage', async () => {\n      mockExec\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '95', stderr: '' })) // high disk usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '98.5', stderr: '' })) // high memory usage\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '99.2', stderr: '' })); // high CPU usage\n\n      const result = await healthChecker.checkSystemResources();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('Disk usage high: 95%');\n      expect(result.error).toContain('Memory usage high: 98.5%');\n      expect(result.error).toContain('CPU usage high: 99.2%');\n    });\n\n    it('should handle system command failures', async () => {\n      mockExec.mockImplementation((cmd, opts, cb) => cb(new Error('Command not found')));\n\n      const result = await healthChecker.checkSystemResources();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('Command not found');\n    });\n  });\n\n  describe('configuration validation', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should validate configuration successfully', async () => {\n      const configFiles = [\n        { name: 'configuration.yaml', path: '/config/configuration.yaml' },\n        { name: 'automations.yaml', path: '/config/automations.yaml' }\n      ];\n\n      fs.readdir.mockResolvedValue([\n        { name: 'configuration.yaml', isFile: () => true },\n        { name: 'automations.yaml', isFile: () => true }\n      ]);\n\n      const yamlContent = DeploymentFixtures.configFiles.validHomeAssistantConfig();\n      fs.readFile.mockResolvedValue(yamlContent);\n      yaml.load.mockReturnValue({ homeassistant: { name: 'Home' } });\n\n      // Mock Home Assistant config check command\n      mockExec.mockImplementation((cmd, opts, cb) => {\n        if (cmd.includes('check_config')) {\n          cb(null, { stdout: 'Configuration check successful', stderr: '' });\n        } else {\n          cb(new Error('Command not found'));\n        }\n      });\n\n      const result = await healthChecker.validateConfiguration('/config');\n\n      expect(result.valid).toBe(true);\n      expect(result.yamlSyntax.valid).toBe(true);\n      expect(result.homeAssistantConfig.valid).toBe(true);\n    });\n\n    it('should detect YAML syntax errors', async () => {\n      fs.readdir.mockResolvedValue([\n        { name: 'configuration.yaml', isFile: () => true }\n      ]);\n\n      const invalidYaml = DeploymentFixtures.configFiles.invalidYAMLConfig();\n      fs.readFile.mockResolvedValue(invalidYaml);\n      yaml.load.mockImplementation(() => {\n        throw new Error('mapping values are not allowed here');\n      });\n\n      const result = await healthChecker.validateConfiguration('/config');\n\n      expect(result.valid).toBe(false);\n      expect(result.yamlSyntax.valid).toBe(false);\n      expect(result.yamlSyntax.errors).toHaveLength(1);\n      expect(result.yamlSyntax.errors[0].error).toContain('mapping values are not allowed here');\n    });\n\n    it('should detect Home Assistant configuration errors', async () => {\n      fs.readdir.mockResolvedValue([\n        { name: 'configuration.yaml', isFile: () => true }\n      ]);\n\n      const validYaml = DeploymentFixtures.configFiles.validHomeAssistantConfig();\n      fs.readFile.mockResolvedValue(validYaml);\n      yaml.load.mockReturnValue({ homeassistant: { name: 'Home' } });\n\n      // Mock Home Assistant config check with errors\n      mockExec.mockImplementation((cmd, opts, cb) => {\n        if (cmd.includes('check_config')) {\n          cb(null, { \n            stdout: 'Configuration check failed', \n            stderr: 'Invalid platform: nonexistent_platform' \n          });\n        } else {\n          cb(new Error('Command not found'));\n        }\n      });\n\n      const result = await healthChecker.validateConfiguration('/config');\n\n      expect(result.valid).toBe(false);\n      expect(result.homeAssistantConfig.valid).toBe(false);\n      expect(result.homeAssistantConfig.errors).toContain('Invalid platform: nonexistent_platform');\n    });\n\n    it('should detect security compliance issues', async () => {\n      fs.readdir.mockResolvedValue([\n        { name: 'configuration.yaml', isFile: () => true }\n      ]);\n\n      const insecureConfig = `\nhomeassistant:\n  name: Home\nmqtt:\n  broker: 192.168.1.1\n  username: user\n  password: plaintext_password\nhttp:\n  base_url: http://insecure-site.com\n`;\n\n      fs.readFile.mockResolvedValue(insecureConfig);\n      yaml.load.mockReturnValue({ homeassistant: { name: 'Home' } });\n\n      const result = await healthChecker.validateConfiguration('/config');\n\n      expect(result.security.valid).toBe(false);\n      expect(result.security.issues).toContain(expect.stringContaining('hardcoded credentials'));\n      expect(result.security.issues).toContain(expect.stringContaining('Insecure HTTP protocol'));\n    });\n  });\n\n  describe('MCP server checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should check MCP servers when all are healthy', async () => {\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'healthy' },\n        github: { status: 'healthy' }\n      });\n\n      const result = await healthChecker.checkMCPServers();\n\n      expect(result.name).toBe('mcp-servers');\n      expect(result.status).toBe('healthy');\n      expect(result.details.healthyServers).toEqual(['networkFs', 'github']);\n      expect(result.details.unhealthyServers).toHaveLength(0);\n      expect(result.details.totalServers).toBe(2);\n    });\n\n    it('should detect unhealthy MCP servers', async () => {\n      mockMCPCoordinator.getHealthStatus.mockResolvedValue({\n        networkFs: { status: 'error', lastError: 'Connection timeout' },\n        github: { status: 'healthy' }\n      });\n\n      const result = await healthChecker.checkMCPServers();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('Unhealthy servers: networkFs');\n      expect(result.details.unhealthyServers).toHaveLength(1);\n      expect(result.details.unhealthyServers[0]).toEqual({\n        server: 'networkFs',\n        error: 'Connection timeout'\n      });\n    });\n\n    it('should handle MCP coordinator errors', async () => {\n      mockMCPCoordinator.getHealthStatus.mockRejectedValue(new Error('MCP coordinator not initialized'));\n\n      const result = await healthChecker.checkMCPServers();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('MCP coordinator not initialized');\n    });\n  });\n\n  describe('network connectivity checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should check network connectivity when all endpoints are reachable', async () => {\n      mockAxios.get\n        .mockResolvedValueOnce({ status: 200 }) // home-assistant\n        .mockResolvedValueOnce({ status: 200 }) // github\n        .mockResolvedValueOnce({ status: 200 }); // dns\n\n      const result = await healthChecker.checkNetworkConnectivity();\n\n      expect(result.name).toBe('network-connectivity');\n      expect(result.status).toBe('healthy');\n      expect(result.details.totalEndpoints).toBe(3);\n      expect(result.details.failedEndpoints).toBe(0);\n    });\n\n    it('should detect failed connections', async () => {\n      mockAxios.get\n        .mockRejectedValueOnce(new Error('ECONNREFUSED')) // home-assistant fails\n        .mockResolvedValueOnce({ status: 200 }) // github succeeds\n        .mockResolvedValueOnce({ status: 200 }); // dns succeeds\n\n      const result = await healthChecker.checkNetworkConnectivity();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toContain('Failed connections: home-assistant');\n      expect(result.details.failedEndpoints).toBe(1);\n    });\n  });\n\n  describe('backup space checks', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should check backup space when sufficient space is available', async () => {\n      mockExec\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '50000000', stderr: '' })) // directory size (50MB)\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '5000000', stderr: '' })); // available space (5GB)\n\n      const result = await healthChecker.checkBackupSpace();\n\n      expect(result.name).toBe('backup-space');\n      expect(result.status).toBe('healthy');\n      expect(result.details.currentUsage).toBe(50000000);\n      expect(result.details.availableSpace).toBe(5000000 * 1024); // Converted to bytes\n    });\n\n    it('should detect insufficient backup space', async () => {\n      mockExec\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '50000000', stderr: '' })) // directory size\n        .mockImplementationOnce((cmd, opts, cb) => cb(null, { stdout: '100', stderr: '' })); // very little available space\n\n      const result = await healthChecker.checkBackupSpace();\n\n      expect(result.status).toBe('unhealthy');\n      expect(result.error).toBe('Insufficient backup space');\n      expect(result.details.availableSpace).toBe(100 * 1024);\n    });\n  });\n\n  describe('utility methods', () => {\n    beforeEach(async () => {\n      await healthChecker.initialize();\n    });\n\n    it('should process health results correctly', () => {\n      const results = [\n        { value: { name: 'test1', status: 'healthy' } },\n        { value: { name: 'test2', status: 'unhealthy', error: 'Test error' } },\n        { value: { name: 'test3', status: 'healthy' } }\n      ];\n\n      const report = healthChecker.processHealthResults(results, 'test-phase');\n\n      expect(report.phase).toBe('test-phase');\n      expect(report.overall.healthy).toBe(false);\n      expect(report.overall.totalChecks).toBe(3);\n      expect(report.overall.healthyChecks).toBe(2);\n      expect(report.overall.unhealthyChecks).toBe(1);\n      expect(report.overall.failureReason).toContain('Test error');\n      expect(report.timestamp).toBeDefined();\n    });\n\n    it('should get configuration files correctly', async () => {\n      fs.readdir.mockResolvedValue([\n        { name: 'configuration.yaml', isFile: () => true },\n        { name: 'automations.yaml', isFile: () => true },\n        { name: 'secrets.yaml', isFile: () => true },\n        { name: 'other.txt', isFile: () => true },\n        { name: 'subdirectory', isFile: () => false }\n      ]);\n\n      const files = await healthChecker.getConfigurationFiles('/config');\n\n      expect(files).toHaveLength(3); // Only .yaml files\n      expect(files.map(f => f.name)).toEqual(['configuration.yaml', 'automations.yaml', 'secrets.yaml']);\n      expect(files[0].path).toBe('/config/configuration.yaml');\n    });\n\n    it('should handle directory read errors gracefully', async () => {\n      fs.readdir.mockRejectedValue(new Error('Permission denied'));\n\n      const files = await healthChecker.getConfigurationFiles('/config');\n\n      expect(files).toHaveLength(0);\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        expect.stringContaining('Could not read config directory')\n      );\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}