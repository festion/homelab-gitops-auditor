{"version":3,"names":["cov_1r6mewk52c","actualCoverage","sqlite3","s","require","verbose","path","fs","Database","constructor","dbPath","b","f","join","__dirname","db","dataDir","dirname","existsSync","mkdirSync","recursive","connect","Promise","resolve","reject","err","console","error","message","log","close","initializeSchema","queries","query","run","sql","params","id","lastID","changes","get","row","all","rows","createDefaultAdmin","bcrypt","User","UserRole","userCount","count","defaultPassword","process","env","DEFAULT_ADMIN_PASSWORD","passwordHash","hash","adminUser","username","email","role","ADMIN","JSON","stringify","permissions","createdAt","toISOString","getInstance","instance","module","exports"],"sources":["database.js"],"sourcesContent":["const sqlite3 = require('sqlite3').verbose();\nconst path = require('path');\nconst fs = require('fs');\n\n/**\n * Database connection and schema management\n */\nclass Database {\n  constructor(dbPath = null) {\n    this.dbPath = dbPath || path.join(__dirname, '../data/auth.db');\n    this.db = null;\n    \n    // Ensure data directory exists\n    const dataDir = path.dirname(this.dbPath);\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Initialize database connection\n   */\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.db = new sqlite3.Database(this.dbPath, (err) => {\n        if (err) {\n          console.error('Error connecting to database:', err.message);\n          reject(err);\n        } else {\n          console.log('Connected to SQLite database at:', this.dbPath);\n          resolve();\n        }\n      });\n    });\n  }\n\n  /**\n   * Close database connection\n   */\n  async close() {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        this.db.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            console.log('Database connection closed');\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  /**\n   * Initialize database schema\n   */\n  async initializeSchema() {\n    const queries = [\n      // Users table\n      `CREATE TABLE IF NOT EXISTS users (\n        id TEXT PRIMARY KEY,\n        username TEXT UNIQUE NOT NULL,\n        email TEXT UNIQUE NOT NULL,\n        password_hash TEXT NOT NULL,\n        role TEXT NOT NULL DEFAULT 'viewer',\n        permissions TEXT NOT NULL DEFAULT '[]',\n        created_at TEXT NOT NULL,\n        last_login TEXT\n      )`,\n\n      // API keys table\n      `CREATE TABLE IF NOT EXISTS api_keys (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        name TEXT NOT NULL,\n        key_hash TEXT UNIQUE NOT NULL,\n        permissions TEXT NOT NULL DEFAULT '[]',\n        last_used TEXT,\n        expires_at TEXT,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n      )`,\n\n      // Sessions table  \n      `CREATE TABLE IF NOT EXISTS sessions (\n        id TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        token_hash TEXT UNIQUE NOT NULL,\n        expires_at TEXT NOT NULL,\n        created_at TEXT NOT NULL,\n        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE\n      )`,\n\n      // Audit log table for authentication events\n      `CREATE TABLE IF NOT EXISTS auth_audit_log (\n        id TEXT PRIMARY KEY,\n        user_id TEXT,\n        username TEXT,\n        action TEXT NOT NULL,\n        resource TEXT,\n        ip_address TEXT,\n        user_agent TEXT,\n        success BOOLEAN NOT NULL,\n        details TEXT,\n        created_at TEXT NOT NULL\n      )`,\n\n      // Create indexes for performance\n      `CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)`,\n      `CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)`,\n      `CREATE INDEX IF NOT EXISTS idx_api_keys_user_id ON api_keys(user_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_api_keys_key_hash ON api_keys(key_hash)`,\n      `CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_sessions_token_hash ON sessions(token_hash)`,\n      `CREATE INDEX IF NOT EXISTS idx_auth_audit_log_user_id ON auth_audit_log(user_id)`,\n      `CREATE INDEX IF NOT EXISTS idx_auth_audit_log_created_at ON auth_audit_log(created_at)`\n    ];\n\n    try {\n      for (const query of queries) {\n        await this.run(query);\n      }\n      console.log('Database schema initialized successfully');\n    } catch (error) {\n      console.error('Error initializing database schema:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Run SQL query with parameters\n   */\n  run(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.run(sql, params, function(err) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve({ id: this.lastID, changes: this.changes });\n        }\n      });\n    });\n  }\n\n  /**\n   * Get single row from query\n   */\n  get(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.get(sql, params, (err, row) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(row);\n        }\n      });\n    });\n  }\n\n  /**\n   * Get all rows from query\n   */\n  all(sql, params = []) {\n    return new Promise((resolve, reject) => {\n      this.db.all(sql, params, (err, rows) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(rows);\n        }\n      });\n    });\n  }\n\n  /**\n   * Create default admin user if no users exist\n   */\n  async createDefaultAdmin() {\n    const bcrypt = require('bcrypt');\n    const { User, UserRole } = require('./user');\n\n    // Check if any users exist\n    const userCount = await this.get('SELECT COUNT(*) as count FROM users');\n    \n    if (userCount.count === 0) {\n      console.log('No users found, creating default admin user...');\n      \n      const defaultPassword = process.env.DEFAULT_ADMIN_PASSWORD || 'admin123';\n      const passwordHash = await bcrypt.hash(defaultPassword, 12);\n      \n      const adminUser = new User({\n        username: 'admin',\n        email: 'admin@homelab.local',\n        passwordHash: passwordHash,\n        role: UserRole.ADMIN\n      });\n\n      await this.run(\n        `INSERT INTO users (id, username, email, password_hash, role, permissions, created_at)\n         VALUES (?, ?, ?, ?, ?, ?, ?)`,\n        [\n          adminUser.id,\n          adminUser.username,\n          adminUser.email,\n          adminUser.passwordHash,\n          adminUser.role,\n          JSON.stringify(adminUser.permissions),\n          adminUser.createdAt.toISOString()\n        ]\n      );\n\n      console.log('Default admin user created:');\n      console.log('  Username: admin');\n      console.log('  Password:', defaultPassword);\n      console.log('  Email: admin@homelab.local');\n      console.log('');\n      console.log('⚠️  IMPORTANT: Change the default password after first login!');\n    }\n  }\n\n  /**\n   * Get database instance (singleton pattern)\n   */\n  static getInstance(dbPath = null) {\n    if (!Database.instance) {\n      Database.instance = new Database(dbPath);\n    }\n    return Database.instance;\n  }\n}\n\nmodule.exports = Database;"],"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","ignoreList":[]}