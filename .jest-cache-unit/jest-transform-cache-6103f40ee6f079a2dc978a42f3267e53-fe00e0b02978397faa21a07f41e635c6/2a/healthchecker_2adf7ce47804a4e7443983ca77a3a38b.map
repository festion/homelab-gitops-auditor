{"version":3,"names":["axios","require","yaml","fs","promises","exec","promisify","execAsync","MCPCoordinator","Logger","HealthChecker","constructor","config","logger","mcpCoordinator","baselineMetrics","initialize","loadConfiguration","loadBaselineMetrics","info","deployment","homeAssistantConfig","healthCheckEndpoint","process","env","HOME_ASSISTANT_URL","token","HOME_ASSISTANT_TOKEN","thresholds","diskUsage","memoryUsage","cpuUsage","responseTime","monitoring","retries","timeout","baselinePath","data","readFile","JSON","parse","error","warn","performPreDeploymentChecks","checks","checkHomeAssistantAPI","checkSystemResources","checkMCPServers","checkBackupSpace","checkNetworkConnectivity","results","Promise","allSettled","healthReport","processHealthResults","overall","healthy","Error","failureReason","performPostDeploymentChecks","sleep","checkConfigurationIntegrity","checkServiceAvailability","checkPerformanceMetrics","checkLogErrors","validateConfiguration","configPath","configFiles","getConfigurationFiles","yamlValidation","validateYAMLSyntax","haValidation","validateHomeAssistantConfig","referenceValidation","validateConfigurationReferences","securityValidation","validateSecurityCompliance","validationResult","valid","yamlSyntax","references","security","message","endpoint","startTime","Date","now","response","get","headers","status","name","details","statusCode","stateCount","length","version","code","validation","replace","units","unit_system","timeZone","time_zone","components","getDiskUsage","getMemoryUsage","getCPUUsage","issues","push","join","mcpHealth","getHealthStatus","healthyServers","unhealthyServers","serverType","Object","entries","server","lastError","map","s","totalServers","keys","backupPath","usage","getDirectorySize","available","getAvailableSpace","estimatedBackupSize","requiredSpace","currentUsage","availableSpace","endpoints","url","then","catch","connectivity","result","value","failedConnections","filter","c","totalEndpoints","failedEndpoints","performanceIssues","apiResponseTime","threshold","errors","file","content","path","load","stderr","output","stdout","configFile","fileError","match","includes","files","extensions","readdir","withFileTypes","entry","isFile","some","ext","endsWith","phase","healthyChecks","check","unhealthyChecks","timestamp","toISOString","totalChecks","ms","resolve","setTimeout","parseInt","trim","parseFloat","dirPath","module","exports"],"sources":["health-checker.js"],"sourcesContent":["const axios = require('axios');\nconst yaml = require('js-yaml');\nconst fs = require('fs').promises;\nconst { exec } = require('child_process');\nconst { promisify } = require('util');\nconst execAsync = promisify(exec);\nconst { MCPCoordinator } = require('../../api/services/mcp-coordinator');\nconst { Logger } = require('../../api/utils/logger');\n\nclass HealthChecker {\n  constructor() {\n    this.config = null;\n    this.logger = new Logger('HealthChecker');\n    this.mcpCoordinator = null;\n    this.baselineMetrics = null;\n  }\n\n  async initialize() {\n    // Load configuration from existing config manager\n    await this.loadConfiguration();\n    \n    // Initialize MCP coordinator\n    this.mcpCoordinator = new MCPCoordinator();\n    await this.mcpCoordinator.initialize();\n    \n    // Load baseline metrics\n    await this.loadBaselineMetrics();\n    \n    this.logger.info('Health Checker initialized');\n  }\n\n  async loadConfiguration() {\n    // Default configuration\n    this.config = {\n      deployment: {\n        homeAssistantConfig: {\n          healthCheckEndpoint: process.env.HOME_ASSISTANT_URL || 'http://192.168.1.155:8123/api',\n          token: process.env.HOME_ASSISTANT_TOKEN || 'test-home-assistant-token-for-diagnostic'\n        }\n      },\n      thresholds: {\n        diskUsage: 85,\n        memoryUsage: 90,\n        cpuUsage: 95,\n        responseTime: 2000\n      },\n      monitoring: {\n        retries: 3,\n        timeout: 10000\n      }\n    };\n  }\n\n  async loadBaselineMetrics() {\n    try {\n      const baselinePath = 'scripts/health-checks/baseline-metrics.json';\n      const data = await fs.readFile(baselinePath, 'utf8');\n      this.baselineMetrics = JSON.parse(data);\n    } catch (error) {\n      this.logger.warn('No baseline metrics found, will create new baseline');\n      this.baselineMetrics = null;\n    }\n  }\n\n  async performPreDeploymentChecks() {\n    this.logger.info('Starting pre-deployment health checks');\n    \n    const checks = [\n      this.checkHomeAssistantAPI(),\n      this.checkSystemResources(),\n      this.checkMCPServers(),\n      this.checkBackupSpace(),\n      this.checkNetworkConnectivity()\n    ];\n    \n    const results = await Promise.allSettled(checks);\n    const healthReport = this.processHealthResults(results, 'pre-deployment');\n    \n    if (!healthReport.overall.healthy) {\n      throw new Error(`Pre-deployment health checks failed: ${healthReport.overall.failureReason}`);\n    }\n    \n    this.logger.info('Pre-deployment health checks passed');\n    return healthReport;\n  }\n\n  async performPostDeploymentChecks() {\n    this.logger.info('Starting post-deployment health checks');\n    \n    // Allow system to settle after deployment\n    await this.sleep(10000);\n    \n    const checks = [\n      this.checkHomeAssistantAPI(),\n      this.checkConfigurationIntegrity(),\n      this.checkServiceAvailability(),\n      this.checkPerformanceMetrics(),\n      this.checkLogErrors()\n    ];\n    \n    const results = await Promise.allSettled(checks);\n    const healthReport = this.processHealthResults(results, 'post-deployment');\n    \n    if (!healthReport.overall.healthy) {\n      throw new Error(`Post-deployment health checks failed: ${healthReport.overall.failureReason}`);\n    }\n    \n    this.logger.info('Post-deployment health checks passed');\n    return healthReport;\n  }\n\n  async validateConfiguration(configPath) {\n    this.logger.info(`Validating configuration at ${configPath}`);\n    \n    try {\n      // Read configuration files\n      const configFiles = await this.getConfigurationFiles(configPath);\n      \n      // Validate YAML syntax\n      const yamlValidation = await this.validateYAMLSyntax(configFiles);\n      \n      // Validate Home Assistant configuration\n      const haValidation = await this.validateHomeAssistantConfig(configPath);\n      \n      // Validate configuration references\n      const referenceValidation = await this.validateConfigurationReferences(configFiles);\n      \n      // Security validation\n      const securityValidation = await this.validateSecurityCompliance(configFiles);\n      \n      const validationResult = {\n        valid: yamlValidation.valid && haValidation.valid && referenceValidation.valid && securityValidation.valid,\n        yamlSyntax: yamlValidation,\n        homeAssistantConfig: haValidation,\n        references: referenceValidation,\n        security: securityValidation\n      };\n      \n      this.logger.info('Configuration validation completed', { valid: validationResult.valid });\n      return validationResult;\n      \n    } catch (error) {\n      this.logger.error('Configuration validation failed', error);\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Home Assistant Health Checks\n  async checkHomeAssistantAPI() {\n    const endpoint = this.config.deployment.homeAssistantConfig.healthCheckEndpoint;\n    const token = this.config.deployment.homeAssistantConfig.token;\n    \n    try {\n      const startTime = Date.now();\n      const response = await axios.get(`${endpoint}/states`, {\n        timeout: this.config.monitoring.timeout,\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      const responseTime = Date.now() - startTime;\n      \n      if (response.status === 200) {\n        return {\n          name: 'home-assistant-api',\n          status: 'healthy',\n          responseTime: responseTime,\n          details: {\n            statusCode: response.status,\n            stateCount: response.data.length,\n            version: response.headers['x-ha-version'] || 'unknown'\n          }\n        };\n      } else {\n        throw new Error(`Unexpected status code: ${response.status}`);\n      }\n      \n    } catch (error) {\n      return {\n        name: 'home-assistant-api',\n        status: 'unhealthy',\n        error: error.message,\n        details: {\n          endpoint: endpoint,\n          timeout: error.code === 'ECONNABORTED'\n        }\n      };\n    }\n  }\n\n  async checkConfigurationIntegrity() {\n    try {\n      const configPath = '/config';\n      const validation = await this.validateConfiguration(configPath);\n      \n      if (validation.valid) {\n        return {\n          name: 'configuration-integrity',\n          status: 'healthy',\n          details: validation\n        };\n      } else {\n        return {\n          name: 'configuration-integrity',\n          status: 'unhealthy',\n          error: 'Configuration validation failed',\n          details: validation\n        };\n      }\n      \n    } catch (error) {\n      return {\n        name: 'configuration-integrity',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkServiceAvailability() {\n    try {\n      const endpoint = this.config.deployment.homeAssistantConfig.healthCheckEndpoint.replace('/api', '');\n      const token = this.config.deployment.homeAssistantConfig.token;\n      \n      const response = await axios.get(`${endpoint}/api/config`, {\n        timeout: 5000,\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      const config = response.data;\n      \n      return {\n        name: 'service-availability',\n        status: 'healthy',\n        details: {\n          version: config.version,\n          units: config.unit_system,\n          timeZone: config.time_zone,\n          components: config.components?.length || 0\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'service-availability',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  // System Health Checks\n  async checkSystemResources() {\n    try {\n      const diskUsage = await this.getDiskUsage();\n      const memoryUsage = await this.getMemoryUsage();\n      const cpuUsage = await this.getCPUUsage();\n      \n      const thresholds = this.config.thresholds;\n      \n      const issues = [];\n      if (diskUsage > thresholds.diskUsage) issues.push(`Disk usage high: ${diskUsage}%`);\n      if (memoryUsage > thresholds.memoryUsage) issues.push(`Memory usage high: ${memoryUsage}%`);\n      if (cpuUsage > thresholds.cpuUsage) issues.push(`CPU usage high: ${cpuUsage}%`);\n      \n      return {\n        name: 'system-resources',\n        status: issues.length === 0 ? 'healthy' : 'unhealthy',\n        error: issues.join(', '),\n        details: {\n          diskUsage: diskUsage,\n          memoryUsage: memoryUsage,\n          cpuUsage: cpuUsage,\n          thresholds: thresholds\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'system-resources',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkMCPServers() {\n    try {\n      // Get MCP server status from coordinator\n      const mcpHealth = await this.mcpCoordinator.getHealthStatus();\n      const healthyServers = [];\n      const unhealthyServers = [];\n      \n      for (const [serverType, status] of Object.entries(mcpHealth)) {\n        if (status.status === 'healthy') {\n          healthyServers.push(serverType);\n        } else {\n          unhealthyServers.push({\n            server: serverType,\n            error: status.lastError || 'Unknown error'\n          });\n        }\n      }\n      \n      return {\n        name: 'mcp-servers',\n        status: unhealthyServers.length === 0 ? 'healthy' : 'unhealthy',\n        error: unhealthyServers.length > 0 ? `Unhealthy servers: ${unhealthyServers.map(s => s.server).join(', ')}` : null,\n        details: {\n          healthyServers: healthyServers,\n          unhealthyServers: unhealthyServers,\n          totalServers: Object.keys(mcpHealth).length\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'mcp-servers',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkBackupSpace() {\n    try {\n      const backupPath = '/backup';\n      const usage = await this.getDirectorySize(backupPath);\n      const available = await this.getAvailableSpace(backupPath);\n      \n      // Check if we have enough space for at least 2 more backups\n      const estimatedBackupSize = 100 * 1024 * 1024; // 100MB estimated\n      const requiredSpace = estimatedBackupSize * 2;\n      \n      return {\n        name: 'backup-space',\n        status: available > requiredSpace ? 'healthy' : 'unhealthy',\n        error: available <= requiredSpace ? 'Insufficient backup space' : null,\n        details: {\n          currentUsage: usage,\n          availableSpace: available,\n          requiredSpace: requiredSpace\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'backup-space',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkNetworkConnectivity() {\n    try {\n      const endpoints = [\n        { name: 'home-assistant', url: this.config.deployment.homeAssistantConfig.healthCheckEndpoint.replace('/api', '') },\n        { name: 'github', url: 'https://api.github.com' },\n        { name: 'dns', url: 'https://1.1.1.1' }\n      ];\n      \n      const results = await Promise.allSettled(\n        endpoints.map(endpoint => \n          axios.get(endpoint.url, { timeout: 5000 })\n            .then(() => ({ name: endpoint.name, status: 'connected' }))\n            .catch(error => ({ name: endpoint.name, status: 'failed', error: error.message }))\n        )\n      );\n      \n      const connectivity = results.map(result => result.value);\n      const failedConnections = connectivity.filter(c => c.status === 'failed');\n      \n      return {\n        name: 'network-connectivity',\n        status: failedConnections.length === 0 ? 'healthy' : 'unhealthy',\n        error: failedConnections.length > 0 ? `Failed connections: ${failedConnections.map(c => c.name).join(', ')}` : null,\n        details: {\n          connectivity: connectivity,\n          totalEndpoints: endpoints.length,\n          failedEndpoints: failedConnections.length\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'network-connectivity',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkPerformanceMetrics() {\n    try {\n      const endpoint = this.config.deployment.homeAssistantConfig.healthCheckEndpoint;\n      const token = this.config.deployment.homeAssistantConfig.token;\n      \n      const startTime = Date.now();\n      const response = await axios.get(`${endpoint}/states`, {\n        timeout: 5000,\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const responseTime = Date.now() - startTime;\n      \n      const performanceIssues = [];\n      if (responseTime > this.config.thresholds.responseTime) {\n        performanceIssues.push(`Slow API response: ${responseTime}ms`);\n      }\n      \n      return {\n        name: 'performance-metrics',\n        status: performanceIssues.length === 0 ? 'healthy' : 'unhealthy',\n        error: performanceIssues.join(', '),\n        details: {\n          apiResponseTime: responseTime,\n          threshold: this.config.thresholds.responseTime,\n          stateCount: response.data.length\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'performance-metrics',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  async checkLogErrors() {\n    try {\n      // Check Home Assistant logs for recent errors\n      const endpoint = this.config.deployment.homeAssistantConfig.healthCheckEndpoint.replace('/api', '');\n      const token = this.config.deployment.homeAssistantConfig.token;\n      \n      // This would require a custom endpoint or file access to check logs\n      // For now, we'll check if error log endpoints are available\n      \n      return {\n        name: 'log-errors',\n        status: 'healthy',\n        details: {\n          message: 'Log error checking not yet implemented - requires custom endpoint'\n        }\n      };\n      \n    } catch (error) {\n      return {\n        name: 'log-errors',\n        status: 'unhealthy',\n        error: error.message\n      };\n    }\n  }\n\n  // Configuration Validation Methods\n  async validateYAMLSyntax(configFiles) {\n    const errors = [];\n    \n    for (const file of configFiles) {\n      try {\n        const content = await fs.readFile(file.path, 'utf8');\n        yaml.load(content);\n      } catch (error) {\n        errors.push({\n          file: file.path,\n          error: error.message\n        });\n      }\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors: errors\n    };\n  }\n\n  async validateHomeAssistantConfig(configPath) {\n    try {\n      // Use Home Assistant's config check command if available\n      const result = await execAsync(`hass --config ${configPath} --script check_config`, {\n        timeout: 60000\n      });\n      \n      return {\n        valid: result.stderr === '',\n        output: result.stdout,\n        errors: result.stderr ? [result.stderr] : []\n      };\n      \n    } catch (error) {\n      // If hass command is not available, do basic file checks\n      try {\n        const configFile = `${configPath}/configuration.yaml`;\n        const content = await fs.readFile(configFile, 'utf8');\n        yaml.load(content);\n        \n        return {\n          valid: true,\n          output: 'Basic YAML validation passed',\n          errors: []\n        };\n      } catch (fileError) {\n        return {\n          valid: false,\n          errors: [fileError.message]\n        };\n      }\n    }\n  }\n\n  async validateConfigurationReferences(configFiles) {\n    // Validate that references between config files are valid\n    const errors = [];\n    \n    try {\n      // This would implement cross-reference validation\n      // For now, return basic validation\n      return {\n        valid: true,\n        errors: []\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [error.message]\n      };\n    }\n  }\n\n  async validateSecurityCompliance(configFiles) {\n    const issues = [];\n    \n    try {\n      for (const file of configFiles) {\n        const content = await fs.readFile(file.path, 'utf8');\n        \n        // Check for hardcoded passwords/tokens\n        if (content.match(/password:\\s*[^!]/i) || content.match(/token:\\s*[^!]/i)) {\n          issues.push(`Potential hardcoded credentials in ${file.name}`);\n        }\n        \n        // Check for insecure protocols\n        if (content.includes('http://') && !content.includes('localhost')) {\n          issues.push(`Insecure HTTP protocol found in ${file.name}`);\n        }\n      }\n      \n      return {\n        valid: issues.length === 0,\n        issues: issues\n      };\n      \n    } catch (error) {\n      return {\n        valid: false,\n        issues: [error.message]\n      };\n    }\n  }\n\n  // Utility Methods\n  async getConfigurationFiles(configPath) {\n    const files = [];\n    const extensions = ['.yaml', '.yml'];\n    \n    try {\n      const entries = await fs.readdir(configPath, { withFileTypes: true });\n      \n      for (const entry of entries) {\n        if (entry.isFile() && extensions.some(ext => entry.name.endsWith(ext))) {\n          files.push({\n            name: entry.name,\n            path: `${configPath}/${entry.name}`\n          });\n        }\n      }\n    } catch (error) {\n      this.logger.warn(`Could not read config directory: ${error.message}`);\n    }\n    \n    return files;\n  }\n\n  processHealthResults(results, phase) {\n    const checks = results.map(result => result.value);\n    const healthyChecks = checks.filter(check => check.status === 'healthy');\n    const unhealthyChecks = checks.filter(check => check.status === 'unhealthy');\n    \n    return {\n      phase: phase,\n      timestamp: new Date().toISOString(),\n      overall: {\n        healthy: unhealthyChecks.length === 0,\n        totalChecks: checks.length,\n        healthyChecks: healthyChecks.length,\n        unhealthyChecks: unhealthyChecks.length,\n        failureReason: unhealthyChecks.length > 0 ? unhealthyChecks.map(c => c.error).join('; ') : null\n      },\n      checks: checks\n    };\n  }\n\n  async sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // System resource monitoring methods\n  async getDiskUsage() {\n    try {\n      const result = await execAsync('df / | tail -1 | awk \\'{print $5}\\' | sed \\'s/%//\\'');\n      return parseInt(result.stdout.trim());\n    } catch (error) {\n      throw new Error(`Failed to get disk usage: ${error.message}`);\n    }\n  }\n\n  async getMemoryUsage() {\n    try {\n      const result = await execAsync('free | grep Mem | awk \\'{printf \"%.1f\", $3/$2 * 100.0}\\'');\n      return parseFloat(result.stdout.trim());\n    } catch (error) {\n      throw new Error(`Failed to get memory usage: ${error.message}`);\n    }\n  }\n\n  async getCPUUsage() {\n    try {\n      const result = await execAsync('top -bn1 | grep \"Cpu(s)\" | awk \\'{print $2}\\' | sed \\'s/%us,//\\'');\n      return parseFloat(result.stdout.trim());\n    } catch (error) {\n      throw new Error(`Failed to get CPU usage: ${error.message}`);\n    }\n  }\n\n  async getDirectorySize(dirPath) {\n    try {\n      const result = await execAsync(`du -sb ${dirPath} | cut -f1`);\n      return parseInt(result.stdout.trim());\n    } catch (error) {\n      return 0; // Directory might not exist\n    }\n  }\n\n  async getAvailableSpace(dirPath) {\n    try {\n      const result = await execAsync(`df ${dirPath} | tail -1 | awk '{print $4}'`);\n      return parseInt(result.stdout.trim()) * 1024; // Convert from KB to bytes\n    } catch (error) {\n      throw new Error(`Failed to get available space: ${error.message}`);\n    }\n  }\n}\n\nmodule.exports = { HealthChecker };"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC,CAACG,QAAQ;AACjC,MAAM;EAAEC;AAAK,CAAC,GAAGJ,OAAO,CAAC,eAAe,CAAC;AACzC,MAAM;EAAEK;AAAU,CAAC,GAAGL,OAAO,CAAC,MAAM,CAAC;AACrC,MAAMM,SAAS,GAAGD,SAAS,CAACD,IAAI,CAAC;AACjC,MAAM;EAAEG;AAAe,CAAC,GAAGP,OAAO,CAAC,oCAAoC,CAAC;AACxE,MAAM;EAAEQ;AAAO,CAAC,GAAGR,OAAO,CAAC,wBAAwB,CAAC;AAEpD,MAAMS,aAAa,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,MAAM,GAAG,IAAIJ,MAAM,CAAC,eAAe,CAAC;IACzC,IAAI,CAACK,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,eAAe,GAAG,IAAI;EAC7B;EAEA,MAAMC,UAAUA,CAAA,EAAG;IACjB;IACA,MAAM,IAAI,CAACC,iBAAiB,CAAC,CAAC;;IAE9B;IACA,IAAI,CAACH,cAAc,GAAG,IAAIN,cAAc,CAAC,CAAC;IAC1C,MAAM,IAAI,CAACM,cAAc,CAACE,UAAU,CAAC,CAAC;;IAEtC;IACA,MAAM,IAAI,CAACE,mBAAmB,CAAC,CAAC;IAEhC,IAAI,CAACL,MAAM,CAACM,IAAI,CAAC,4BAA4B,CAAC;EAChD;EAEA,MAAMF,iBAAiBA,CAAA,EAAG;IACxB;IACA,IAAI,CAACL,MAAM,GAAG;MACZQ,UAAU,EAAE;QACVC,mBAAmB,EAAE;UACnBC,mBAAmB,EAAEC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,+BAA+B;UACtFC,KAAK,EAAEH,OAAO,CAACC,GAAG,CAACG,oBAAoB,IAAI;QAC7C;MACF,CAAC;MACDC,UAAU,EAAE;QACVC,SAAS,EAAE,EAAE;QACbC,WAAW,EAAE,EAAE;QACfC,QAAQ,EAAE,EAAE;QACZC,YAAY,EAAE;MAChB,CAAC;MACDC,UAAU,EAAE;QACVC,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACX;IACF,CAAC;EACH;EAEA,MAAMjB,mBAAmBA,CAAA,EAAG;IAC1B,IAAI;MACF,MAAMkB,YAAY,GAAG,6CAA6C;MAClE,MAAMC,IAAI,GAAG,MAAMlC,EAAE,CAACmC,QAAQ,CAACF,YAAY,EAAE,MAAM,CAAC;MACpD,IAAI,CAACrB,eAAe,GAAGwB,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;IACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACd,IAAI,CAAC5B,MAAM,CAAC6B,IAAI,CAAC,qDAAqD,CAAC;MACvE,IAAI,CAAC3B,eAAe,GAAG,IAAI;IAC7B;EACF;EAEA,MAAM4B,0BAA0BA,CAAA,EAAG;IACjC,IAAI,CAAC9B,MAAM,CAACM,IAAI,CAAC,uCAAuC,CAAC;IAEzD,MAAMyB,MAAM,GAAG,CACb,IAAI,CAACC,qBAAqB,CAAC,CAAC,EAC5B,IAAI,CAACC,oBAAoB,CAAC,CAAC,EAC3B,IAAI,CAACC,eAAe,CAAC,CAAC,EACtB,IAAI,CAACC,gBAAgB,CAAC,CAAC,EACvB,IAAI,CAACC,wBAAwB,CAAC,CAAC,CAChC;IAED,MAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,UAAU,CAACR,MAAM,CAAC;IAChD,MAAMS,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACJ,OAAO,EAAE,gBAAgB,CAAC;IAEzE,IAAI,CAACG,YAAY,CAACE,OAAO,CAACC,OAAO,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,wCAAwCJ,YAAY,CAACE,OAAO,CAACG,aAAa,EAAE,CAAC;IAC/F;IAEA,IAAI,CAAC7C,MAAM,CAACM,IAAI,CAAC,qCAAqC,CAAC;IACvD,OAAOkC,YAAY;EACrB;EAEA,MAAMM,2BAA2BA,CAAA,EAAG;IAClC,IAAI,CAAC9C,MAAM,CAACM,IAAI,CAAC,wCAAwC,CAAC;;IAE1D;IACA,MAAM,IAAI,CAACyC,KAAK,CAAC,KAAK,CAAC;IAEvB,MAAMhB,MAAM,GAAG,CACb,IAAI,CAACC,qBAAqB,CAAC,CAAC,EAC5B,IAAI,CAACgB,2BAA2B,CAAC,CAAC,EAClC,IAAI,CAACC,wBAAwB,CAAC,CAAC,EAC/B,IAAI,CAACC,uBAAuB,CAAC,CAAC,EAC9B,IAAI,CAACC,cAAc,CAAC,CAAC,CACtB;IAED,MAAMd,OAAO,GAAG,MAAMC,OAAO,CAACC,UAAU,CAACR,MAAM,CAAC;IAChD,MAAMS,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACJ,OAAO,EAAE,iBAAiB,CAAC;IAE1E,IAAI,CAACG,YAAY,CAACE,OAAO,CAACC,OAAO,EAAE;MACjC,MAAM,IAAIC,KAAK,CAAC,yCAAyCJ,YAAY,CAACE,OAAO,CAACG,aAAa,EAAE,CAAC;IAChG;IAEA,IAAI,CAAC7C,MAAM,CAACM,IAAI,CAAC,sCAAsC,CAAC;IACxD,OAAOkC,YAAY;EACrB;EAEA,MAAMY,qBAAqBA,CAACC,UAAU,EAAE;IACtC,IAAI,CAACrD,MAAM,CAACM,IAAI,CAAC,+BAA+B+C,UAAU,EAAE,CAAC;IAE7D,IAAI;MACF;MACA,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAACF,UAAU,CAAC;;MAEhE;MACA,MAAMG,cAAc,GAAG,MAAM,IAAI,CAACC,kBAAkB,CAACH,WAAW,CAAC;;MAEjE;MACA,MAAMI,YAAY,GAAG,MAAM,IAAI,CAACC,2BAA2B,CAACN,UAAU,CAAC;;MAEvE;MACA,MAAMO,mBAAmB,GAAG,MAAM,IAAI,CAACC,+BAA+B,CAACP,WAAW,CAAC;;MAEnF;MACA,MAAMQ,kBAAkB,GAAG,MAAM,IAAI,CAACC,0BAA0B,CAACT,WAAW,CAAC;MAE7E,MAAMU,gBAAgB,GAAG;QACvBC,KAAK,EAAET,cAAc,CAACS,KAAK,IAAIP,YAAY,CAACO,KAAK,IAAIL,mBAAmB,CAACK,KAAK,IAAIH,kBAAkB,CAACG,KAAK;QAC1GC,UAAU,EAAEV,cAAc;QAC1BhD,mBAAmB,EAAEkD,YAAY;QACjCS,UAAU,EAAEP,mBAAmB;QAC/BQ,QAAQ,EAAEN;MACZ,CAAC;MAED,IAAI,CAAC9D,MAAM,CAACM,IAAI,CAAC,oCAAoC,EAAE;QAAE2D,KAAK,EAAED,gBAAgB,CAACC;MAAM,CAAC,CAAC;MACzF,OAAOD,gBAAgB;IAEzB,CAAC,CAAC,OAAOpC,KAAK,EAAE;MACd,IAAI,CAAC5B,MAAM,CAAC4B,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D,OAAO;QACLqC,KAAK,EAAE,KAAK;QACZrC,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMrC,qBAAqBA,CAAA,EAAG;IAC5B,MAAMsC,QAAQ,GAAG,IAAI,CAACvE,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACC,mBAAmB;IAC/E,MAAMI,KAAK,GAAG,IAAI,CAACd,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACK,KAAK;IAE9D,IAAI;MACF,MAAM0D,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5B,MAAMC,QAAQ,GAAG,MAAMvF,KAAK,CAACwF,GAAG,CAAC,GAAGL,QAAQ,SAAS,EAAE;QACrDhD,OAAO,EAAE,IAAI,CAACvB,MAAM,CAACqB,UAAU,CAACE,OAAO;QACvCsD,OAAO,EAAE;UACP,eAAe,EAAE,UAAU/D,KAAK,EAAE;UAClC,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,MAAMM,YAAY,GAAGqD,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAE3C,IAAIG,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAO;UACLC,IAAI,EAAE,oBAAoB;UAC1BD,MAAM,EAAE,SAAS;UACjB1D,YAAY,EAAEA,YAAY;UAC1B4D,OAAO,EAAE;YACPC,UAAU,EAAEN,QAAQ,CAACG,MAAM;YAC3BI,UAAU,EAAEP,QAAQ,CAAClD,IAAI,CAAC0D,MAAM;YAChCC,OAAO,EAAET,QAAQ,CAACE,OAAO,CAAC,cAAc,CAAC,IAAI;UAC/C;QACF,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIhC,KAAK,CAAC,2BAA2B8B,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC/D;IAEF,CAAC,CAAC,OAAOjD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,oBAAoB;QAC1BD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC,OAAO;QACpBU,OAAO,EAAE;UACPT,QAAQ,EAAEA,QAAQ;UAClBhD,OAAO,EAAEM,KAAK,CAACwD,IAAI,KAAK;QAC1B;MACF,CAAC;IACH;EACF;EAEA,MAAMpC,2BAA2BA,CAAA,EAAG;IAClC,IAAI;MACF,MAAMK,UAAU,GAAG,SAAS;MAC5B,MAAMgC,UAAU,GAAG,MAAM,IAAI,CAACjC,qBAAqB,CAACC,UAAU,CAAC;MAE/D,IAAIgC,UAAU,CAACpB,KAAK,EAAE;QACpB,OAAO;UACLa,IAAI,EAAE,yBAAyB;UAC/BD,MAAM,EAAE,SAAS;UACjBE,OAAO,EAAEM;QACX,CAAC;MACH,CAAC,MAAM;QACL,OAAO;UACLP,IAAI,EAAE,yBAAyB;UAC/BD,MAAM,EAAE,WAAW;UACnBjD,KAAK,EAAE,iCAAiC;UACxCmD,OAAO,EAAEM;QACX,CAAC;MACH;IAEF,CAAC,CAAC,OAAOzD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,yBAAyB;QAC/BD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMpB,wBAAwBA,CAAA,EAAG;IAC/B,IAAI;MACF,MAAMqB,QAAQ,GAAG,IAAI,CAACvE,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACC,mBAAmB,CAAC6E,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;MACnG,MAAMzE,KAAK,GAAG,IAAI,CAACd,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACK,KAAK;MAE9D,MAAM6D,QAAQ,GAAG,MAAMvF,KAAK,CAACwF,GAAG,CAAC,GAAGL,QAAQ,aAAa,EAAE;QACzDhD,OAAO,EAAE,IAAI;QACbsD,OAAO,EAAE;UACP,eAAe,EAAE,UAAU/D,KAAK;QAClC;MACF,CAAC,CAAC;MAEF,MAAMd,MAAM,GAAG2E,QAAQ,CAAClD,IAAI;MAE5B,OAAO;QACLsD,IAAI,EAAE,sBAAsB;QAC5BD,MAAM,EAAE,SAAS;QACjBE,OAAO,EAAE;UACPI,OAAO,EAAEpF,MAAM,CAACoF,OAAO;UACvBI,KAAK,EAAExF,MAAM,CAACyF,WAAW;UACzBC,QAAQ,EAAE1F,MAAM,CAAC2F,SAAS;UAC1BC,UAAU,EAAE5F,MAAM,CAAC4F,UAAU,EAAET,MAAM,IAAI;QAC3C;MACF,CAAC;IAEH,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,sBAAsB;QAC5BD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMpC,oBAAoBA,CAAA,EAAG;IAC3B,IAAI;MACF,MAAMjB,SAAS,GAAG,MAAM,IAAI,CAAC4E,YAAY,CAAC,CAAC;MAC3C,MAAM3E,WAAW,GAAG,MAAM,IAAI,CAAC4E,cAAc,CAAC,CAAC;MAC/C,MAAM3E,QAAQ,GAAG,MAAM,IAAI,CAAC4E,WAAW,CAAC,CAAC;MAEzC,MAAM/E,UAAU,GAAG,IAAI,CAAChB,MAAM,CAACgB,UAAU;MAEzC,MAAMgF,MAAM,GAAG,EAAE;MACjB,IAAI/E,SAAS,GAAGD,UAAU,CAACC,SAAS,EAAE+E,MAAM,CAACC,IAAI,CAAC,oBAAoBhF,SAAS,GAAG,CAAC;MACnF,IAAIC,WAAW,GAAGF,UAAU,CAACE,WAAW,EAAE8E,MAAM,CAACC,IAAI,CAAC,sBAAsB/E,WAAW,GAAG,CAAC;MAC3F,IAAIC,QAAQ,GAAGH,UAAU,CAACG,QAAQ,EAAE6E,MAAM,CAACC,IAAI,CAAC,mBAAmB9E,QAAQ,GAAG,CAAC;MAE/E,OAAO;QACL4D,IAAI,EAAE,kBAAkB;QACxBD,MAAM,EAAEkB,MAAM,CAACb,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,WAAW;QACrDtD,KAAK,EAAEmE,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC;QACxBlB,OAAO,EAAE;UACP/D,SAAS,EAAEA,SAAS;UACpBC,WAAW,EAAEA,WAAW;UACxBC,QAAQ,EAAEA,QAAQ;UAClBH,UAAU,EAAEA;QACd;MACF,CAAC;IAEH,CAAC,CAAC,OAAOa,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,kBAAkB;QACxBD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMnC,eAAeA,CAAA,EAAG;IACtB,IAAI;MACF;MACA,MAAMgE,SAAS,GAAG,MAAM,IAAI,CAACjG,cAAc,CAACkG,eAAe,CAAC,CAAC;MAC7D,MAAMC,cAAc,GAAG,EAAE;MACzB,MAAMC,gBAAgB,GAAG,EAAE;MAE3B,KAAK,MAAM,CAACC,UAAU,EAAEzB,MAAM,CAAC,IAAI0B,MAAM,CAACC,OAAO,CAACN,SAAS,CAAC,EAAE;QAC5D,IAAIrB,MAAM,CAACA,MAAM,KAAK,SAAS,EAAE;UAC/BuB,cAAc,CAACJ,IAAI,CAACM,UAAU,CAAC;QACjC,CAAC,MAAM;UACLD,gBAAgB,CAACL,IAAI,CAAC;YACpBS,MAAM,EAAEH,UAAU;YAClB1E,KAAK,EAAEiD,MAAM,CAAC6B,SAAS,IAAI;UAC7B,CAAC,CAAC;QACJ;MACF;MAEA,OAAO;QACL5B,IAAI,EAAE,aAAa;QACnBD,MAAM,EAAEwB,gBAAgB,CAACnB,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,WAAW;QAC/DtD,KAAK,EAAEyE,gBAAgB,CAACnB,MAAM,GAAG,CAAC,GAAG,sBAAsBmB,gBAAgB,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACH,MAAM,CAAC,CAACR,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI;QAClHlB,OAAO,EAAE;UACPqB,cAAc,EAAEA,cAAc;UAC9BC,gBAAgB,EAAEA,gBAAgB;UAClCQ,YAAY,EAAEN,MAAM,CAACO,IAAI,CAACZ,SAAS,CAAC,CAAChB;QACvC;MACF,CAAC;IAEH,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,aAAa;QACnBD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMlC,gBAAgBA,CAAA,EAAG;IACvB,IAAI;MACF,MAAM4E,UAAU,GAAG,SAAS;MAC5B,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACC,gBAAgB,CAACF,UAAU,CAAC;MACrD,MAAMG,SAAS,GAAG,MAAM,IAAI,CAACC,iBAAiB,CAACJ,UAAU,CAAC;;MAE1D;MACA,MAAMK,mBAAmB,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;MAC/C,MAAMC,aAAa,GAAGD,mBAAmB,GAAG,CAAC;MAE7C,OAAO;QACLtC,IAAI,EAAE,cAAc;QACpBD,MAAM,EAAEqC,SAAS,GAAGG,aAAa,GAAG,SAAS,GAAG,WAAW;QAC3DzF,KAAK,EAAEsF,SAAS,IAAIG,aAAa,GAAG,2BAA2B,GAAG,IAAI;QACtEtC,OAAO,EAAE;UACPuC,YAAY,EAAEN,KAAK;UACnBO,cAAc,EAAEL,SAAS;UACzBG,aAAa,EAAEA;QACjB;MACF,CAAC;IAEH,CAAC,CAAC,OAAOzF,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,cAAc;QACpBD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMjC,wBAAwBA,CAAA,EAAG;IAC/B,IAAI;MACF,MAAMoF,SAAS,GAAG,CAChB;QAAE1C,IAAI,EAAE,gBAAgB;QAAE2C,GAAG,EAAE,IAAI,CAAC1H,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACC,mBAAmB,CAAC6E,OAAO,CAAC,MAAM,EAAE,EAAE;MAAE,CAAC,EACnH;QAAER,IAAI,EAAE,QAAQ;QAAE2C,GAAG,EAAE;MAAyB,CAAC,EACjD;QAAE3C,IAAI,EAAE,KAAK;QAAE2C,GAAG,EAAE;MAAkB,CAAC,CACxC;MAED,MAAMpF,OAAO,GAAG,MAAMC,OAAO,CAACC,UAAU,CACtCiF,SAAS,CAACb,GAAG,CAACrC,QAAQ,IACpBnF,KAAK,CAACwF,GAAG,CAACL,QAAQ,CAACmD,GAAG,EAAE;QAAEnG,OAAO,EAAE;MAAK,CAAC,CAAC,CACvCoG,IAAI,CAAC,OAAO;QAAE5C,IAAI,EAAER,QAAQ,CAACQ,IAAI;QAAED,MAAM,EAAE;MAAY,CAAC,CAAC,CAAC,CAC1D8C,KAAK,CAAC/F,KAAK,KAAK;QAAEkD,IAAI,EAAER,QAAQ,CAACQ,IAAI;QAAED,MAAM,EAAE,QAAQ;QAAEjD,KAAK,EAAEA,KAAK,CAACyC;MAAQ,CAAC,CAAC,CACrF,CACF,CAAC;MAED,MAAMuD,YAAY,GAAGvF,OAAO,CAACsE,GAAG,CAACkB,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC;MACxD,MAAMC,iBAAiB,GAAGH,YAAY,CAACI,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACpD,MAAM,KAAK,QAAQ,CAAC;MAEzE,OAAO;QACLC,IAAI,EAAE,sBAAsB;QAC5BD,MAAM,EAAEkD,iBAAiB,CAAC7C,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,WAAW;QAChEtD,KAAK,EAAEmG,iBAAiB,CAAC7C,MAAM,GAAG,CAAC,GAAG,uBAAuB6C,iBAAiB,CAACpB,GAAG,CAACsB,CAAC,IAAIA,CAAC,CAACnD,IAAI,CAAC,CAACmB,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI;QACnHlB,OAAO,EAAE;UACP6C,YAAY,EAAEA,YAAY;UAC1BM,cAAc,EAAEV,SAAS,CAACtC,MAAM;UAChCiD,eAAe,EAAEJ,iBAAiB,CAAC7C;QACrC;MACF,CAAC;IAEH,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,sBAAsB;QAC5BD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMnB,uBAAuBA,CAAA,EAAG;IAC9B,IAAI;MACF,MAAMoB,QAAQ,GAAG,IAAI,CAACvE,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACC,mBAAmB;MAC/E,MAAMI,KAAK,GAAG,IAAI,CAACd,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACK,KAAK;MAE9D,MAAM0D,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAC5B,MAAMC,QAAQ,GAAG,MAAMvF,KAAK,CAACwF,GAAG,CAAC,GAAGL,QAAQ,SAAS,EAAE;QACrDhD,OAAO,EAAE,IAAI;QACbsD,OAAO,EAAE;UACP,eAAe,EAAE,UAAU/D,KAAK;QAClC;MACF,CAAC,CAAC;MACF,MAAMM,YAAY,GAAGqD,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,SAAS;MAE3C,MAAM6D,iBAAiB,GAAG,EAAE;MAC5B,IAAIjH,YAAY,GAAG,IAAI,CAACpB,MAAM,CAACgB,UAAU,CAACI,YAAY,EAAE;QACtDiH,iBAAiB,CAACpC,IAAI,CAAC,sBAAsB7E,YAAY,IAAI,CAAC;MAChE;MAEA,OAAO;QACL2D,IAAI,EAAE,qBAAqB;QAC3BD,MAAM,EAAEuD,iBAAiB,CAAClD,MAAM,KAAK,CAAC,GAAG,SAAS,GAAG,WAAW;QAChEtD,KAAK,EAAEwG,iBAAiB,CAACnC,IAAI,CAAC,IAAI,CAAC;QACnClB,OAAO,EAAE;UACPsD,eAAe,EAAElH,YAAY;UAC7BmH,SAAS,EAAE,IAAI,CAACvI,MAAM,CAACgB,UAAU,CAACI,YAAY;UAC9C8D,UAAU,EAAEP,QAAQ,CAAClD,IAAI,CAAC0D;QAC5B;MACF,CAAC;IAEH,CAAC,CAAC,OAAOtD,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,qBAAqB;QAC3BD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;EAEA,MAAMlB,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF;MACA,MAAMmB,QAAQ,GAAG,IAAI,CAACvE,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACC,mBAAmB,CAAC6E,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;MACnG,MAAMzE,KAAK,GAAG,IAAI,CAACd,MAAM,CAACQ,UAAU,CAACC,mBAAmB,CAACK,KAAK;;MAE9D;MACA;;MAEA,OAAO;QACLiE,IAAI,EAAE,YAAY;QAClBD,MAAM,EAAE,SAAS;QACjBE,OAAO,EAAE;UACPV,OAAO,EAAE;QACX;MACF,CAAC;IAEH,CAAC,CAAC,OAAOzC,KAAK,EAAE;MACd,OAAO;QACLkD,IAAI,EAAE,YAAY;QAClBD,MAAM,EAAE,WAAW;QACnBjD,KAAK,EAAEA,KAAK,CAACyC;MACf,CAAC;IACH;EACF;;EAEA;EACA,MAAMZ,kBAAkBA,CAACH,WAAW,EAAE;IACpC,MAAMiF,MAAM,GAAG,EAAE;IAEjB,KAAK,MAAMC,IAAI,IAAIlF,WAAW,EAAE;MAC9B,IAAI;QACF,MAAMmF,OAAO,GAAG,MAAMnJ,EAAE,CAACmC,QAAQ,CAAC+G,IAAI,CAACE,IAAI,EAAE,MAAM,CAAC;QACpDrJ,IAAI,CAACsJ,IAAI,CAACF,OAAO,CAAC;MACpB,CAAC,CAAC,OAAO7G,KAAK,EAAE;QACd2G,MAAM,CAACvC,IAAI,CAAC;UACVwC,IAAI,EAAEA,IAAI,CAACE,IAAI;UACf9G,KAAK,EAAEA,KAAK,CAACyC;QACf,CAAC,CAAC;MACJ;IACF;IAEA,OAAO;MACLJ,KAAK,EAAEsE,MAAM,CAACrD,MAAM,KAAK,CAAC;MAC1BqD,MAAM,EAAEA;IACV,CAAC;EACH;EAEA,MAAM5E,2BAA2BA,CAACN,UAAU,EAAE;IAC5C,IAAI;MACF;MACA,MAAMwE,MAAM,GAAG,MAAMnI,SAAS,CAAC,iBAAiB2D,UAAU,wBAAwB,EAAE;QAClF/B,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,OAAO;QACL2C,KAAK,EAAE4D,MAAM,CAACe,MAAM,KAAK,EAAE;QAC3BC,MAAM,EAAEhB,MAAM,CAACiB,MAAM;QACrBP,MAAM,EAAEV,MAAM,CAACe,MAAM,GAAG,CAACf,MAAM,CAACe,MAAM,CAAC,GAAG;MAC5C,CAAC;IAEH,CAAC,CAAC,OAAOhH,KAAK,EAAE;MACd;MACA,IAAI;QACF,MAAMmH,UAAU,GAAG,GAAG1F,UAAU,qBAAqB;QACrD,MAAMoF,OAAO,GAAG,MAAMnJ,EAAE,CAACmC,QAAQ,CAACsH,UAAU,EAAE,MAAM,CAAC;QACrD1J,IAAI,CAACsJ,IAAI,CAACF,OAAO,CAAC;QAElB,OAAO;UACLxE,KAAK,EAAE,IAAI;UACX4E,MAAM,EAAE,8BAA8B;UACtCN,MAAM,EAAE;QACV,CAAC;MACH,CAAC,CAAC,OAAOS,SAAS,EAAE;QAClB,OAAO;UACL/E,KAAK,EAAE,KAAK;UACZsE,MAAM,EAAE,CAACS,SAAS,CAAC3E,OAAO;QAC5B,CAAC;MACH;IACF;EACF;EAEA,MAAMR,+BAA+BA,CAACP,WAAW,EAAE;IACjD;IACA,MAAMiF,MAAM,GAAG,EAAE;IAEjB,IAAI;MACF;MACA;MACA,OAAO;QACLtE,KAAK,EAAE,IAAI;QACXsE,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC,OAAO3G,KAAK,EAAE;MACd,OAAO;QACLqC,KAAK,EAAE,KAAK;QACZsE,MAAM,EAAE,CAAC3G,KAAK,CAACyC,OAAO;MACxB,CAAC;IACH;EACF;EAEA,MAAMN,0BAA0BA,CAACT,WAAW,EAAE;IAC5C,MAAMyC,MAAM,GAAG,EAAE;IAEjB,IAAI;MACF,KAAK,MAAMyC,IAAI,IAAIlF,WAAW,EAAE;QAC9B,MAAMmF,OAAO,GAAG,MAAMnJ,EAAE,CAACmC,QAAQ,CAAC+G,IAAI,CAACE,IAAI,EAAE,MAAM,CAAC;;QAEpD;QACA,IAAID,OAAO,CAACQ,KAAK,CAAC,mBAAmB,CAAC,IAAIR,OAAO,CAACQ,KAAK,CAAC,gBAAgB,CAAC,EAAE;UACzElD,MAAM,CAACC,IAAI,CAAC,sCAAsCwC,IAAI,CAAC1D,IAAI,EAAE,CAAC;QAChE;;QAEA;QACA,IAAI2D,OAAO,CAACS,QAAQ,CAAC,SAAS,CAAC,IAAI,CAACT,OAAO,CAACS,QAAQ,CAAC,WAAW,CAAC,EAAE;UACjEnD,MAAM,CAACC,IAAI,CAAC,mCAAmCwC,IAAI,CAAC1D,IAAI,EAAE,CAAC;QAC7D;MACF;MAEA,OAAO;QACLb,KAAK,EAAE8B,MAAM,CAACb,MAAM,KAAK,CAAC;QAC1Ba,MAAM,EAAEA;MACV,CAAC;IAEH,CAAC,CAAC,OAAOnE,KAAK,EAAE;MACd,OAAO;QACLqC,KAAK,EAAE,KAAK;QACZ8B,MAAM,EAAE,CAACnE,KAAK,CAACyC,OAAO;MACxB,CAAC;IACH;EACF;;EAEA;EACA,MAAMd,qBAAqBA,CAACF,UAAU,EAAE;IACtC,MAAM8F,KAAK,GAAG,EAAE;IAChB,MAAMC,UAAU,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC;IAEpC,IAAI;MACF,MAAM5C,OAAO,GAAG,MAAMlH,EAAE,CAAC+J,OAAO,CAAChG,UAAU,EAAE;QAAEiG,aAAa,EAAE;MAAK,CAAC,CAAC;MAErE,KAAK,MAAMC,KAAK,IAAI/C,OAAO,EAAE;QAC3B,IAAI+C,KAAK,CAACC,MAAM,CAAC,CAAC,IAAIJ,UAAU,CAACK,IAAI,CAACC,GAAG,IAAIH,KAAK,CAACzE,IAAI,CAAC6E,QAAQ,CAACD,GAAG,CAAC,CAAC,EAAE;UACtEP,KAAK,CAACnD,IAAI,CAAC;YACTlB,IAAI,EAAEyE,KAAK,CAACzE,IAAI;YAChB4D,IAAI,EAAE,GAAGrF,UAAU,IAAIkG,KAAK,CAACzE,IAAI;UACnC,CAAC,CAAC;QACJ;MACF;IACF,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACd,IAAI,CAAC5B,MAAM,CAAC6B,IAAI,CAAC,oCAAoCD,KAAK,CAACyC,OAAO,EAAE,CAAC;IACvE;IAEA,OAAO8E,KAAK;EACd;EAEA1G,oBAAoBA,CAACJ,OAAO,EAAEuH,KAAK,EAAE;IACnC,MAAM7H,MAAM,GAAGM,OAAO,CAACsE,GAAG,CAACkB,MAAM,IAAIA,MAAM,CAACC,KAAK,CAAC;IAClD,MAAM+B,aAAa,GAAG9H,MAAM,CAACiG,MAAM,CAAC8B,KAAK,IAAIA,KAAK,CAACjF,MAAM,KAAK,SAAS,CAAC;IACxE,MAAMkF,eAAe,GAAGhI,MAAM,CAACiG,MAAM,CAAC8B,KAAK,IAAIA,KAAK,CAACjF,MAAM,KAAK,WAAW,CAAC;IAE5E,OAAO;MACL+E,KAAK,EAAEA,KAAK;MACZI,SAAS,EAAE,IAAIxF,IAAI,CAAC,CAAC,CAACyF,WAAW,CAAC,CAAC;MACnCvH,OAAO,EAAE;QACPC,OAAO,EAAEoH,eAAe,CAAC7E,MAAM,KAAK,CAAC;QACrCgF,WAAW,EAAEnI,MAAM,CAACmD,MAAM;QAC1B2E,aAAa,EAAEA,aAAa,CAAC3E,MAAM;QACnC6E,eAAe,EAAEA,eAAe,CAAC7E,MAAM;QACvCrC,aAAa,EAAEkH,eAAe,CAAC7E,MAAM,GAAG,CAAC,GAAG6E,eAAe,CAACpD,GAAG,CAACsB,CAAC,IAAIA,CAAC,CAACrG,KAAK,CAAC,CAACqE,IAAI,CAAC,IAAI,CAAC,GAAG;MAC7F,CAAC;MACDlE,MAAM,EAAEA;IACV,CAAC;EACH;EAEA,MAAMgB,KAAKA,CAACoH,EAAE,EAAE;IACd,OAAO,IAAI7H,OAAO,CAAC8H,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAED,EAAE,CAAC,CAAC;EACxD;;EAEA;EACA,MAAMvE,YAAYA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMiC,MAAM,GAAG,MAAMnI,SAAS,CAAC,qDAAqD,CAAC;MACrF,OAAO4K,QAAQ,CAACzC,MAAM,CAACiB,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,OAAO3I,KAAK,EAAE;MACd,MAAM,IAAIgB,KAAK,CAAC,6BAA6BhB,KAAK,CAACyC,OAAO,EAAE,CAAC;IAC/D;EACF;EAEA,MAAMwB,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMgC,MAAM,GAAG,MAAMnI,SAAS,CAAC,0DAA0D,CAAC;MAC1F,OAAO8K,UAAU,CAAC3C,MAAM,CAACiB,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,OAAO3I,KAAK,EAAE;MACd,MAAM,IAAIgB,KAAK,CAAC,+BAA+BhB,KAAK,CAACyC,OAAO,EAAE,CAAC;IACjE;EACF;EAEA,MAAMyB,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAM+B,MAAM,GAAG,MAAMnI,SAAS,CAAC,kEAAkE,CAAC;MAClG,OAAO8K,UAAU,CAAC3C,MAAM,CAACiB,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,OAAO3I,KAAK,EAAE;MACd,MAAM,IAAIgB,KAAK,CAAC,4BAA4BhB,KAAK,CAACyC,OAAO,EAAE,CAAC;IAC9D;EACF;EAEA,MAAM4C,gBAAgBA,CAACwD,OAAO,EAAE;IAC9B,IAAI;MACF,MAAM5C,MAAM,GAAG,MAAMnI,SAAS,CAAC,UAAU+K,OAAO,YAAY,CAAC;MAC7D,OAAOH,QAAQ,CAACzC,MAAM,CAACiB,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,OAAO3I,KAAK,EAAE;MACd,OAAO,CAAC,CAAC,CAAC;IACZ;EACF;EAEA,MAAMuF,iBAAiBA,CAACsD,OAAO,EAAE;IAC/B,IAAI;MACF,MAAM5C,MAAM,GAAG,MAAMnI,SAAS,CAAC,MAAM+K,OAAO,+BAA+B,CAAC;MAC5E,OAAOH,QAAQ,CAACzC,MAAM,CAACiB,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,OAAO3I,KAAK,EAAE;MACd,MAAM,IAAIgB,KAAK,CAAC,kCAAkChB,KAAK,CAACyC,OAAO,EAAE,CAAC;IACpE;EACF;AACF;AAEAqG,MAAM,CAACC,OAAO,GAAG;EAAE9K;AAAc,CAAC","ignoreList":[]}