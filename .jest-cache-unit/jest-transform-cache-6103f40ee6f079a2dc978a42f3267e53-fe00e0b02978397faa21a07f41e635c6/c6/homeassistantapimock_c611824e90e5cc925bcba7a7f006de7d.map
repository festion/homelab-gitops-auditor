{"version":3,"names":["MockHomeAssistantAPI","constructor","checkHealth","jest","fn","validateConfig","getSystemInfo","listEntities","getEntity","callService","getEvents","getStates","restartCore","reloadConfig","_systemInfo","version","installation_type","timezone","_entities","Map","_isHealthy","mockHealthyResponse","mockResolvedValue","status","uptime","lastRestart","Date","now","toISOString","api","reachable","responseTime","authenticated","supervisor","healthy","addons","running","total","core","state","safe_mode","mockUnreachableResponse","mockRejectedValue","Error","mockConfigurationError","configurationErrors","error","mockValidConfigValidation","valid","errors","warnings","result","processing_time","mockInvalidConfigValidation","type","message","file","line","column","mockEntityList","entities","entity_id","attributes","friendly_name","brightness","unit_of_measurement","device_class","forEach","entity","set","mockEntityGet","entityId","mockImplementation","id","get","Promise","resolve","reject","mockServiceCallSuccess","success","service_called","context","user_id","mockServiceCallFailure","mockRestartSuccess","mockConfigReloadSuccess","reloaded_configs","mockConfigReloadFailure","mockSlowResponse","delay","setTimeout","mockAuthenticationFailure","isHealthy","setSystemInfo","info","addEntity","reset","clearAllMocks","clear","module","exports"],"sources":["home-assistant-api.mock.js"],"sourcesContent":["/**\n * Mock implementation for Home Assistant API\n * Used to isolate health checking and deployment validation\n */\nclass MockHomeAssistantAPI {\n  constructor() {\n    this.checkHealth = jest.fn();\n    this.validateConfig = jest.fn();\n    this.getSystemInfo = jest.fn();\n    this.listEntities = jest.fn();\n    this.getEntity = jest.fn();\n    this.callService = jest.fn();\n    this.getEvents = jest.fn();\n    this.getStates = jest.fn();\n    this.restartCore = jest.fn();\n    this.reloadConfig = jest.fn();\n    \n    // Mock state\n    this._systemInfo = {\n      version: '2025.7.0',\n      installation_type: 'Home Assistant Supervised',\n      timezone: 'America/New_York'\n    };\n    this._entities = new Map();\n    this._isHealthy = true;\n  }\n\n  // Mock healthy API response\n  mockHealthyResponse() {\n    this.checkHealth.mockResolvedValue({\n      status: 'healthy',\n      version: '2025.7.0',\n      uptime: 86400,\n      lastRestart: new Date(Date.now() - 86400000).toISOString(),\n      api: {\n        reachable: true,\n        responseTime: 45,\n        authenticated: true\n      },\n      supervisor: {\n        version: '2025.07.0',\n        healthy: true,\n        addons: {\n          running: 12,\n          total: 12\n        }\n      },\n      core: {\n        state: 'RUNNING',\n        safe_mode: false\n      }\n    });\n\n    this.getSystemInfo.mockResolvedValue(this._systemInfo);\n    this._isHealthy = true;\n  }\n\n  // Mock unreachable API\n  mockUnreachableResponse() {\n    this.checkHealth.mockRejectedValue(\n      new Error('Home Assistant API unreachable: ECONNREFUSED')\n    );\n    this._isHealthy = false;\n  }\n\n  // Mock configuration error response\n  mockConfigurationError() {\n    this.checkHealth.mockResolvedValue({\n      status: 'unhealthy',\n      version: '2025.7.0',\n      api: {\n        reachable: true,\n        responseTime: 156,\n        authenticated: true\n      },\n      configurationErrors: [\n        'Invalid YAML in configuration.yaml at line 42',\n        'Integration \"invalid_sensor\" not found',\n        'Duplicate entity_id: sensor.temperature'\n      ],\n      supervisor: {\n        version: '2025.07.0',\n        healthy: false,\n        error: 'Configuration check failed'\n      },\n      core: {\n        state: 'NOT_RUNNING',\n        safe_mode: true\n      }\n    });\n    this._isHealthy = false;\n  }\n\n  // Mock successful configuration validation\n  mockValidConfigValidation() {\n    this.validateConfig.mockResolvedValue({\n      valid: true,\n      errors: [],\n      warnings: [],\n      result: 'Configuration check successful',\n      processing_time: 2.45\n    });\n  }\n\n  // Mock configuration validation with errors\n  mockInvalidConfigValidation() {\n    this.validateConfig.mockResolvedValue({\n      valid: false,\n      errors: [\n        {\n          type: 'yaml_error',\n          message: 'Invalid YAML syntax',\n          file: 'configuration.yaml',\n          line: 42,\n          column: 15\n        },\n        {\n          type: 'integration_error',\n          message: 'Component not found: invalid_component',\n          file: 'configuration.yaml',\n          line: 156\n        }\n      ],\n      warnings: [\n        {\n          type: 'deprecation',\n          message: 'sensor.template is deprecated, use template sensor instead',\n          file: 'sensors.yaml',\n          line: 25\n        }\n      ],\n      result: 'Configuration check failed',\n      processing_time: 1.82\n    });\n  }\n\n  // Mock entity listing\n  mockEntityList() {\n    const entities = [\n      {\n        entity_id: 'light.living_room',\n        state: 'on',\n        attributes: {\n          friendly_name: 'Living Room Light',\n          brightness: 255\n        }\n      },\n      {\n        entity_id: 'sensor.temperature',\n        state: '22.5',\n        attributes: {\n          friendly_name: 'Temperature',\n          unit_of_measurement: 'Â°C'\n        }\n      },\n      {\n        entity_id: 'binary_sensor.door',\n        state: 'off',\n        attributes: {\n          friendly_name: 'Front Door',\n          device_class: 'door'\n        }\n      }\n    ];\n\n    this.listEntities.mockResolvedValue(entities);\n    \n    entities.forEach(entity => {\n      this._entities.set(entity.entity_id, entity);\n    });\n  }\n\n  // Mock specific entity retrieval\n  mockEntityGet(entityId) {\n    this.getEntity.mockImplementation((id) => {\n      const entity = this._entities.get(id);\n      if (entity) {\n        return Promise.resolve(entity);\n      }\n      return Promise.reject(new Error(`Entity ${id} not found`));\n    });\n  }\n\n  // Mock service calls\n  mockServiceCallSuccess() {\n    this.callService.mockResolvedValue({\n      success: true,\n      service_called: true,\n      context: {\n        id: 'mock-context-id',\n        user_id: null\n      }\n    });\n  }\n\n  // Mock service call failure\n  mockServiceCallFailure() {\n    this.callService.mockRejectedValue(\n      new Error('Service call failed: Entity not available')\n    );\n  }\n\n  // Mock system restart\n  mockRestartSuccess() {\n    this.restartCore.mockResolvedValue({\n      success: true,\n      message: 'Home Assistant restart initiated'\n    });\n  }\n\n  // Mock config reload\n  mockConfigReloadSuccess() {\n    this.reloadConfig.mockResolvedValue({\n      success: true,\n      reloaded_configs: [\n        'automation',\n        'script', \n        'scene',\n        'group'\n      ]\n    });\n  }\n\n  // Mock config reload failure\n  mockConfigReloadFailure() {\n    this.reloadConfig.mockRejectedValue(\n      new Error('Configuration reload failed: YAML syntax error')\n    );\n  }\n\n  // Mock slow response for timeout testing\n  mockSlowResponse(delay = 30000) {\n    this.checkHealth.mockImplementation(() => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          resolve({\n            status: 'healthy',\n            version: '2025.7.0',\n            responseTime: delay\n          });\n        }, delay);\n      });\n    });\n  }\n\n  // Mock authentication failure\n  mockAuthenticationFailure() {\n    this.checkHealth.mockRejectedValue(\n      new Error('Authentication failed: Invalid access token')\n    );\n  }\n\n  // Utility methods\n  isHealthy() {\n    return this._isHealthy;\n  }\n\n  setSystemInfo(info) {\n    this._systemInfo = { ...this._systemInfo, ...info };\n  }\n\n  addEntity(entityId, state, attributes = {}) {\n    this._entities.set(entityId, {\n      entity_id: entityId,\n      state,\n      attributes\n    });\n  }\n\n  // Reset all mocks and state\n  reset() {\n    jest.clearAllMocks();\n    this._entities.clear();\n    this._isHealthy = true;\n    this._systemInfo = {\n      version: '2025.7.0',\n      installation_type: 'Home Assistant Supervised',\n      timezone: 'America/New_York'\n    };\n  }\n}\n\nmodule.exports = { MockHomeAssistantAPI };"],"mappings":"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","ignoreList":[]}