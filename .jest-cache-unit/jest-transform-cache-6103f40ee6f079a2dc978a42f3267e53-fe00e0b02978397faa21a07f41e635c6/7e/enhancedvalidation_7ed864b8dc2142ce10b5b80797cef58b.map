{"version":3,"names":["cov_j4x5yh1f4","actualCoverage","validator","s","require","xss","path","auditLogger","EnhancedValidationMiddleware","constructor","f","xssOptions","whiteList","p","br","strong","em","u","code","pre","span","div","stripIgnoreTag","stripIgnoreTagBody","allowCommentTag","sqlInjectionPatterns","commandInjectionPatterns","pathTraversalPatterns","allowedFileTypes","maxFileSize","validateInput","options","b","req","res","next","validationResult","isValid","errors","sanitized","body","Object","keys","length","bodyValidation","validateObject","bodyRules","push","query","queryValidation","queryRules","params","paramsValidation","paramRules","log","ip","userAgent","get","endpoint","method","originalData","status","json","error","message","showDetails","obj","rules","result","key","value","entries","rule","type","required","fieldValidation","validateField","fieldName","undefined","stringValidation","validateString","numberValidation","validateNumber","emailValidation","validateEmail","urlValidation","validateUrl","pathValidation","validatePath","arrayValidation","validateArray","sanitizeObject","sanitizeString","minLength","maxLength","pattern","test","containsSqlInjection","containsCommandInjection","containsPathTraversal","numValue","Number","isNaN","min","max","integer","isInteger","isEmail","normalizeEmail","isURL","sanitizedUrl","replace","normalizedPath","normalize","basePath","startsWith","Array","isArray","minItems","maxItems","itemRule","sanitizedArray","i","itemValidation","Promise","all","map","item","some","trim","validateFileUpload","file","files","values","flat","size","maxSize","reason","filename","originalname","fileExt","extname","toLowerCase","allowedTypes","includes","extension","join","sanitizeFilename","ext","name","basename","substring","module","exports"],"sources":["enhanced-validation.js"],"sourcesContent":["const validator = require('validator');\nconst xss = require('xss');\nconst path = require('path');\nconst { auditLogger } = require('../utils/auditLogger');\n\nclass EnhancedValidationMiddleware {\n  constructor() {\n    // XSS filter configuration\n    this.xssOptions = {\n      whiteList: {\n        // Allow only safe HTML tags and attributes\n        p: [],\n        br: [],\n        strong: [],\n        em: [],\n        u: [],\n        code: [],\n        pre: [],\n        span: ['class'],\n        div: ['class']\n      },\n      stripIgnoreTag: true,\n      stripIgnoreTagBody: ['script', 'style'],\n      allowCommentTag: false\n    };\n\n    // SQL injection patterns\n    this.sqlInjectionPatterns = [\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE|UNION|SCRIPT)\\b)/gi,\n      /(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)/gi,\n      /('|\\'|;|\\||<|>)/gi,\n      /(\\/\\*.*?\\*\\/)/gi,\n      /(-{2,})/gi\n    ];\n\n    // Command injection patterns\n    this.commandInjectionPatterns = [\n      /[;&|`$(){}[\\]]/g,\n      /\\b(cat|ls|ps|pwd|id|whoami|uname|netstat|ping|wget|curl|nc|ncat|telnet|ssh|scp|rsync)\\b/gi,\n      /\\|\\s*(cat|ls|ps|pwd|id|whoami|uname|netstat|ping|wget|curl|nc|ncat|telnet|ssh|scp|rsync)/gi\n    ];\n\n    // Path traversal patterns\n    this.pathTraversalPatterns = [\n      /\\.\\.\\//g,\n      /\\.\\.\\\\/g,\n      /%2e%2e%2f/gi,\n      /%2e%2e%5c/gi,\n      /\\.\\.%2f/gi,\n      /\\.\\.%5c/gi\n    ];\n\n    // File upload restrictions\n    this.allowedFileTypes = [\n      '.txt', '.json', '.yaml', '.yml', '.md', '.log',\n      '.jpg', '.jpeg', '.png', '.gif', '.svg',\n      '.pdf', '.doc', '.docx', '.xls', '.xlsx'\n    ];\n\n    this.maxFileSize = 10 * 1024 * 1024; // 10MB\n  }\n\n  // Main validation middleware\n  validateInput = (options = {}) => {\n    return async (req, res, next) => {\n      try {\n        const validationResult = {\n          isValid: true,\n          errors: [],\n          sanitized: {}\n        };\n\n        // Validate and sanitize request body\n        if (req.body && Object.keys(req.body).length > 0) {\n          const bodyValidation = await this.validateObject(req.body, options.bodyRules || {});\n          if (!bodyValidation.isValid) {\n            validationResult.isValid = false;\n            validationResult.errors.push(...bodyValidation.errors);\n          }\n          validationResult.sanitized.body = bodyValidation.sanitized;\n        }\n\n        // Validate and sanitize query parameters\n        if (req.query && Object.keys(req.query).length > 0) {\n          const queryValidation = await this.validateObject(req.query, options.queryRules || {});\n          if (!queryValidation.isValid) {\n            validationResult.isValid = false;\n            validationResult.errors.push(...queryValidation.errors);\n          }\n          validationResult.sanitized.query = queryValidation.sanitized;\n        }\n\n        // Validate and sanitize path parameters\n        if (req.params && Object.keys(req.params).length > 0) {\n          const paramsValidation = await this.validateObject(req.params, options.paramRules || {});\n          if (!paramsValidation.isValid) {\n            validationResult.isValid = false;\n            validationResult.errors.push(...paramsValidation.errors);\n          }\n          validationResult.sanitized.params = paramsValidation.sanitized;\n        }\n\n        // Log security violations\n        if (!validationResult.isValid) {\n          await auditLogger.log('validation_failed', {\n            ip: req.ip,\n            userAgent: req.get('User-Agent'),\n            endpoint: req.path,\n            method: req.method,\n            errors: validationResult.errors,\n            originalData: {\n              body: req.body,\n              query: req.query,\n              params: req.params\n            }\n          });\n\n          return res.status(400).json({\n            error: 'Validation failed',\n            message: 'Invalid or malicious input detected',\n            errors: options.showDetails ? validationResult.errors : ['Invalid input detected']\n          });\n        }\n\n        // Replace original data with sanitized versions\n        if (validationResult.sanitized.body) {\n          req.body = validationResult.sanitized.body;\n        }\n        if (validationResult.sanitized.query) {\n          req.query = validationResult.sanitized.query;\n        }\n        if (validationResult.sanitized.params) {\n          req.params = validationResult.sanitized.params;\n        }\n\n        next();\n      } catch (error) {\n        await auditLogger.log('validation_error', {\n          ip: req.ip,\n          endpoint: req.path,\n          error: error.message\n        });\n\n        return res.status(500).json({\n          error: 'Validation error',\n          message: 'Internal validation error occurred'\n        });\n      }\n    };\n  };\n\n  // Validate object against rules\n  async validateObject(obj, rules) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: {}\n    };\n\n    for (const [key, value] of Object.entries(obj)) {\n      const rule = rules[key] || { type: 'string', required: false };\n      const fieldValidation = await this.validateField(key, value, rule);\n\n      if (!fieldValidation.isValid) {\n        result.isValid = false;\n        result.errors.push(...fieldValidation.errors);\n      }\n\n      result.sanitized[key] = fieldValidation.sanitized;\n    }\n\n    return result;\n  }\n\n  // Validate individual field\n  async validateField(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    // Check if field is required\n    if (rule.required && (value === undefined || value === null || value === '')) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} is required`);\n      return result;\n    }\n\n    // Skip validation if value is empty and not required\n    if (!rule.required && (value === undefined || value === null || value === '')) {\n      result.sanitized = value;\n      return result;\n    }\n\n    // Type validation and sanitization\n    switch (rule.type) {\n      case 'string':\n        const stringValidation = await this.validateString(fieldName, value, rule);\n        result.isValid = stringValidation.isValid;\n        result.errors = stringValidation.errors;\n        result.sanitized = stringValidation.sanitized;\n        break;\n\n      case 'number':\n        const numberValidation = this.validateNumber(fieldName, value, rule);\n        result.isValid = numberValidation.isValid;\n        result.errors = numberValidation.errors;\n        result.sanitized = numberValidation.sanitized;\n        break;\n\n      case 'email':\n        const emailValidation = this.validateEmail(fieldName, value, rule);\n        result.isValid = emailValidation.isValid;\n        result.errors = emailValidation.errors;\n        result.sanitized = emailValidation.sanitized;\n        break;\n\n      case 'url':\n        const urlValidation = this.validateUrl(fieldName, value, rule);\n        result.isValid = urlValidation.isValid;\n        result.errors = urlValidation.errors;\n        result.sanitized = urlValidation.sanitized;\n        break;\n\n      case 'path':\n        const pathValidation = await this.validatePath(fieldName, value, rule);\n        result.isValid = pathValidation.isValid;\n        result.errors = pathValidation.errors;\n        result.sanitized = pathValidation.sanitized;\n        break;\n\n      case 'array':\n        const arrayValidation = await this.validateArray(fieldName, value, rule);\n        result.isValid = arrayValidation.isValid;\n        result.errors = arrayValidation.errors;\n        result.sanitized = arrayValidation.sanitized;\n        break;\n\n      case 'object':\n        if (typeof value === 'object' && value !== null) {\n          result.sanitized = await this.sanitizeObject(value);\n        } else {\n          result.isValid = false;\n          result.errors.push(`${fieldName} must be an object`);\n        }\n        break;\n\n      default:\n        result.sanitized = await this.sanitizeString(value);\n    }\n\n    return result;\n  }\n\n  // String validation and sanitization\n  async validateString(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    if (typeof value !== 'string') {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be a string`);\n      return result;\n    }\n\n    // Length validation\n    if (rule.minLength && value.length < rule.minLength) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be at least ${rule.minLength} characters long`);\n    }\n\n    if (rule.maxLength && value.length > rule.maxLength) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be no more than ${rule.maxLength} characters long`);\n    }\n\n    // Pattern validation\n    if (rule.pattern && !rule.pattern.test(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} format is invalid`);\n    }\n\n    // Security validations\n    if (await this.containsSqlInjection(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} contains potentially malicious SQL patterns`);\n    }\n\n    if (await this.containsCommandInjection(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} contains potentially malicious command patterns`);\n    }\n\n    if (await this.containsPathTraversal(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} contains path traversal patterns`);\n    }\n\n    // Sanitize the string\n    result.sanitized = await this.sanitizeString(value);\n\n    return result;\n  }\n\n  // Number validation\n  validateNumber(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    const numValue = Number(value);\n\n    if (isNaN(numValue)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be a valid number`);\n      return result;\n    }\n\n    if (rule.min !== undefined && numValue < rule.min) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be at least ${rule.min}`);\n    }\n\n    if (rule.max !== undefined && numValue > rule.max) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be no more than ${rule.max}`);\n    }\n\n    if (rule.integer && !Number.isInteger(numValue)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be an integer`);\n    }\n\n    result.sanitized = numValue;\n    return result;\n  }\n\n  // Email validation\n  validateEmail(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    if (typeof value !== 'string' || !validator.isEmail(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be a valid email address`);\n      return result;\n    }\n\n    result.sanitized = validator.normalizeEmail(value) || value;\n    return result;\n  }\n\n  // URL validation\n  validateUrl(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    if (typeof value !== 'string' || !validator.isURL(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be a valid URL`);\n      return result;\n    }\n\n    // Additional security check for malicious URLs\n    const sanitizedUrl = value.replace(/[<>\"']/g, '');\n    result.sanitized = sanitizedUrl;\n\n    return result;\n  }\n\n  // Path validation\n  async validatePath(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    if (typeof value !== 'string') {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be a string`);\n      return result;\n    }\n\n    // Check for path traversal\n    if (await this.containsPathTraversal(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} contains invalid path characters`);\n      return result;\n    }\n\n    // Normalize and validate path\n    try {\n      const normalizedPath = path.normalize(value);\n      \n      // Ensure path doesn't escape intended directory\n      if (rule.basePath && !normalizedPath.startsWith(rule.basePath)) {\n        result.isValid = false;\n        result.errors.push(`${fieldName} must be within allowed directory`);\n        return result;\n      }\n\n      result.sanitized = normalizedPath;\n    } catch (error) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} is not a valid path`);\n    }\n\n    return result;\n  }\n\n  // Array validation\n  async validateArray(fieldName, value, rule) {\n    const result = {\n      isValid: true,\n      errors: [],\n      sanitized: value\n    };\n\n    if (!Array.isArray(value)) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must be an array`);\n      return result;\n    }\n\n    if (rule.minItems && value.length < rule.minItems) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must have at least ${rule.minItems} items`);\n    }\n\n    if (rule.maxItems && value.length > rule.maxItems) {\n      result.isValid = false;\n      result.errors.push(`${fieldName} must have no more than ${rule.maxItems} items`);\n    }\n\n    // Validate each item if itemRule is specified\n    if (rule.itemRule) {\n      const sanitizedArray = [];\n      for (let i = 0; i < value.length; i++) {\n        const itemValidation = await this.validateField(`${fieldName}[${i}]`, value[i], rule.itemRule);\n        if (!itemValidation.isValid) {\n          result.isValid = false;\n          result.errors.push(...itemValidation.errors);\n        }\n        sanitizedArray.push(itemValidation.sanitized);\n      }\n      result.sanitized = sanitizedArray;\n    } else {\n      // Just sanitize strings in the array\n      result.sanitized = await Promise.all(\n        value.map(item => typeof item === 'string' ? this.sanitizeString(item) : item)\n      );\n    }\n\n    return result;\n  }\n\n  // Security check methods\n  async containsSqlInjection(value) {\n    if (typeof value !== 'string') return false;\n    \n    return this.sqlInjectionPatterns.some(pattern => pattern.test(value));\n  }\n\n  async containsCommandInjection(value) {\n    if (typeof value !== 'string') return false;\n    \n    return this.commandInjectionPatterns.some(pattern => pattern.test(value));\n  }\n\n  async containsPathTraversal(value) {\n    if (typeof value !== 'string') return false;\n    \n    return this.pathTraversalPatterns.some(pattern => pattern.test(value));\n  }\n\n  // Sanitization methods\n  async sanitizeString(value) {\n    if (typeof value !== 'string') return value;\n    \n    // Remove XSS threats\n    let sanitized = xss(value, this.xssOptions);\n    \n    // Trim whitespace\n    sanitized = sanitized.trim();\n    \n    // Remove null bytes\n    sanitized = sanitized.replace(/\\0/g, '');\n    \n    return sanitized;\n  }\n\n  async sanitizeObject(obj) {\n    const sanitized = {};\n    \n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === 'string') {\n        sanitized[key] = await this.sanitizeString(value);\n      } else if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        sanitized[key] = await this.sanitizeObject(value);\n      } else if (Array.isArray(value)) {\n        sanitized[key] = await Promise.all(\n          value.map(item => typeof item === 'string' ? this.sanitizeString(item) : item)\n        );\n      } else {\n        sanitized[key] = value;\n      }\n    }\n    \n    return sanitized;\n  }\n\n  // File upload validation\n  validateFileUpload = (options = {}) => {\n    return async (req, res, next) => {\n      try {\n        if (!req.file && !req.files) {\n          return next();\n        }\n\n        const files = req.files ? Object.values(req.files).flat() : [req.file];\n\n        for (const file of files) {\n          // Check file size\n          if (file.size > (options.maxSize || this.maxFileSize)) {\n            await auditLogger.log('file_upload_rejected', {\n              reason: 'size_exceeded',\n              filename: file.originalname,\n              size: file.size,\n              maxSize: options.maxSize || this.maxFileSize,\n              ip: req.ip\n            });\n\n            return res.status(400).json({\n              error: 'File too large',\n              message: `File size exceeds maximum allowed size of ${(options.maxSize || this.maxFileSize) / (1024 * 1024)}MB`\n            });\n          }\n\n          // Check file type\n          const fileExt = path.extname(file.originalname).toLowerCase();\n          const allowedTypes = options.allowedTypes || this.allowedFileTypes;\n\n          if (!allowedTypes.includes(fileExt)) {\n            await auditLogger.log('file_upload_rejected', {\n              reason: 'invalid_type',\n              filename: file.originalname,\n              extension: fileExt,\n              allowedTypes,\n              ip: req.ip\n            });\n\n            return res.status(400).json({\n              error: 'Invalid file type',\n              message: `File type ${fileExt} is not allowed. Allowed types: ${allowedTypes.join(', ')}`\n            });\n          }\n\n          // Sanitize filename\n          file.originalname = this.sanitizeFilename(file.originalname);\n        }\n\n        next();\n      } catch (error) {\n        await auditLogger.log('file_validation_error', {\n          error: error.message,\n          ip: req.ip\n        });\n\n        return res.status(500).json({\n          error: 'File validation error',\n          message: 'Error occurred during file validation'\n        });\n      }\n    };\n  };\n\n  sanitizeFilename(filename) {\n    // Remove path separators and dangerous characters\n    let sanitized = filename.replace(/[\\/\\\\:*?\"<>|]/g, '');\n    \n    // Remove leading/trailing dots and spaces\n    sanitized = sanitized.replace(/^\\.+|\\.+$/g, '').trim();\n    \n    // Limit length\n    if (sanitized.length > 255) {\n      const ext = path.extname(sanitized);\n      const name = path.basename(sanitized, ext);\n      sanitized = name.substring(0, 255 - ext.length) + ext;\n    }\n    \n    return sanitized || 'file';\n  }\n}\n\nmodule.exports = new EnhancedValidationMiddleware();"],"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","ignoreList":[]}