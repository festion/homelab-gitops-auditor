{"version":3,"names":["_getJestObj","mock","ensureDir","jest","fn","mockResolvedValue","copy","remove","readFile","writeFile","pathExists","default","get","post","put","delete","create","exec","spawn","execSync","mockReturnValue","mockSocket","emit","on","join","leave","disconnect","mockIo","to","sockets","close","Server","__mockIo","require","path","process","env","NODE_ENV","LOG_LEVEL","TEST_MODE","global","mockDate","dateString","Date","spyOn","getTime","mockImplementation","restoreDate","now","mockRestore","setTimeout","originalConsole","console","log","debug","info","warn","error","restoreConsole","expect","extend","toBeValidDeploymentId","received","pass","test","message","toBeValidCommitHash","toHaveHealthyStatus","status","afterEach","clearAllMocks","afterAll"],"sources":["jest.setup.js"],"sourcesContent":["// Jest setup for unit tests\nconst path = require('path');\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.LOG_LEVEL = 'error'; // Reduce log noise during tests\nprocess.env.TEST_MODE = 'unit';\n\n// Mock external services globally\njest.mock('fs-extra', () => ({\n  ensureDir: jest.fn().mockResolvedValue(true),\n  copy: jest.fn().mockResolvedValue(true),\n  remove: jest.fn().mockResolvedValue(true),\n  readFile: jest.fn().mockResolvedValue('mock file content'),\n  writeFile: jest.fn().mockResolvedValue(true),\n  pathExists: jest.fn().mockResolvedValue(true)\n}));\n\njest.mock('axios', () => ({\n  default: {\n    get: jest.fn(),\n    post: jest.fn(),\n    put: jest.fn(),\n    delete: jest.fn(),\n    create: jest.fn(() => ({\n      get: jest.fn(),\n      post: jest.fn(),\n      put: jest.fn(),\n      delete: jest.fn()\n    }))\n  },\n  get: jest.fn(),\n  post: jest.fn(),\n  put: jest.fn(),\n  delete: jest.fn()\n}));\n\n// Mock child_process for shell command execution\njest.mock('child_process', () => ({\n  exec: jest.fn(),\n  spawn: jest.fn(),\n  execSync: jest.fn().mockReturnValue('mock command output')\n}));\n\n// Mock socket.io for WebSocket testing\njest.mock('socket.io', () => {\n  const mockSocket = {\n    emit: jest.fn(),\n    on: jest.fn(),\n    join: jest.fn(),\n    leave: jest.fn(),\n    disconnect: jest.fn()\n  };\n  \n  const mockIo = {\n    on: jest.fn(),\n    emit: jest.fn(),\n    to: jest.fn(() => ({\n      emit: jest.fn()\n    })),\n    sockets: {\n      emit: jest.fn()\n    },\n    close: jest.fn()\n  };\n  \n  return {\n    Server: jest.fn(() => mockIo),\n    __mockIo: mockIo\n  };\n});\n\n// Global test utilities\nglobal.mockDate = (dateString) => {\n  const mockDate = new Date(dateString);\n  jest.spyOn(Date, 'now').mockReturnValue(mockDate.getTime());\n  jest.spyOn(global, 'Date').mockImplementation(() => mockDate);\n};\n\nglobal.restoreDate = () => {\n  Date.now.mockRestore?.();\n  global.Date.mockRestore?.();\n};\n\n// Test timeout configuration\njest.setTimeout(10000);\n\n// Console suppression for cleaner test output\nconst originalConsole = { ...console };\nglobal.console = {\n  ...console,\n  log: jest.fn(),\n  debug: jest.fn(),\n  info: jest.fn(),\n  warn: jest.fn(),\n  error: jest.fn()\n};\n\n// Restore console after tests if needed\nglobal.restoreConsole = () => {\n  global.console = originalConsole;\n};\n\n// Custom matchers\nexpect.extend({\n  toBeValidDeploymentId(received) {\n    // UUID v4 format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n    const pass = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/.test(received);\n    return {\n      message: () => `expected ${received} to be a valid UUID v4 deployment ID format`,\n      pass\n    };\n  },\n  \n  toBeValidCommitHash(received) {\n    const pass = /^[a-f0-9]{7,40}$/.test(received);\n    return {\n      message: () => `expected ${received} to be a valid git commit hash`,\n      pass\n    };\n  },\n  \n  toHaveHealthyStatus(received) {\n    const pass = received && received.status === 'healthy';\n    return {\n      message: () => `expected status to be healthy, got ${received?.status}`,\n      pass\n    };\n  }\n});\n\n// Cleanup after each test\nafterEach(() => {\n  jest.clearAllMocks();\n  global.restoreDate();\n});\n\n// Global cleanup\nafterAll(() => {\n  global.restoreConsole();\n});"],"mappings":"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","ignoreList":[]}