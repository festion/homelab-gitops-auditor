c3940eed212a50a6f6a1c8ac74e1f4e0
/* istanbul ignore next */
function cov_b4cwnsbw0() {
  var path = "/home/dev/workspace/homelab-gitops-auditor/api/middleware/security-integration-example.js";
  var hash = "25bec3d35ada9d20cde4e3914599895e4450e5a8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/dev/workspace/homelab-gitops-auditor/api/middleware/security-integration-example.js",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 16
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "1": {
        start: {
          line: 9,
          column: 47
        },
        end: {
          line: 9,
          column: 64
        }
      },
      "2": {
        start: {
          line: 10,
          column: 57
        },
        end: {
          line: 10,
          column: 83
        }
      },
      "3": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 42
        }
      },
      "4": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 42
        }
      },
      "5": {
        start: {
          line: 26,
          column: 12
        },
        end: {
          line: 26,
          column: 21
        }
      },
      "6": {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 32,
          column: 41
        }
      },
      "7": {
        start: {
          line: 33,
          column: 0
        },
        end: {
          line: 33,
          column: 63
        }
      },
      "8": {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 44,
          column: 1
        }
      },
      "9": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 37
        }
      },
      "10": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "11": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 47,
          column: 25
        }
      },
      "12": {
        start: {
          line: 54,
          column: 0
        },
        end: {
          line: 72,
          column: 2
        }
      },
      "13": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "14": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "15": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "16": {
        start: {
          line: 75,
          column: 0
        },
        end: {
          line: 91,
          column: 2
        }
      },
      "17": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "18": {
        start: {
          line: 80,
          column: 6
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "19": {
        start: {
          line: 85,
          column: 6
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "20": {
        start: {
          line: 98,
          column: 0
        },
        end: {
          line: 115,
          column: 2
        }
      },
      "21": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "22": {
        start: {
          line: 104,
          column: 6
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "23": {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "24": {
        start: {
          line: 118,
          column: 0
        },
        end: {
          line: 139,
          column: 2
        }
      },
      "25": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "26": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 131,
          column: 9
        }
      },
      "27": {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "28": {
        start: {
          line: 142,
          column: 0
        },
        end: {
          line: 161,
          column: 2
        }
      },
      "29": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 159,
          column: 5
        }
      },
      "30": {
        start: {
          line: 150,
          column: 6
        },
        end: {
          line: 153,
          column: 9
        }
      },
      "31": {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "32": {
        start: {
          line: 168,
          column: 0
        },
        end: {
          line: 187,
          column: 2
        }
      },
      "33": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 185,
          column: 5
        }
      },
      "34": {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 179,
          column: 9
        }
      },
      "35": {
        start: {
          line: 181,
          column: 6
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "36": {
        start: {
          line: 194,
          column: 0
        },
        end: {
          line: 211,
          column: 2
        }
      },
      "37": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "38": {
        start: {
          line: 200,
          column: 6
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "39": {
        start: {
          line: 205,
          column: 6
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "40": {
        start: {
          line: 214,
          column: 0
        },
        end: {
          line: 233,
          column: 2
        }
      },
      "41": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 231,
          column: 5
        }
      },
      "42": {
        start: {
          line: 222,
          column: 6
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "43": {
        start: {
          line: 227,
          column: 6
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "44": {
        start: {
          line: 236,
          column: 0
        },
        end: {
          line: 255,
          column: 2
        }
      },
      "45": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "46": {
        start: {
          line: 244,
          column: 6
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "47": {
        start: {
          line: 249,
          column: 6
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "48": {
        start: {
          line: 262,
          column: 0
        },
        end: {
          line: 268,
          column: 3
        }
      },
      "49": {
        start: {
          line: 263,
          column: 2
        },
        end: {
          line: 267,
          column: 5
        }
      },
      "50": {
        start: {
          line: 271,
          column: 0
        },
        end: {
          line: 288,
          column: 2
        }
      },
      "51": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "52": {
        start: {
          line: 277,
          column: 6
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "53": {
        start: {
          line: 282,
          column: 6
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "54": {
        start: {
          line: 295,
          column: 0
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "55": {
        start: {
          line: 296,
          column: 2
        },
        end: {
          line: 303,
          column: 5
        }
      },
      "56": {
        start: {
          line: 307,
          column: 0
        },
        end: {
          line: 307,
          column: 27
        }
      },
      "57": {
        start: {
          line: 314,
          column: 2
        },
        end: {
          line: 327,
          column: 4
        }
      },
      "58": {
        start: {
          line: 384,
          column: 0
        },
        end: {
          line: 384,
          column: 21
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 57,
            column: 2
          },
          end: {
            line: 57,
            column: 3
          }
        },
        loc: {
          start: {
            line: 57,
            column: 22
          },
          end: {
            line: 71,
            column: 3
          }
        },
        line: 57
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 77,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        },
        loc: {
          start: {
            line: 77,
            column: 22
          },
          end: {
            line: 90,
            column: 3
          }
        },
        line: 77
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 101,
            column: 2
          },
          end: {
            line: 101,
            column: 3
          }
        },
        loc: {
          start: {
            line: 101,
            column: 22
          },
          end: {
            line: 114,
            column: 3
          }
        },
        line: 101
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 124,
            column: 3
          }
        },
        loc: {
          start: {
            line: 124,
            column: 22
          },
          end: {
            line: 138,
            column: 3
          }
        },
        line: 124
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 147,
            column: 3
          }
        },
        loc: {
          start: {
            line: 147,
            column: 22
          },
          end: {
            line: 160,
            column: 3
          }
        },
        line: 147
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 173,
            column: 2
          },
          end: {
            line: 173,
            column: 3
          }
        },
        loc: {
          start: {
            line: 173,
            column: 22
          },
          end: {
            line: 186,
            column: 3
          }
        },
        line: 173
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 197,
            column: 2
          },
          end: {
            line: 197,
            column: 3
          }
        },
        loc: {
          start: {
            line: 197,
            column: 22
          },
          end: {
            line: 210,
            column: 3
          }
        },
        line: 197
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 219,
            column: 2
          },
          end: {
            line: 219,
            column: 3
          }
        },
        loc: {
          start: {
            line: 219,
            column: 22
          },
          end: {
            line: 232,
            column: 3
          }
        },
        line: 219
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 241,
            column: 2
          },
          end: {
            line: 241,
            column: 3
          }
        },
        loc: {
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 254,
            column: 3
          }
        },
        line: 241
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 262,
            column: 23
          },
          end: {
            line: 262,
            column: 24
          }
        },
        loc: {
          start: {
            line: 262,
            column: 37
          },
          end: {
            line: 268,
            column: 1
          }
        },
        line: 262
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 274,
            column: 2
          },
          end: {
            line: 274,
            column: 3
          }
        },
        loc: {
          start: {
            line: 274,
            column: 22
          },
          end: {
            line: 287,
            column: 3
          }
        },
        line: 274
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 295,
            column: 13
          },
          end: {
            line: 295,
            column: 14
          }
        },
        loc: {
          start: {
            line: 295,
            column: 27
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 295
      },
      "12": {
        name: "validateUserCredentials",
        decl: {
          start: {
            line: 313,
            column: 9
          },
          end: {
            line: 313,
            column: 32
          }
        },
        loc: {
          start: {
            line: 313,
            column: 35
          },
          end: {
            line: 328,
            column: 1
          }
        },
        line: 313
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 0
          },
          end: {
            line: 44,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 0
          },
          end: {
            line: 44,
            column: 1
          }
        }, {
          start: {
            line: 42,
            column: 7
          },
          end: {
            line: 44,
            column: 1
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "25bec3d35ada9d20cde4e3914599895e4450e5a8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_b4cwnsbw0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_b4cwnsbw0();
/**
 * Security Integration Example
 * 
 * This file demonstrates how to integrate all the security middleware
 * into an Express.js application for comprehensive protection.
 */

const express =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[0]++, require('express'));
const {
  authenticate,
  authenticateOptional
} =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[1]++, require('./auth'));
const {
  requirePermission,
  requireRole,
  requireAdmin
} =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[2]++, require('./authorization'));
const {
  validateDeploymentRequest,
  validateRollbackRequest,
  validateWebhookRequest,
  sanitizeInput,
  limitRequestSize
} =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[3]++, require('./enhanced-input-validation'));
const {
  getProductionMiddleware,
  getDevelopmentMiddleware,
  getAuthRateLimit,
  getSensitiveRateLimit,
  getErrorHandler
} =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[4]++, require('./enhanced-security-headers'));
const app =
/* istanbul ignore next */
(cov_b4cwnsbw0().s[5]++, express());

// ==========================================
// Basic Express Setup
// ==========================================
/* istanbul ignore next */
cov_b4cwnsbw0().s[6]++;
app.use(express.json({
  limit: '10mb'
}));
/* istanbul ignore next */
cov_b4cwnsbw0().s[7]++;
app.use(express.urlencoded({
  extended: true,
  limit: '10mb'
}));

// ==========================================
// Security Middleware Stack
// ==========================================

// Apply environment-specific security middleware
/* istanbul ignore next */
cov_b4cwnsbw0().s[8]++;
if (process.env.NODE_ENV === 'production') {
  /* istanbul ignore next */
  cov_b4cwnsbw0().b[0][0]++;
  cov_b4cwnsbw0().s[9]++;
  app.use(getProductionMiddleware());
} else {
  /* istanbul ignore next */
  cov_b4cwnsbw0().b[0][1]++;
  cov_b4cwnsbw0().s[10]++;
  app.use(getDevelopmentMiddleware());
}

// Global input sanitization
/* istanbul ignore next */
cov_b4cwnsbw0().s[11]++;
app.use(sanitizeInput());

// ==========================================
// Authentication Routes
// ==========================================

// Login endpoint with strict rate limiting
/* istanbul ignore next */
cov_b4cwnsbw0().s[12]++;
app.post('/api/auth/login', getAuthRateLimit(), validateUserCredentials(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[0]++;
  cov_b4cwnsbw0().s[13]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[14]++;
    // Login logic here
    res.json({
      status: 'success',
      token: 'jwt-token',
      user: {
        id: 1,
        username: 'user'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[15]++;
    res.status(401).json({
      status: 'error',
      error: {
        code: 'LOGIN_FAILED',
        message: 'Invalid credentials'
      }
    });
  }
});

// Token refresh endpoint
/* istanbul ignore next */
cov_b4cwnsbw0().s[16]++;
app.post('/api/auth/refresh', authenticate, async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[1]++;
  cov_b4cwnsbw0().s[17]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[18]++;
    // Token refresh logic here
    res.json({
      status: 'success',
      token: 'new-jwt-token'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[19]++;
    res.status(401).json({
      status: 'error',
      error: {
        code: 'REFRESH_FAILED',
        message: 'Token refresh failed'
      }
    });
  }
});

// ==========================================
// Deployment Routes with Security
// ==========================================

// Get deployment status (read-only, relaxed security)
/* istanbul ignore next */
cov_b4cwnsbw0().s[20]++;
app.get('/api/deployments/:repository/status', authenticateOptional, requirePermission('deployment:read'), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[2]++;
  cov_b4cwnsbw0().s[21]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[22]++;
    // Get deployment status logic
    res.json({
      status: 'success',
      deployment: {
        status: 'running'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[23]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'STATUS_ERROR',
        message: 'Failed to get status'
      }
    });
  }
});

// Deploy endpoint (write operation, strict security)
/* istanbul ignore next */
cov_b4cwnsbw0().s[24]++;
app.post('/api/deployments/:repository/deploy', getSensitiveRateLimit(), limitRequestSize(1024 * 1024),
// 1MB limit for deployment requests
authenticate, requirePermission('deployment:write'), validateDeploymentRequest(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[3]++;
  cov_b4cwnsbw0().s[25]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[26]++;
    // Deployment logic here
    res.json({
      status: 'success',
      deploymentId: 'deploy-123',
      message: 'Deployment started'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[27]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'DEPLOYMENT_ERROR',
        message: 'Deployment failed'
      }
    });
  }
});

// Rollback endpoint (sensitive operation, maximum security)
/* istanbul ignore next */
cov_b4cwnsbw0().s[28]++;
app.post('/api/deployments/:repository/rollback', getSensitiveRateLimit(), authenticate, requirePermission('deployment:rollback'), validateRollbackRequest(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[4]++;
  cov_b4cwnsbw0().s[29]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[30]++;
    // Rollback logic here
    res.json({
      status: 'success',
      message: 'Rollback completed'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[31]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'ROLLBACK_ERROR',
        message: 'Rollback failed'
      }
    });
  }
});

// ==========================================
// Webhook Routes with API Key Security
// ==========================================

// GitHub webhook endpoint
/* istanbul ignore next */
cov_b4cwnsbw0().s[32]++;
app.post('/api/webhooks/github', limitRequestSize(5 * 1024 * 1024),
// 5MB limit for webhooks
authenticateApiKey, requirePermission('webhook:receive'), validateWebhookRequest(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[5]++;
  cov_b4cwnsbw0().s[33]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[34]++;
    // Webhook processing logic here
    res.json({
      status: 'success',
      message: 'Webhook processed'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[35]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'WEBHOOK_ERROR',
        message: 'Webhook processing failed'
      }
    });
  }
});

// ==========================================
// Admin Routes with Maximum Security
// ==========================================

// User management (admin only)
/* istanbul ignore next */
cov_b4cwnsbw0().s[36]++;
app.get('/api/admin/users', authenticate, requireAdmin(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[6]++;
  cov_b4cwnsbw0().s[37]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[38]++;
    // Get users logic
    res.json({
      status: 'success',
      users: []
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[39]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'USERS_ERROR',
        message: 'Failed to get users'
      }
    });
  }
});

// Create user (admin only, strict validation)
/* istanbul ignore next */
cov_b4cwnsbw0().s[40]++;
app.post('/api/admin/users', getSensitiveRateLimit(), authenticate, requireAdmin(), validateUserRequest(), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[7]++;
  cov_b4cwnsbw0().s[41]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[42]++;
    // Create user logic
    res.json({
      status: 'success',
      user: {
        id: 1,
        username: req.body.username
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[43]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'USER_CREATE_ERROR',
        message: 'Failed to create user'
      }
    });
  }
});

// System configuration (admin only)
/* istanbul ignore next */
cov_b4cwnsbw0().s[44]++;
app.put('/api/admin/config', getSensitiveRateLimit(), authenticate, requireAdmin(), requirePermission('system:admin'), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[8]++;
  cov_b4cwnsbw0().s[45]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[46]++;
    // Update config logic
    res.json({
      status: 'success',
      message: 'Configuration updated'
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[47]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'CONFIG_ERROR',
        message: 'Failed to update configuration'
      }
    });
  }
});

// ==========================================
// Monitoring and Health Check Routes
// ==========================================

// Health check (public, no authentication required)
/* istanbul ignore next */
cov_b4cwnsbw0().s[48]++;
app.get('/api/health', (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[9]++;
  cov_b4cwnsbw0().s[49]++;
  res.json({
    status: 'success',
    health: 'ok',
    timestamp: new Date().toISOString()
  });
});

// Metrics endpoint (authentication required)
/* istanbul ignore next */
cov_b4cwnsbw0().s[50]++;
app.get('/api/metrics', authenticate, requirePermission('monitoring:read'), async (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[10]++;
  cov_b4cwnsbw0().s[51]++;
  try {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[52]++;
    // Metrics logic
    res.json({
      status: 'success',
      metrics: {}
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_b4cwnsbw0().s[53]++;
    res.status(500).json({
      status: 'error',
      error: {
        code: 'METRICS_ERROR',
        message: 'Failed to get metrics'
      }
    });
  }
});

// ==========================================
// Error Handling Middleware
// ==========================================

// 404 handler
/* istanbul ignore next */
cov_b4cwnsbw0().s[54]++;
app.use('*', (req, res) => {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[11]++;
  cov_b4cwnsbw0().s[55]++;
  res.status(404).json({
    status: 'error',
    error: {
      code: 'NOT_FOUND',
      message: 'Endpoint not found',
      timestamp: new Date().toISOString()
    }
  });
});

// Global error handler (must be last)
/* istanbul ignore next */
cov_b4cwnsbw0().s[56]++;
app.use(getErrorHandler());

// ==========================================
// Helper Functions
// ==========================================

function validateUserCredentials() {
  /* istanbul ignore next */
  cov_b4cwnsbw0().f[12]++;
  cov_b4cwnsbw0().s[57]++;
  return [body('username').isString().isLength({
    min: 3,
    max: 30
  }).matches(/^[a-zA-Z0-9._-]+$/).withMessage('Invalid username format'), body('password').isString().isLength({
    min: 8
  }).withMessage('Password must be at least 8 characters'), validateRequest];
}

// ==========================================
// Security Best Practices Demonstrated
// ==========================================

/*
1. **Authentication & Authorization**:
   - JWT token authentication for users
   - API key authentication for webhooks
   - Role-based access control (RBAC)
   - Permission-based authorization

2. **Input Validation**:
   - Comprehensive request validation
   - Path traversal prevention
   - SQL injection prevention
   - XSS protection
   - Command injection prevention

3. **Rate Limiting**:
   - General API rate limiting
   - Strict rate limiting for authentication
   - Sensitive operation rate limiting
   - IP-based tracking

4. **Security Headers**:
   - Helmet.js for security headers
   - CORS configuration
   - Content Security Policy
   - HSTS headers

5. **Request Protection**:
   - Request size limiting
   - Input sanitization
   - IP filtering (whitelist/blacklist)
   - Suspicious activity detection

6. **Audit Logging**:
   - Authentication event logging
   - Authorization event logging
   - Security event logging
   - Performance monitoring

7. **Error Handling**:
   - Secure error responses
   - No internal information exposure
   - Consistent error format
   - Request tracking

8. **Environment-Specific Security**:
   - Production security stack
   - Development security relaxation
   - Configuration-based security
*/
/* istanbul ignore next */
cov_b4cwnsbw0().s[58]++;
module.exports = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,