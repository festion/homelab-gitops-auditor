bc8d6e171b2abbedde240ce2e4c51d56
/* istanbul ignore next */
function cov_nmk9ito3o() {
  var path = "/home/dev/workspace/homelab-gitops-auditor/api/services/mcp-coordinator.js";
  var hash = "51e57f30f8822fc0dde0d9c350ac01e9b1e8ab3d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/home/dev/workspace/homelab-gitops-auditor/api/services/mcp-coordinator.js",
    statementMap: {
      "0": {
        start: {
          line: 1,
          column: 17
        },
        end: {
          line: 1,
          column: 41
        }
      },
      "1": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 2,
          column: 37
        }
      },
      "2": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 19
        },
        end: {
          line: 4,
          column: 45
        }
      },
      "4": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 33
        }
      },
      "5": {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "6": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 35
        }
      },
      "7": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 23
        }
      },
      "8": {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "9": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "10": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 37
        }
      },
      "11": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 34
        }
      },
      "12": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 33
        }
      },
      "13": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 65
        }
      },
      "14": {
        start: {
          line: 46,
          column: 19
        },
        end: {
          line: 46,
          column: 44
        }
      },
      "15": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "16": {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 84
        }
      },
      "17": {
        start: {
          line: 52,
          column: 6
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "18": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 71
        }
      },
      "19": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "20": {
        start: {
          line: 64,
          column: 6
        },
        end: {
          line: 71,
          column: 9
        }
      },
      "21": {
        start: {
          line: 76,
          column: 19
        },
        end: {
          line: 76,
          column: 41
        }
      },
      "22": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "23": {
        start: {
          line: 80,
          column: 21
        },
        end: {
          line: 80,
          column: 84
        }
      },
      "24": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 88,
          column: 9
        }
      },
      "25": {
        start: {
          line: 90,
          column: 6
        },
        end: {
          line: 90,
          column: 67
        }
      },
      "26": {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 92,
          column: 73
        }
      },
      "27": {
        start: {
          line: 94,
          column: 6
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "28": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "29": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 55
        }
      },
      "30": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "31": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 55
        }
      },
      "32": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 135,
          column: 5
        }
      },
      "33": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 55
        }
      },
      "34": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "35": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 55
        }
      },
      "36": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "37": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 55
        }
      },
      "38": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "39": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "40": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 179,
          column: 5
        }
      },
      "41": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 52
        }
      },
      "42": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 190,
          column: 5
        }
      },
      "43": {
        start: {
          line: 192,
          column: 4
        },
        end: {
          line: 192,
          column: 52
        }
      },
      "44": {
        start: {
          line: 196,
          column: 20
        },
        end: {
          line: 200,
          column: 5
        }
      },
      "45": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 202,
          column: 52
        }
      },
      "46": {
        start: {
          line: 206,
          column: 20
        },
        end: {
          line: 210,
          column: 5
        }
      },
      "47": {
        start: {
          line: 212,
          column: 4
        },
        end: {
          line: 212,
          column: 52
        }
      },
      "48": {
        start: {
          line: 217,
          column: 4
        },
        end: {
          line: 217,
          column: 62
        }
      },
      "49": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 59
        }
      },
      "50": {
        start: {
          line: 225,
          column: 23
        },
        end: {
          line: 225,
          column: 55
        }
      },
      "51": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 228,
          column: 5
        }
      },
      "52": {
        start: {
          line: 227,
          column: 6
        },
        end: {
          line: 227,
          column: 64
        }
      },
      "53": {
        start: {
          line: 230,
          column: 23
        },
        end: {
          line: 230,
          column: 46
        }
      },
      "54": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 255,
          column: 5
        }
      },
      "55": {
        start: {
          line: 233,
          column: 23
        },
        end: {
          line: 233,
          column: 24
        }
      },
      "56": {
        start: {
          line: 234,
          column: 6
        },
        end: {
          line: 254,
          column: 7
        }
      },
      "57": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 97
        }
      },
      "58": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 40
        }
      },
      "59": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 42
        }
      },
      "60": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 46
        }
      },
      "61": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 22
        }
      },
      "62": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 244,
          column: 26
        }
      },
      "63": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 249,
          column: 11
        }
      },
      "64": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "65": {
        start: {
          line: 252,
          column: 10
        },
        end: {
          line: 252,
          column: 43
        }
      },
      "66": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 258,
          column: 33
        }
      },
      "67": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 259,
          column: 37
        }
      },
      "68": {
        start: {
          line: 260,
          column: 4
        },
        end: {
          line: 260,
          column: 86
        }
      },
      "69": {
        start: {
          line: 262,
          column: 4
        },
        end: {
          line: 262,
          column: 93
        }
      },
      "70": {
        start: {
          line: 266,
          column: 23
        },
        end: {
          line: 266,
          column: 86
        }
      },
      "71": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 267,
          column: 52
        }
      },
      "72": {
        start: {
          line: 269,
          column: 4
        },
        end: {
          line: 269,
          column: 73
        }
      },
      "73": {
        start: {
          line: 271,
          column: 31
        },
        end: {
          line: 274,
          column: 6
        }
      },
      "74": {
        start: {
          line: 276,
          column: 4
        },
        end: {
          line: 278,
          column: 5
        }
      },
      "75": {
        start: {
          line: 277,
          column: 6
        },
        end: {
          line: 277,
          column: 57
        }
      },
      "76": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 284,
          column: 5
        }
      },
      "77": {
        start: {
          line: 281,
          column: 6
        },
        end: {
          line: 281,
          column: 32
        }
      },
      "78": {
        start: {
          line: 283,
          column: 6
        },
        end: {
          line: 283,
          column: 47
        }
      },
      "79": {
        start: {
          line: 289,
          column: 21
        },
        end: {
          line: 289,
          column: 70
        }
      },
      "80": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 293,
          column: 24
        }
      },
      "81": {
        start: {
          line: 292,
          column: 6
        },
        end: {
          line: 292,
          column: 31
        }
      },
      "82": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 295,
          column: 75
        }
      },
      "83": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 334,
          column: 5
        }
      },
      "84": {
        start: {
          line: 300,
          column: 6
        },
        end: {
          line: 333,
          column: 7
        }
      },
      "85": {
        start: {
          line: 301,
          column: 26
        },
        end: {
          line: 301,
          column: 36
        }
      },
      "86": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 77
        }
      },
      "87": {
        start: {
          line: 303,
          column: 29
        },
        end: {
          line: 303,
          column: 51
        }
      },
      "88": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 310,
          column: 11
        }
      },
      "89": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 312,
          column: 85
        }
      },
      "90": {
        start: {
          line: 314,
          column: 30
        },
        end: {
          line: 314,
          column: 93
        }
      },
      "91": {
        start: {
          line: 315,
          column: 25
        },
        end: {
          line: 315,
          column: 62
        }
      },
      "92": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 322,
          column: 11
        }
      },
      "93": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 327,
          column: 11
        }
      },
      "94": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 332,
          column: 9
        }
      },
      "95": {
        start: {
          line: 331,
          column: 10
        },
        end: {
          line: 331,
          column: 53
        }
      },
      "96": {
        start: {
          line: 338,
          column: 4
        },
        end: {
          line: 338,
          column: 65
        }
      },
      "97": {
        start: {
          line: 340,
          column: 4
        },
        end: {
          line: 350,
          column: 5
        }
      },
      "98": {
        start: {
          line: 341,
          column: 6
        },
        end: {
          line: 345,
          column: 7
        }
      },
      "99": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 342,
          column: 41
        }
      },
      "100": {
        start: {
          line: 343,
          column: 13
        },
        end: {
          line: 345,
          column: 7
        }
      },
      "101": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 38
        }
      },
      "102": {
        start: {
          line: 347,
          column: 6
        },
        end: {
          line: 347,
          column: 68
        }
      },
      "103": {
        start: {
          line: 349,
          column: 6
        },
        end: {
          line: 349,
          column: 71
        }
      },
      "104": {
        start: {
          line: 355,
          column: 4
        },
        end: {
          line: 355,
          column: 44
        }
      },
      "105": {
        start: {
          line: 359,
          column: 4
        },
        end: {
          line: 359,
          column: 45
        }
      },
      "106": {
        start: {
          line: 363,
          column: 19
        },
        end: {
          line: 363,
          column: 21
        }
      },
      "107": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 370,
          column: 5
        }
      },
      "108": {
        start: {
          line: 366,
          column: 6
        },
        end: {
          line: 369,
          column: 8
        }
      },
      "109": {
        start: {
          line: 372,
          column: 4
        },
        end: {
          line: 372,
          column: 18
        }
      },
      "110": {
        start: {
          line: 376,
          column: 4
        },
        end: {
          line: 376,
          column: 59
        }
      },
      "111": {
        start: {
          line: 376,
          column: 34
        },
        end: {
          line: 376,
          column: 57
        }
      },
      "112": {
        start: {
          line: 380,
          column: 0
        },
        end: {
          line: 380,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 7,
            column: 3
          }
        },
        loc: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 13,
            column: 3
          }
        },
        line: 7
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        },
        loc: {
          start: {
            line: 45,
            column: 30
          },
          end: {
            line: 73,
            column: 3
          }
        },
        line: 45
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 75,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        },
        loc: {
          start: {
            line: 75,
            column: 27
          },
          end: {
            line: 103,
            column: 3
          }
        },
        line: 75
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 106,
            column: 2
          },
          end: {
            line: 106,
            column: 3
          }
        },
        loc: {
          start: {
            line: 106,
            column: 64
          },
          end: {
            line: 115,
            column: 3
          }
        },
        line: 106
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 117,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        },
        loc: {
          start: {
            line: 117,
            column: 45
          },
          end: {
            line: 127,
            column: 3
          }
        },
        line: 117
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 129,
            column: 2
          },
          end: {
            line: 129,
            column: 3
          }
        },
        loc: {
          start: {
            line: 129,
            column: 46
          },
          end: {
            line: 138,
            column: 3
          }
        },
        line: 129
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 140,
            column: 2
          },
          end: {
            line: 140,
            column: 3
          }
        },
        loc: {
          start: {
            line: 140,
            column: 42
          },
          end: {
            line: 148,
            column: 3
          }
        },
        line: 140
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 150,
            column: 2
          },
          end: {
            line: 150,
            column: 3
          }
        },
        loc: {
          start: {
            line: 150,
            column: 28
          },
          end: {
            line: 158,
            column: 3
          }
        },
        line: 150
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 161,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        },
        loc: {
          start: {
            line: 161,
            column: 56
          },
          end: {
            line: 171,
            column: 3
          }
        },
        line: 161
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 173,
            column: 2
          },
          end: {
            line: 173,
            column: 3
          }
        },
        loc: {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 182,
            column: 3
          }
        },
        line: 173
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 184,
            column: 2
          },
          end: {
            line: 184,
            column: 3
          }
        },
        loc: {
          start: {
            line: 184,
            column: 53
          },
          end: {
            line: 193,
            column: 3
          }
        },
        line: 184
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 195,
            column: 2
          },
          end: {
            line: 195,
            column: 3
          }
        },
        loc: {
          start: {
            line: 195,
            column: 45
          },
          end: {
            line: 203,
            column: 3
          }
        },
        line: 195
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 205,
            column: 2
          },
          end: {
            line: 205,
            column: 3
          }
        },
        loc: {
          start: {
            line: 205,
            column: 45
          },
          end: {
            line: 213,
            column: 3
          }
        },
        line: 205
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 216,
            column: 2
          },
          end: {
            line: 216,
            column: 3
          }
        },
        loc: {
          start: {
            line: 216,
            column: 41
          },
          end: {
            line: 218,
            column: 3
          }
        },
        line: 216
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 220,
            column: 2
          },
          end: {
            line: 220,
            column: 3
          }
        },
        loc: {
          start: {
            line: 220,
            column: 38
          },
          end: {
            line: 222,
            column: 3
          }
        },
        line: 220
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 224,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        },
        loc: {
          start: {
            line: 224,
            column: 47
          },
          end: {
            line: 263,
            column: 3
          }
        },
        line: 224
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 265,
            column: 2
          },
          end: {
            line: 265,
            column: 3
          }
        },
        loc: {
          start: {
            line: 265,
            column: 50
          },
          end: {
            line: 285,
            column: 3
          }
        },
        line: 265
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 288,
            column: 2
          },
          end: {
            line: 288,
            column: 3
          }
        },
        loc: {
          start: {
            line: 288,
            column: 26
          },
          end: {
            line: 296,
            column: 3
          }
        },
        line: 288
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 291,
            column: 16
          },
          end: {
            line: 291,
            column: 17
          }
        },
        loc: {
          start: {
            line: 291,
            column: 28
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 291
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 298,
            column: 2
          },
          end: {
            line: 298,
            column: 3
          }
        },
        loc: {
          start: {
            line: 298,
            column: 22
          },
          end: {
            line: 335,
            column: 3
          }
        },
        line: 298
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 337,
            column: 2
          },
          end: {
            line: 337,
            column: 3
          }
        },
        loc: {
          start: {
            line: 337,
            column: 40
          },
          end: {
            line: 351,
            column: 3
          }
        },
        line: 337
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 354,
            column: 2
          },
          end: {
            line: 354,
            column: 3
          }
        },
        loc: {
          start: {
            line: 354,
            column: 34
          },
          end: {
            line: 356,
            column: 3
          }
        },
        line: 354
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 358,
            column: 2
          },
          end: {
            line: 358,
            column: 3
          }
        },
        loc: {
          start: {
            line: 358,
            column: 30
          },
          end: {
            line: 360,
            column: 3
          }
        },
        line: 358
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 362,
            column: 2
          },
          end: {
            line: 362,
            column: 3
          }
        },
        loc: {
          start: {
            line: 362,
            column: 17
          },
          end: {
            line: 373,
            column: 3
          }
        },
        line: 362
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 375,
            column: 2
          },
          end: {
            line: 375,
            column: 3
          }
        },
        loc: {
          start: {
            line: 375,
            column: 18
          },
          end: {
            line: 377,
            column: 3
          }
        },
        line: 375
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 376,
            column: 23
          },
          end: {
            line: 376,
            column: 24
          }
        },
        loc: {
          start: {
            line: 376,
            column: 34
          },
          end: {
            line: 376,
            column: 57
          }
        },
        line: 376
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 106,
            column: 50
          },
          end: {
            line: 106,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 106,
            column: 60
          },
          end: {
            line: 106,
            column: 62
          }
        }],
        line: 106
      },
      "1": {
        loc: {
          start: {
            line: 205,
            column: 33
          },
          end: {
            line: 205,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 205,
            column: 41
          },
          end: {
            line: 205,
            column: 43
          }
        }],
        line: 205
      },
      "2": {
        loc: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 228,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "3": {
        loc: {
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 230,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 23
          },
          end: {
            line: 230,
            column: 41
          }
        }, {
          start: {
            line: 230,
            column: 45
          },
          end: {
            line: 230,
            column: 46
          }
        }],
        line: 230
      },
      "4": {
        loc: {
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 247,
            column: 19
          },
          end: {
            line: 247,
            column: 33
          }
        }, {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 247,
            column: 44
          }
        }],
        line: 247
      },
      "5": {
        loc: {
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 8
          },
          end: {
            line: 253,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "6": {
        loc: {
          start: {
            line: 260,
            column: 40
          },
          end: {
            line: 260,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 40
          },
          end: {
            line: 260,
            column: 74
          }
        }, {
          start: {
            line: 260,
            column: 78
          },
          end: {
            line: 260,
            column: 79
          }
        }],
        line: 260
      },
      "7": {
        loc: {
          start: {
            line: 266,
            column: 23
          },
          end: {
            line: 266,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 266,
            column: 53
          },
          end: {
            line: 266,
            column: 60
          }
        }, {
          start: {
            line: 266,
            column: 63
          },
          end: {
            line: 266,
            column: 86
          }
        }],
        line: 266
      },
      "8": {
        loc: {
          start: {
            line: 272,
            column: 15
          },
          end: {
            line: 272,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 15
          },
          end: {
            line: 272,
            column: 22
          }
        }, {
          start: {
            line: 272,
            column: 26
          },
          end: {
            line: 272,
            column: 31
          }
        }],
        line: 272
      },
      "9": {
        loc: {
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 4
          },
          end: {
            line: 278,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "10": {
        loc: {
          start: {
            line: 289,
            column: 21
          },
          end: {
            line: 289,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 21
          },
          end: {
            line: 289,
            column: 64
          }
        }, {
          start: {
            line: 289,
            column: 68
          },
          end: {
            line: 289,
            column: 70
          }
        }],
        line: 289
      },
      "11": {
        loc: {
          start: {
            line: 314,
            column: 30
          },
          end: {
            line: 314,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 30
          },
          end: {
            line: 314,
            column: 63
          }
        }, {
          start: {
            line: 314,
            column: 67
          },
          end: {
            line: 314,
            column: 93
          }
        }],
        line: 314
      },
      "12": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 332,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "13": {
        loc: {
          start: {
            line: 341,
            column: 6
          },
          end: {
            line: 345,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 6
          },
          end: {
            line: 345,
            column: 7
          }
        }, {
          start: {
            line: 343,
            column: 13
          },
          end: {
            line: 345,
            column: 7
          }
        }],
        line: 341
      },
      "14": {
        loc: {
          start: {
            line: 343,
            column: 13
          },
          end: {
            line: 345,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 13
          },
          end: {
            line: 345,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "51e57f30f8822fc0dde0d9c350ac01e9b1e8ab3d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nmk9ito3o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nmk9ito3o();
const {
  exec
} =
/* istanbul ignore next */
(cov_nmk9ito3o().s[0]++, require('child_process'));
const {
  promisify
} =
/* istanbul ignore next */
(cov_nmk9ito3o().s[1]++, require('util'));
const execAsync =
/* istanbul ignore next */
(cov_nmk9ito3o().s[2]++, promisify(exec));
const {
  Logger
} =
/* istanbul ignore next */
(cov_nmk9ito3o().s[3]++, require('../utils/logger'));
class MCPCoordinator {
  constructor() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[0]++;
    cov_nmk9ito3o().s[4]++;
    this.connections = new Map();
    /* istanbul ignore next */
    cov_nmk9ito3o().s[5]++;
    this.healthStatus = new Map();
    /* istanbul ignore next */
    cov_nmk9ito3o().s[6]++;
    this.retryAttempts = new Map();
    /* istanbul ignore next */
    cov_nmk9ito3o().s[7]++;
    this.config = null;
    /* istanbul ignore next */
    cov_nmk9ito3o().s[8]++;
    this.logger = new Logger('MCP-Coordinator');
  }
  async initialize() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[1]++;
    cov_nmk9ito3o().s[9]++;
    // Initialize default configuration
    this.config = {
      mcp: {
        networkFs: {
          wrapper: '/home/dev/workspace/network-mcp-wrapper.sh',
          timeout: 30000,
          retries: 3
        },
        github: {
          wrapper: '/home/dev/workspace/github-wrapper.sh',
          timeout: 30000,
          retries: 3
        }
      },
      monitoring: {
        healthCheckInterval: 60
      }
    };

    // Initialize MCP server connections
    /* istanbul ignore next */
    cov_nmk9ito3o().s[10]++;
    await this.initializeNetworkFS();
    /* istanbul ignore next */
    cov_nmk9ito3o().s[11]++;
    await this.initializeGitHub();

    // Start health monitoring
    /* istanbul ignore next */
    cov_nmk9ito3o().s[12]++;
    this.startHealthMonitoring();
    /* istanbul ignore next */
    cov_nmk9ito3o().s[13]++;
    this.logger.info('MCP Coordinator initialized successfully');
  }
  async initializeNetworkFS() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[2]++;
    const config =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[14]++, this.config.mcp.networkFs);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[15]++;
    try {
      // Test Network-FS MCP connection
      const result =
      /* istanbul ignore next */
      (cov_nmk9ito3o().s[16]++, await this.executeCommand(config.wrapper, 'health-check', 5000));
      /* istanbul ignore next */
      cov_nmk9ito3o().s[17]++;
      this.connections.set('networkFs', {
        wrapper: config.wrapper,
        timeout: config.timeout,
        retries: config.retries,
        status: 'connected',
        lastCheck: new Date()
      });
      /* istanbul ignore next */
      cov_nmk9ito3o().s[18]++;
      this.logger.info('Network-FS MCP server connected successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[19]++;
      this.logger.error('Failed to connect to Network-FS MCP server', error);
      // Still set connection for retry logic
      /* istanbul ignore next */
      cov_nmk9ito3o().s[20]++;
      this.connections.set('networkFs', {
        wrapper: config.wrapper,
        timeout: config.timeout,
        retries: config.retries,
        status: 'failed',
        lastCheck: new Date(),
        lastError: error.message
      });
    }
  }
  async initializeGitHub() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[3]++;
    const config =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[21]++, this.config.mcp.github);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[22]++;
    try {
      // Test GitHub MCP connection
      const result =
      /* istanbul ignore next */
      (cov_nmk9ito3o().s[23]++, await this.executeCommand(config.wrapper, 'health-check', 5000));
      /* istanbul ignore next */
      cov_nmk9ito3o().s[24]++;
      this.connections.set('github', {
        wrapper: config.wrapper,
        timeout: config.timeout,
        retries: config.retries,
        status: 'connected',
        lastCheck: new Date()
      });
      /* istanbul ignore next */
      cov_nmk9ito3o().s[25]++;
      this.logger.info('GitHub MCP server connected successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[26]++;
      this.logger.error('Failed to connect to GitHub MCP server', error);
      // Still set connection for retry logic
      /* istanbul ignore next */
      cov_nmk9ito3o().s[27]++;
      this.connections.set('github', {
        wrapper: config.wrapper,
        timeout: config.timeout,
        retries: config.retries,
        status: 'failed',
        lastCheck: new Date(),
        lastError: error.message
      });
    }
  }

  // Network-FS MCP Operations
  async transferFile(sourcePath, destinationPath, options =
  /* istanbul ignore next */
  (cov_nmk9ito3o().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[4]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[28]++, {
      action: 'transfer-file',
      source: sourcePath,
      destination: destinationPath,
      ...options
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[29]++;
    return await this.executeNetworkFSCommand(command);
  }
  async createBackup(configPath, backupPath) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[5]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[30]++, {
      action: 'create-backup',
      source: configPath,
      destination: backupPath,
      compression: true,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[31]++;
    return await this.executeNetworkFSCommand(command);
  }
  async restoreBackup(backupPath, targetPath) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[6]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[32]++, {
      action: 'restore-backup',
      source: backupPath,
      destination: targetPath,
      preservePermissions: true
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[33]++;
    return await this.executeNetworkFSCommand(command);
  }
  async validateConfiguration(configPath) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[7]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[34]++, {
      action: 'validate-config',
      path: configPath,
      validator: 'home-assistant'
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[35]++;
    return await this.executeNetworkFSCommand(command);
  }
  async listDirectory(path) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[8]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[36]++, {
      action: 'list-directory',
      path: path,
      recursive: false
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[37]++;
    return await this.executeNetworkFSCommand(command);
  }

  // GitHub MCP Operations
  async cloneRepository(repository, branch, targetPath) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[9]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[38]++, {
      action: 'clone-repository',
      repository: repository,
      branch: branch,
      destination: targetPath,
      depth: 1
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[39]++;
    return await this.executeGitHubCommand(command);
  }
  async pullRepository(repositoryPath, branch) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[10]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[40]++, {
      action: 'pull-repository',
      path: repositoryPath,
      branch: branch,
      force: false
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[41]++;
    return await this.executeGitHubCommand(command);
  }
  async getFileContent(repository, branch, filePath) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[11]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[42]++, {
      action: 'get-file-content',
      repository: repository,
      branch: branch,
      path: filePath
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[43]++;
    return await this.executeGitHubCommand(command);
  }
  async getCommitInfo(repository, commitSha) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[12]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[44]++, {
      action: 'get-commit-info',
      repository: repository,
      commit: commitSha
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[45]++;
    return await this.executeGitHubCommand(command);
  }
  async listReleases(repository, limit =
  /* istanbul ignore next */
  (cov_nmk9ito3o().b[1][0]++, 10)) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[13]++;
    const command =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[46]++, {
      action: 'list-releases',
      repository: repository,
      limit: limit
    });
    /* istanbul ignore next */
    cov_nmk9ito3o().s[47]++;
    return await this.executeGitHubCommand(command);
  }

  // MCP Command Execution
  async executeNetworkFSCommand(command) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[14]++;
    cov_nmk9ito3o().s[48]++;
    return await this.executeMCPCommand('networkFs', command);
  }
  async executeGitHubCommand(command) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[15]++;
    cov_nmk9ito3o().s[49]++;
    return await this.executeMCPCommand('github', command);
  }
  async executeMCPCommand(serverType, command) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[16]++;
    const connection =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[50]++, this.connections.get(serverType));
    /* istanbul ignore next */
    cov_nmk9ito3o().s[51]++;
    if (!connection) {
      /* istanbul ignore next */
      cov_nmk9ito3o().b[2][0]++;
      cov_nmk9ito3o().s[52]++;
      throw new Error(`MCP server ${serverType} not connected`);
    } else
    /* istanbul ignore next */
    {
      cov_nmk9ito3o().b[2][1]++;
    }
    const maxRetries =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[53]++,
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[3][0]++, connection.retries) ||
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[3][1]++, 3));
    let lastError;
    /* istanbul ignore next */
    cov_nmk9ito3o().s[54]++;
    for (let attempt =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[55]++, 1); attempt <= maxRetries; attempt++) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[56]++;
      try {
        const result =
        /* istanbul ignore next */
        (cov_nmk9ito3o().s[57]++, await this.executeCommand(connection.wrapper, command, connection.timeout));

        // Update connection status
        /* istanbul ignore next */
        cov_nmk9ito3o().s[58]++;
        connection.status = 'connected';
        /* istanbul ignore next */
        cov_nmk9ito3o().s[59]++;
        connection.lastCheck = new Date();
        /* istanbul ignore next */
        cov_nmk9ito3o().s[60]++;
        this.retryAttempts.set(serverType, 0);
        /* istanbul ignore next */
        cov_nmk9ito3o().s[61]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_nmk9ito3o().s[62]++;
        lastError = error;
        /* istanbul ignore next */
        cov_nmk9ito3o().s[63]++;
        this.logger.warn(`MCP command failed (attempt ${attempt}/${maxRetries})`, {
          serverType,
          command:
          /* istanbul ignore next */
          (cov_nmk9ito3o().b[4][0]++, command.action) ||
          /* istanbul ignore next */
          (cov_nmk9ito3o().b[4][1]++, command),
          error: error.message
        });
        /* istanbul ignore next */
        cov_nmk9ito3o().s[64]++;
        if (attempt < maxRetries) {
          /* istanbul ignore next */
          cov_nmk9ito3o().b[5][0]++;
          cov_nmk9ito3o().s[65]++;
          await this.sleep(1000 * attempt); // Exponential backoff
        } else
        /* istanbul ignore next */
        {
          cov_nmk9ito3o().b[5][1]++;
        }
      }
    }

    // Mark connection as failed
    /* istanbul ignore next */
    cov_nmk9ito3o().s[66]++;
    connection.status = 'failed';
    /* istanbul ignore next */
    cov_nmk9ito3o().s[67]++;
    connection.lastError = lastError;
    /* istanbul ignore next */
    cov_nmk9ito3o().s[68]++;
    this.retryAttempts.set(serverType, (
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[6][0]++, this.retryAttempts.get(serverType)) ||
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[6][1]++, 0)) + 1);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[69]++;
    throw new Error(`MCP command failed after ${maxRetries} attempts: ${lastError.message}`);
  }
  async executeCommand(wrapper, command, timeout) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[17]++;
    const commandStr =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[70]++, typeof command === 'string' ?
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[7][0]++, command) :
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[7][1]++, JSON.stringify(command)));
    const execCommand =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[71]++, `${wrapper} '${commandStr}'`);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[72]++;
    this.logger.debug('Executing MCP command', {
      command: execCommand
    });
    const {
      stdout,
      stderr
    } =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[73]++, await execAsync(execCommand, {
      timeout:
      /* istanbul ignore next */
      (cov_nmk9ito3o().b[8][0]++, timeout) ||
      /* istanbul ignore next */
      (cov_nmk9ito3o().b[8][1]++, 30000),
      maxBuffer: 1024 * 1024 * 10 // 10MB buffer
    }));
    /* istanbul ignore next */
    cov_nmk9ito3o().s[74]++;
    if (stderr) {
      /* istanbul ignore next */
      cov_nmk9ito3o().b[9][0]++;
      cov_nmk9ito3o().s[75]++;
      this.logger.warn('MCP command stderr', {
        stderr
      });
    } else
    /* istanbul ignore next */
    {
      cov_nmk9ito3o().b[9][1]++;
    }
    cov_nmk9ito3o().s[76]++;
    try {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[77]++;
      return JSON.parse(stdout);
    } catch (error) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[78]++;
      return {
        output: stdout,
        error: stderr
      };
    }
  }

  // Health Monitoring
  startHealthMonitoring() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[18]++;
    const interval =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[79]++,
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[10][0]++, this.config.monitoring?.healthCheckInterval) ||
    /* istanbul ignore next */
    (cov_nmk9ito3o().b[10][1]++, 60));
    /* istanbul ignore next */
    cov_nmk9ito3o().s[80]++;
    setInterval(async () => {
      /* istanbul ignore next */
      cov_nmk9ito3o().f[19]++;
      cov_nmk9ito3o().s[81]++;
      await this.checkHealth();
    }, interval * 1000);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[82]++;
    this.logger.info(`Health monitoring started (interval: ${interval}s)`);
  }
  async checkHealth() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[20]++;
    cov_nmk9ito3o().s[83]++;
    for (const [serverType, connection] of this.connections) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[84]++;
      try {
        const startTime =
        /* istanbul ignore next */
        (cov_nmk9ito3o().s[85]++, Date.now());
        /* istanbul ignore next */
        cov_nmk9ito3o().s[86]++;
        await this.executeCommand(connection.wrapper, 'health-check', 10000);
        const responseTime =
        /* istanbul ignore next */
        (cov_nmk9ito3o().s[87]++, Date.now() - startTime);
        /* istanbul ignore next */
        cov_nmk9ito3o().s[88]++;
        this.healthStatus.set(serverType, {
          status: 'healthy',
          responseTime: responseTime,
          lastCheck: new Date(),
          consecutiveFailures: 0
        });
        /* istanbul ignore next */
        cov_nmk9ito3o().s[89]++;
        this.logger.debug(`Health check passed for ${serverType}`, {
          responseTime
        });
      } catch (error) {
        const currentHealth =
        /* istanbul ignore next */
        (cov_nmk9ito3o().s[90]++,
        /* istanbul ignore next */
        (cov_nmk9ito3o().b[11][0]++, this.healthStatus.get(serverType)) ||
        /* istanbul ignore next */
        (cov_nmk9ito3o().b[11][1]++, {
          consecutiveFailures: 0
        }));
        const failures =
        /* istanbul ignore next */
        (cov_nmk9ito3o().s[91]++, currentHealth.consecutiveFailures + 1);
        /* istanbul ignore next */
        cov_nmk9ito3o().s[92]++;
        this.healthStatus.set(serverType, {
          status: 'unhealthy',
          lastCheck: new Date(),
          lastError: error.message,
          consecutiveFailures: failures
        });
        /* istanbul ignore next */
        cov_nmk9ito3o().s[93]++;
        this.logger.error(`Health check failed for ${serverType}`, {
          error: error.message,
          consecutiveFailures: failures
        });

        // Attempt reconnection after multiple failures
        /* istanbul ignore next */
        cov_nmk9ito3o().s[94]++;
        if (failures >= 3) {
          /* istanbul ignore next */
          cov_nmk9ito3o().b[12][0]++;
          cov_nmk9ito3o().s[95]++;
          await this.attemptReconnection(serverType);
        } else
        /* istanbul ignore next */
        {
          cov_nmk9ito3o().b[12][1]++;
        }
      }
    }
  }
  async attemptReconnection(serverType) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[21]++;
    cov_nmk9ito3o().s[96]++;
    this.logger.info(`Attempting to reconnect to ${serverType}`);
    /* istanbul ignore next */
    cov_nmk9ito3o().s[97]++;
    try {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[98]++;
      if (serverType === 'networkFs') {
        /* istanbul ignore next */
        cov_nmk9ito3o().b[13][0]++;
        cov_nmk9ito3o().s[99]++;
        await this.initializeNetworkFS();
      } else {
        /* istanbul ignore next */
        cov_nmk9ito3o().b[13][1]++;
        cov_nmk9ito3o().s[100]++;
        if (serverType === 'github') {
          /* istanbul ignore next */
          cov_nmk9ito3o().b[14][0]++;
          cov_nmk9ito3o().s[101]++;
          await this.initializeGitHub();
        } else
        /* istanbul ignore next */
        {
          cov_nmk9ito3o().b[14][1]++;
        }
      }
      /* istanbul ignore next */
      cov_nmk9ito3o().s[102]++;
      this.logger.info(`Successfully reconnected to ${serverType}`);
    } catch (error) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[103]++;
      this.logger.error(`Failed to reconnect to ${serverType}`, error);
    }
  }

  // Utility Methods
  getConnectionStatus(serverType) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[22]++;
    cov_nmk9ito3o().s[104]++;
    return this.connections.get(serverType);
  }
  getHealthStatus(serverType) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[23]++;
    cov_nmk9ito3o().s[105]++;
    return this.healthStatus.get(serverType);
  }
  getAllStatus() {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[24]++;
    const status =
    /* istanbul ignore next */
    (cov_nmk9ito3o().s[106]++, {});
    /* istanbul ignore next */
    cov_nmk9ito3o().s[107]++;
    for (const [serverType] of this.connections) {
      /* istanbul ignore next */
      cov_nmk9ito3o().s[108]++;
      status[serverType] = {
        connection: this.getConnectionStatus(serverType),
        health: this.getHealthStatus(serverType)
      };
    }
    /* istanbul ignore next */
    cov_nmk9ito3o().s[109]++;
    return status;
  }
  async sleep(ms) {
    /* istanbul ignore next */
    cov_nmk9ito3o().f[25]++;
    cov_nmk9ito3o().s[110]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_nmk9ito3o().f[26]++;
      cov_nmk9ito3o().s[111]++;
      return setTimeout(resolve, ms);
    });
  }
}
/* istanbul ignore next */
cov_nmk9ito3o().s[112]++;
module.exports = {
  MCPCoordinator
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,