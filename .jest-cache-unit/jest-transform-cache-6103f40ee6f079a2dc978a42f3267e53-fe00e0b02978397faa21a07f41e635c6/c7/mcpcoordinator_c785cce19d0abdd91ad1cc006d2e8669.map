{"version":3,"names":["cov_nmk9ito3o","actualCoverage","exec","s","require","promisify","execAsync","Logger","MCPCoordinator","constructor","f","connections","Map","healthStatus","retryAttempts","config","logger","initialize","mcp","networkFs","wrapper","timeout","retries","github","monitoring","healthCheckInterval","initializeNetworkFS","initializeGitHub","startHealthMonitoring","info","result","executeCommand","set","status","lastCheck","Date","error","lastError","message","transferFile","sourcePath","destinationPath","options","b","command","action","source","destination","executeNetworkFSCommand","createBackup","configPath","backupPath","compression","timestamp","toISOString","restoreBackup","targetPath","preservePermissions","validateConfiguration","path","validator","listDirectory","recursive","cloneRepository","repository","branch","depth","executeGitHubCommand","pullRepository","repositoryPath","force","getFileContent","filePath","getCommitInfo","commitSha","commit","listReleases","limit","executeMCPCommand","serverType","connection","get","Error","maxRetries","attempt","warn","sleep","commandStr","JSON","stringify","execCommand","debug","stdout","stderr","maxBuffer","parse","output","interval","setInterval","checkHealth","startTime","now","responseTime","consecutiveFailures","currentHealth","failures","attemptReconnection","getConnectionStatus","getHealthStatus","getAllStatus","health","ms","Promise","resolve","setTimeout","module","exports"],"sources":["mcp-coordinator.js"],"sourcesContent":["const { exec } = require('child_process');\nconst { promisify } = require('util');\nconst execAsync = promisify(exec);\nconst { Logger } = require('../utils/logger');\n\nclass MCPCoordinator {\n  constructor() {\n    this.connections = new Map();\n    this.healthStatus = new Map();\n    this.retryAttempts = new Map();\n    this.config = null;\n    this.logger = new Logger('MCP-Coordinator');\n  }\n\n  async initialize() {\n    // Initialize default configuration\n    this.config = {\n      mcp: {\n        networkFs: {\n          wrapper: '/home/dev/workspace/network-mcp-wrapper.sh',\n          timeout: 30000,\n          retries: 3\n        },\n        github: {\n          wrapper: '/home/dev/workspace/github-wrapper.sh',\n          timeout: 30000,\n          retries: 3\n        }\n      },\n      monitoring: {\n        healthCheckInterval: 60\n      }\n    };\n    \n    // Initialize MCP server connections\n    await this.initializeNetworkFS();\n    await this.initializeGitHub();\n    \n    // Start health monitoring\n    this.startHealthMonitoring();\n    \n    this.logger.info('MCP Coordinator initialized successfully');\n  }\n\n  async initializeNetworkFS() {\n    const config = this.config.mcp.networkFs;\n    \n    try {\n      // Test Network-FS MCP connection\n      const result = await this.executeCommand(config.wrapper, 'health-check', 5000);\n      \n      this.connections.set('networkFs', {\n        wrapper: config.wrapper,\n        timeout: config.timeout,\n        retries: config.retries,\n        status: 'connected',\n        lastCheck: new Date()\n      });\n      \n      this.logger.info('Network-FS MCP server connected successfully');\n    } catch (error) {\n      this.logger.error('Failed to connect to Network-FS MCP server', error);\n      // Still set connection for retry logic\n      this.connections.set('networkFs', {\n        wrapper: config.wrapper,\n        timeout: config.timeout,\n        retries: config.retries,\n        status: 'failed',\n        lastCheck: new Date(),\n        lastError: error.message\n      });\n    }\n  }\n\n  async initializeGitHub() {\n    const config = this.config.mcp.github;\n    \n    try {\n      // Test GitHub MCP connection\n      const result = await this.executeCommand(config.wrapper, 'health-check', 5000);\n      \n      this.connections.set('github', {\n        wrapper: config.wrapper,\n        timeout: config.timeout,\n        retries: config.retries,\n        status: 'connected',\n        lastCheck: new Date()\n      });\n      \n      this.logger.info('GitHub MCP server connected successfully');\n    } catch (error) {\n      this.logger.error('Failed to connect to GitHub MCP server', error);\n      // Still set connection for retry logic\n      this.connections.set('github', {\n        wrapper: config.wrapper,\n        timeout: config.timeout,\n        retries: config.retries,\n        status: 'failed',\n        lastCheck: new Date(),\n        lastError: error.message\n      });\n    }\n  }\n\n  // Network-FS MCP Operations\n  async transferFile(sourcePath, destinationPath, options = {}) {\n    const command = {\n      action: 'transfer-file',\n      source: sourcePath,\n      destination: destinationPath,\n      ...options\n    };\n    \n    return await this.executeNetworkFSCommand(command);\n  }\n\n  async createBackup(configPath, backupPath) {\n    const command = {\n      action: 'create-backup',\n      source: configPath,\n      destination: backupPath,\n      compression: true,\n      timestamp: new Date().toISOString()\n    };\n    \n    return await this.executeNetworkFSCommand(command);\n  }\n\n  async restoreBackup(backupPath, targetPath) {\n    const command = {\n      action: 'restore-backup',\n      source: backupPath,\n      destination: targetPath,\n      preservePermissions: true\n    };\n    \n    return await this.executeNetworkFSCommand(command);\n  }\n\n  async validateConfiguration(configPath) {\n    const command = {\n      action: 'validate-config',\n      path: configPath,\n      validator: 'home-assistant'\n    };\n    \n    return await this.executeNetworkFSCommand(command);\n  }\n\n  async listDirectory(path) {\n    const command = {\n      action: 'list-directory',\n      path: path,\n      recursive: false\n    };\n    \n    return await this.executeNetworkFSCommand(command);\n  }\n\n  // GitHub MCP Operations\n  async cloneRepository(repository, branch, targetPath) {\n    const command = {\n      action: 'clone-repository',\n      repository: repository,\n      branch: branch,\n      destination: targetPath,\n      depth: 1\n    };\n    \n    return await this.executeGitHubCommand(command);\n  }\n\n  async pullRepository(repositoryPath, branch) {\n    const command = {\n      action: 'pull-repository',\n      path: repositoryPath,\n      branch: branch,\n      force: false\n    };\n    \n    return await this.executeGitHubCommand(command);\n  }\n\n  async getFileContent(repository, branch, filePath) {\n    const command = {\n      action: 'get-file-content',\n      repository: repository,\n      branch: branch,\n      path: filePath\n    };\n    \n    return await this.executeGitHubCommand(command);\n  }\n\n  async getCommitInfo(repository, commitSha) {\n    const command = {\n      action: 'get-commit-info',\n      repository: repository,\n      commit: commitSha\n    };\n    \n    return await this.executeGitHubCommand(command);\n  }\n\n  async listReleases(repository, limit = 10) {\n    const command = {\n      action: 'list-releases',\n      repository: repository,\n      limit: limit\n    };\n    \n    return await this.executeGitHubCommand(command);\n  }\n\n  // MCP Command Execution\n  async executeNetworkFSCommand(command) {\n    return await this.executeMCPCommand('networkFs', command);\n  }\n\n  async executeGitHubCommand(command) {\n    return await this.executeMCPCommand('github', command);\n  }\n\n  async executeMCPCommand(serverType, command) {\n    const connection = this.connections.get(serverType);\n    if (!connection) {\n      throw new Error(`MCP server ${serverType} not connected`);\n    }\n\n    const maxRetries = connection.retries || 3;\n    let lastError;\n\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await this.executeCommand(connection.wrapper, command, connection.timeout);\n        \n        // Update connection status\n        connection.status = 'connected';\n        connection.lastCheck = new Date();\n        this.retryAttempts.set(serverType, 0);\n        \n        return result;\n      } catch (error) {\n        lastError = error;\n        this.logger.warn(`MCP command failed (attempt ${attempt}/${maxRetries})`, {\n          serverType,\n          command: command.action || command,\n          error: error.message\n        });\n        \n        if (attempt < maxRetries) {\n          await this.sleep(1000 * attempt); // Exponential backoff\n        }\n      }\n    }\n\n    // Mark connection as failed\n    connection.status = 'failed';\n    connection.lastError = lastError;\n    this.retryAttempts.set(serverType, (this.retryAttempts.get(serverType) || 0) + 1);\n    \n    throw new Error(`MCP command failed after ${maxRetries} attempts: ${lastError.message}`);\n  }\n\n  async executeCommand(wrapper, command, timeout) {\n    const commandStr = typeof command === 'string' ? command : JSON.stringify(command);\n    const execCommand = `${wrapper} '${commandStr}'`;\n    \n    this.logger.debug('Executing MCP command', { command: execCommand });\n    \n    const { stdout, stderr } = await execAsync(execCommand, {\n      timeout: timeout || 30000,\n      maxBuffer: 1024 * 1024 * 10 // 10MB buffer\n    });\n    \n    if (stderr) {\n      this.logger.warn('MCP command stderr', { stderr });\n    }\n    \n    try {\n      return JSON.parse(stdout);\n    } catch (error) {\n      return { output: stdout, error: stderr };\n    }\n  }\n\n  // Health Monitoring\n  startHealthMonitoring() {\n    const interval = this.config.monitoring?.healthCheckInterval || 60;\n    \n    setInterval(async () => {\n      await this.checkHealth();\n    }, interval * 1000);\n    \n    this.logger.info(`Health monitoring started (interval: ${interval}s)`);\n  }\n\n  async checkHealth() {\n    for (const [serverType, connection] of this.connections) {\n      try {\n        const startTime = Date.now();\n        await this.executeCommand(connection.wrapper, 'health-check', 10000);\n        const responseTime = Date.now() - startTime;\n        \n        this.healthStatus.set(serverType, {\n          status: 'healthy',\n          responseTime: responseTime,\n          lastCheck: new Date(),\n          consecutiveFailures: 0\n        });\n        \n        this.logger.debug(`Health check passed for ${serverType}`, { responseTime });\n      } catch (error) {\n        const currentHealth = this.healthStatus.get(serverType) || { consecutiveFailures: 0 };\n        const failures = currentHealth.consecutiveFailures + 1;\n        \n        this.healthStatus.set(serverType, {\n          status: 'unhealthy',\n          lastCheck: new Date(),\n          lastError: error.message,\n          consecutiveFailures: failures\n        });\n        \n        this.logger.error(`Health check failed for ${serverType}`, {\n          error: error.message,\n          consecutiveFailures: failures\n        });\n        \n        // Attempt reconnection after multiple failures\n        if (failures >= 3) {\n          await this.attemptReconnection(serverType);\n        }\n      }\n    }\n  }\n\n  async attemptReconnection(serverType) {\n    this.logger.info(`Attempting to reconnect to ${serverType}`);\n    \n    try {\n      if (serverType === 'networkFs') {\n        await this.initializeNetworkFS();\n      } else if (serverType === 'github') {\n        await this.initializeGitHub();\n      }\n      \n      this.logger.info(`Successfully reconnected to ${serverType}`);\n    } catch (error) {\n      this.logger.error(`Failed to reconnect to ${serverType}`, error);\n    }\n  }\n\n  // Utility Methods\n  getConnectionStatus(serverType) {\n    return this.connections.get(serverType);\n  }\n\n  getHealthStatus(serverType) {\n    return this.healthStatus.get(serverType);\n  }\n\n  getAllStatus() {\n    const status = {};\n    \n    for (const [serverType] of this.connections) {\n      status[serverType] = {\n        connection: this.getConnectionStatus(serverType),\n        health: this.getHealthStatus(serverType)\n      };\n    }\n    \n    return status;\n  }\n\n  async sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\nmodule.exports = { MCPCoordinator };"],"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","ignoreList":[]}