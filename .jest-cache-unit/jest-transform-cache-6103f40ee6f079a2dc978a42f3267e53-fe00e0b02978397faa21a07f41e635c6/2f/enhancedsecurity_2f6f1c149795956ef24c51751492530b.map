{"version":3,"names":["cov_imbrgb8lz","actualCoverage","helmet","s","require","cors","rateLimit","auditLogger","EnhancedSecurityMiddleware","constructor","f","ipWhitelist","Set","ipBlacklist","rateLimitAttempts","Map","ddosAttempts","securityEvents","ddosThresholds","requests","connections","windowMs","initializeIpLists","process","env","IP_WHITELIST","b","split","forEach","ip","add","trim","IP_BLACKLIST","enhancedCors","allowedOrigins","ALLOWED_ORIGINS","FRONTEND_URL","push","origin","callback","some","allowed","includes","pattern","replace","RegExp","test","log","timestamp","Date","toISOString","Error","credentials","methods","allowedHeaders","exposedHeaders","maxAge","enhancedHelmet","contentSecurityPolicy","directives","defaultSrc","styleSrc","scriptSrc","imgSrc","connectSrc","fontSrc","objectSrc","mediaSrc","frameSrc","frameAncestors","baseUri","formAction","upgradeInsecureRequests","NODE_ENV","hsts","includeSubDomains","preload","noSniff","frameguard","action","xssFilter","referrerPolicy","policy","hidePoweredBy","dnsPrefetchControl","allow","ieNoOpen","expectCt","enforce","permissionsPolicy","camera","microphone","geolocation","payment","usb","fullscreen","ipFilter","req","res","next","clientIp","getClientIp","isIpBlacklisted","reason","endpoint","path","userAgent","get","status","json","error","message","ENABLE_IP_WHITELIST","isIpWhitelisted","ddosProtection","now","windowStart","ipTracking","lastSeen","filter","length","threshold","setTimeout","delete","retryAfter","set","cleanupDdosTracking","createEnhancedRateLimit","options","max","skipSuccessfulRequests","skipFailedRequests","tier","Math","ceil","standardHeaders","legacyHeaders","keyGenerator","Buffer","from","toString","slice","skip","onLimitReached","method","limit","generalApiRateLimit","authRateLimit","sensitiveRateLimit","deploymentRateLimit","enhancedCustomHeaders","setHeader","API_VERSION","removeHeader","rateLimitInfo","getRateLimitInfo","remaining","reset","requestId","generateRequestId","startsWith","startTime","enhancedRequestValidation","maxSize","MAX_REQUEST_SIZE","headers","parseInt","size","substring","host","allowedHosts","ALLOWED_HOSTS","hostname","allowedMethods","connection","remoteAddress","socket","has","Array","whiteIp","ipInCidr","blackIp","cidr","network","mask","floor","join","random","substr","cutoff","tracking","entries","addToWhitelist","removeFromWhitelist","addToBlacklist","removeFromBlacklist","getWhitelist","getBlacklist","module","exports"],"sources":["enhanced-security.js"],"sourcesContent":["const helmet = require('helmet');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\nconst { auditLogger } = require('../utils/auditLogger');\n\nclass EnhancedSecurityMiddleware {\n  constructor() {\n    // IP whitelist/blacklist management\n    this.ipWhitelist = new Set();\n    this.ipBlacklist = new Set();\n    \n    // Rate limiting stores\n    this.rateLimitAttempts = new Map();\n    this.ddosAttempts = new Map();\n    \n    // Security event tracking\n    this.securityEvents = new Map();\n    \n    // DDoS detection thresholds\n    this.ddosThresholds = {\n      requests: 100,        // requests per minute\n      connections: 50,      // concurrent connections\n      windowMs: 60 * 1000   // 1 minute\n    };\n\n    // Initialize environment-based IP lists\n    this.initializeIpLists();\n  }\n\n  initializeIpLists() {\n    // Load IP whitelist from environment\n    if (process.env.IP_WHITELIST) {\n      process.env.IP_WHITELIST.split(',').forEach(ip => {\n        this.ipWhitelist.add(ip.trim());\n      });\n    }\n\n    // Load IP blacklist from environment\n    if (process.env.IP_BLACKLIST) {\n      process.env.IP_BLACKLIST.split(',').forEach(ip => {\n        this.ipBlacklist.add(ip.trim());\n      });\n    }\n\n    // Add default safe IPs to whitelist\n    this.ipWhitelist.add('127.0.0.1');\n    this.ipWhitelist.add('::1');\n    this.ipWhitelist.add('localhost');\n  }\n\n  // Enhanced CORS with dynamic origin validation\n  enhancedCors() {\n    const allowedOrigins = process.env.ALLOWED_ORIGINS \n      ? process.env.ALLOWED_ORIGINS.split(',') \n      : ['http://localhost:3000', 'http://localhost:5173', 'http://localhost:8080'];\n\n    // Add environment-specific origins\n    if (process.env.FRONTEND_URL) {\n      allowedOrigins.push(process.env.FRONTEND_URL);\n    }\n\n    return cors({\n      origin: async (origin, callback) => {\n        // Allow requests with no origin (mobile apps, curl, etc.)\n        if (!origin) return callback(null, true);\n        \n        // Check if origin is in allowed list\n        if (allowedOrigins.some(allowed => {\n          if (allowed === origin) return true;\n          if (allowed.includes('*')) {\n            const pattern = allowed.replace(/\\*/g, '.*');\n            return new RegExp(`^${pattern}$`).test(origin);\n          }\n          return false;\n        })) {\n          return callback(null, true);\n        }\n\n        // Log CORS violation\n        await auditLogger.log('cors_violation', {\n          origin: origin,\n          allowedOrigins: allowedOrigins,\n          timestamp: new Date().toISOString()\n        });\n\n        callback(new Error('Not allowed by CORS'));\n      },\n      credentials: true,\n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH'],\n      allowedHeaders: [\n        'Origin',\n        'X-Requested-With',\n        'Content-Type',\n        'Accept',\n        'Authorization',\n        'X-API-Key',\n        'X-Forwarded-For',\n        'X-Real-IP',\n        'X-CSRF-Token',\n        'X-Client-Version',\n        'X-Request-ID'\n      ],\n      exposedHeaders: [\n        'X-RateLimit-Limit',\n        'X-RateLimit-Remaining',\n        'X-RateLimit-Reset',\n        'X-Total-Count',\n        'X-API-Version'\n      ],\n      maxAge: 86400 // 24 hours\n    });\n  }\n\n  // Enhanced security headers with CSP\n  enhancedHelmet() {\n    return helmet({\n      // Comprehensive Content Security Policy\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\n            \"'self'\",\n            \"'unsafe-inline'\", // Allow inline styles for dynamic components\n            \"https://fonts.googleapis.com\",\n            \"https://cdn.jsdelivr.net\"\n          ],\n          scriptSrc: [\n            \"'self'\",\n            \"'unsafe-eval'\", // Required for some chart libraries\n            \"https://cdn.jsdelivr.net\",\n            \"https://unpkg.com\"\n          ],\n          imgSrc: [\n            \"'self'\",\n            \"data:\",\n            \"https:\",\n            \"blob:\"\n          ],\n          connectSrc: [\n            \"'self'\",\n            \"https://api.github.com\",\n            \"wss:\",\n            \"ws:\"\n          ],\n          fontSrc: [\n            \"'self'\",\n            \"https://fonts.gstatic.com\",\n            \"data:\"\n          ],\n          objectSrc: [\"'none'\"],\n          mediaSrc: [\"'self'\"],\n          frameSrc: [\"'none'\"],\n          frameAncestors: [\"'none'\"],\n          baseUri: [\"'self'\"],\n          formAction: [\"'self'\"],\n          upgradeInsecureRequests: process.env.NODE_ENV === 'production' ? [] : null\n        }\n      },\n      \n      // HTTP Strict Transport Security\n      hsts: {\n        maxAge: 31536000, // 1 year\n        includeSubDomains: true,\n        preload: true\n      },\n      \n      // Additional security headers\n      noSniff: true,\n      frameguard: { action: 'deny' },\n      xssFilter: true,\n      referrerPolicy: { policy: 'strict-origin-when-cross-origin' },\n      hidePoweredBy: true,\n      dnsPrefetchControl: { allow: false },\n      ieNoOpen: true,\n      \n      // Expect-CT for certificate transparency\n      expectCt: {\n        maxAge: 86400,\n        enforce: process.env.NODE_ENV === 'production'\n      },\n\n      // Feature Policy / Permissions Policy\n      permissionsPolicy: {\n        camera: [],\n        microphone: [],\n        geolocation: [],\n        payment: [],\n        usb: [],\n        fullscreen: ['self']\n      }\n    });\n  }\n\n  // IP filtering middleware\n  ipFilter() {\n    return async (req, res, next) => {\n      try {\n        const clientIp = this.getClientIp(req);\n        \n        // Check blacklist first\n        if (this.isIpBlacklisted(clientIp)) {\n          await auditLogger.log('ip_blocked', {\n            ip: clientIp,\n            reason: 'blacklisted',\n            endpoint: req.path,\n            userAgent: req.get('User-Agent')\n          });\n\n          return res.status(403).json({\n            error: 'Access denied',\n            message: 'Your IP address is blocked'\n          });\n        }\n\n        // Check whitelist if enabled\n        if (process.env.ENABLE_IP_WHITELIST === 'true' && !this.isIpWhitelisted(clientIp)) {\n          await auditLogger.log('ip_blocked', {\n            ip: clientIp,\n            reason: 'not_whitelisted',\n            endpoint: req.path,\n            userAgent: req.get('User-Agent')\n          });\n\n          return res.status(403).json({\n            error: 'Access denied',\n            message: 'Your IP address is not allowed'\n          });\n        }\n\n        // Add IP to request for further processing\n        req.clientIp = clientIp;\n        next();\n      } catch (error) {\n        await auditLogger.log('ip_filter_error', {\n          error: error.message,\n          ip: req.ip\n        });\n        next();\n      }\n    };\n  }\n\n  // Enhanced DDoS protection\n  ddosProtection() {\n    return async (req, res, next) => {\n      try {\n        const clientIp = req.clientIp || this.getClientIp(req);\n        const now = Date.now();\n        const windowStart = now - this.ddosThresholds.windowMs;\n\n        // Get or initialize tracking for this IP\n        let ipTracking = this.ddosAttempts.get(clientIp) || {\n          requests: [],\n          connections: 0,\n          lastSeen: now\n        };\n\n        // Clean old requests\n        ipTracking.requests = ipTracking.requests.filter(timestamp => timestamp > windowStart);\n        \n        // Add current request\n        ipTracking.requests.push(now);\n        ipTracking.lastSeen = now;\n        ipTracking.connections++;\n\n        // Check thresholds\n        if (ipTracking.requests.length > this.ddosThresholds.requests) {\n          await auditLogger.log('ddos_detected', {\n            ip: clientIp,\n            requests: ipTracking.requests.length,\n            threshold: this.ddosThresholds.requests,\n            endpoint: req.path,\n            userAgent: req.get('User-Agent')\n          });\n\n          // Temporarily blacklist IP\n          this.ipBlacklist.add(clientIp);\n          \n          // Remove from blacklist after 1 hour\n          setTimeout(() => {\n            this.ipBlacklist.delete(clientIp);\n          }, 60 * 60 * 1000);\n\n          return res.status(429).json({\n            error: 'Too many requests',\n            message: 'DDoS protection activated. Your IP has been temporarily blocked.',\n            retryAfter: 3600\n          });\n        }\n\n        // Update tracking\n        this.ddosAttempts.set(clientIp, ipTracking);\n\n        // Clean up old tracking data\n        this.cleanupDdosTracking();\n\n        next();\n      } catch (error) {\n        await auditLogger.log('ddos_protection_error', {\n          error: error.message,\n          ip: req.ip\n        });\n        next();\n      }\n    };\n  }\n\n  // Enhanced rate limiting with multiple tiers\n  createEnhancedRateLimit(options = {}) {\n    const {\n      windowMs = 15 * 60 * 1000, // 15 minutes\n      max = 100,\n      message = 'Too many requests',\n      skipSuccessfulRequests = false,\n      skipFailedRequests = false,\n      tier = 'default'\n    } = options;\n\n    return rateLimit({\n      windowMs,\n      max,\n      message: {\n        error: 'Rate limit exceeded',\n        message,\n        tier,\n        retryAfter: Math.ceil(windowMs / 1000)\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n      skipSuccessfulRequests,\n      skipFailedRequests,\n      keyGenerator: (req) => {\n        // Use IP + User-Agent for more specific tracking\n        const ip = req.clientIp || this.getClientIp(req);\n        const userAgent = req.get('User-Agent') || 'unknown';\n        return `${tier}-${ip}-${Buffer.from(userAgent).toString('base64').slice(0, 20)}`;\n      },\n      skip: (req) => {\n        const ip = req.clientIp || this.getClientIp(req);\n        // Skip for whitelisted IPs\n        return this.isIpWhitelisted(ip) || \n               (process.env.NODE_ENV === 'development' && (ip === '127.0.0.1' || ip === '::1'));\n      },\n      onLimitReached: async (req, res, options) => {\n        const ip = req.clientIp || this.getClientIp(req);\n        await auditLogger.log('rate_limit_exceeded', {\n          ip,\n          endpoint: req.path,\n          method: req.method,\n          tier,\n          limit: max,\n          windowMs,\n          userAgent: req.get('User-Agent')\n        });\n      }\n    });\n  }\n\n  // Specific rate limiters\n  generalApiRateLimit() {\n    return this.createEnhancedRateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 1000,\n      message: 'Too many API requests from this IP',\n      tier: 'api'\n    });\n  }\n\n  authRateLimit() {\n    return this.createEnhancedRateLimit({\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 5,\n      message: 'Too many authentication attempts',\n      skipSuccessfulRequests: true,\n      tier: 'auth'\n    });\n  }\n\n  sensitiveRateLimit() {\n    return this.createEnhancedRateLimit({\n      windowMs: 10 * 60 * 1000, // 10 minutes\n      max: 10,\n      message: 'Too many sensitive operations',\n      tier: 'sensitive'\n    });\n  }\n\n  deploymentRateLimit() {\n    return this.createEnhancedRateLimit({\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      max: 3,\n      message: 'Too many deployment operations',\n      tier: 'deployment'\n    });\n  }\n\n  // Enhanced custom headers\n  enhancedCustomHeaders() {\n    return async (req, res, next) => {\n      try {\n        // Security headers\n        res.setHeader('X-API-Version', process.env.API_VERSION || 'v2.0');\n        res.setHeader('X-Content-Type-Options', 'nosniff');\n        res.setHeader('X-Download-Options', 'noopen');\n        res.setHeader('X-Permitted-Cross-Domain-Policies', 'none');\n        res.setHeader('X-Frame-Options', 'DENY');\n        \n        // Remove server information\n        res.removeHeader('X-Powered-By');\n        res.removeHeader('Server');\n        \n        // Rate limit headers\n        const ip = req.clientIp || this.getClientIp(req);\n        const rateLimitInfo = this.getRateLimitInfo(ip);\n        if (rateLimitInfo) {\n          res.setHeader('X-RateLimit-Limit', rateLimitInfo.limit);\n          res.setHeader('X-RateLimit-Remaining', rateLimitInfo.remaining);\n          res.setHeader('X-RateLimit-Reset', rateLimitInfo.reset);\n        }\n        \n        // Request tracking\n        const requestId = req.get('X-Request-ID') || this.generateRequestId();\n        res.setHeader('X-Request-ID', requestId);\n        req.requestId = requestId;\n        \n        // Cache control for different endpoints\n        if (req.path.startsWith('/api/auth')) {\n          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, private');\n          res.setHeader('Pragma', 'no-cache');\n          res.setHeader('Expires', '0');\n        } else if (req.path.startsWith('/api/')) {\n          res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n          res.setHeader('Pragma', 'no-cache');\n          res.setHeader('Expires', '0');\n        }\n        \n        // Performance timing\n        req.startTime = Date.now();\n        \n        next();\n      } catch (error) {\n        await auditLogger.log('header_middleware_error', {\n          error: error.message,\n          ip: req.ip\n        });\n        next();\n      }\n    };\n  }\n\n  // Enhanced request validation\n  enhancedRequestValidation() {\n    return async (req, res, next) => {\n      try {\n        // Request size validation\n        const maxSize = process.env.MAX_REQUEST_SIZE || 10 * 1024 * 1024; // 10MB\n        \n        if (req.headers['content-length'] && parseInt(req.headers['content-length']) > maxSize) {\n          await auditLogger.log('request_too_large', {\n            ip: req.clientIp || this.getClientIp(req),\n            size: req.headers['content-length'],\n            maxSize,\n            endpoint: req.path\n          });\n\n          return res.status(413).json({\n            error: 'Payload too large',\n            message: `Request body exceeds maximum allowed size of ${maxSize / (1024 * 1024)}MB`\n          });\n        }\n\n        // User-Agent validation\n        const userAgent = req.get('User-Agent');\n        if (!userAgent || userAgent.length > 1000) {\n          await auditLogger.log('invalid_user_agent', {\n            ip: req.clientIp || this.getClientIp(req),\n            userAgent: userAgent ? userAgent.substring(0, 100) + '...' : 'missing',\n            endpoint: req.path\n          });\n\n          return res.status(400).json({\n            error: 'Bad request',\n            message: 'Invalid or missing User-Agent header'\n          });\n        }\n\n        // Host header validation\n        const host = req.get('Host');\n        const allowedHosts = process.env.ALLOWED_HOSTS ? \n          process.env.ALLOWED_HOSTS.split(',') : \n          ['localhost', '127.0.0.1', req.hostname];\n\n        if (host && !allowedHosts.some(allowed => host.includes(allowed))) {\n          await auditLogger.log('invalid_host_header', {\n            ip: req.clientIp || this.getClientIp(req),\n            host,\n            allowedHosts,\n            endpoint: req.path\n          });\n\n          return res.status(400).json({\n            error: 'Bad request',\n            message: 'Invalid Host header'\n          });\n        }\n\n        // Method validation\n        const allowedMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'];\n        if (!allowedMethods.includes(req.method)) {\n          await auditLogger.log('invalid_method', {\n            ip: req.clientIp || this.getClientIp(req),\n            method: req.method,\n            endpoint: req.path\n          });\n\n          return res.status(405).json({\n            error: 'Method not allowed',\n            message: `Method ${req.method} is not allowed`\n          });\n        }\n\n        next();\n      } catch (error) {\n        await auditLogger.log('request_validation_error', {\n          error: error.message,\n          ip: req.ip\n        });\n        next();\n      }\n    };\n  }\n\n  // Utility methods\n  getClientIp(req) {\n    return req.headers['x-forwarded-for']?.split(',')[0]?.trim() ||\n           req.headers['x-real-ip'] ||\n           req.connection.remoteAddress ||\n           req.socket.remoteAddress ||\n           req.ip ||\n           'unknown';\n  }\n\n  isIpWhitelisted(ip) {\n    return this.ipWhitelist.has(ip) || \n           Array.from(this.ipWhitelist).some(whiteIp => {\n             if (whiteIp.includes('/')) {\n               // CIDR notation support (basic)\n               return this.ipInCidr(ip, whiteIp);\n             }\n             return false;\n           });\n  }\n\n  isIpBlacklisted(ip) {\n    return this.ipBlacklist.has(ip) ||\n           Array.from(this.ipBlacklist).some(blackIp => {\n             if (blackIp.includes('/')) {\n               // CIDR notation support (basic)\n               return this.ipInCidr(ip, blackIp);\n             }\n             return false;\n           });\n  }\n\n  ipInCidr(ip, cidr) {\n    // Basic CIDR check - in production, use a proper library like 'ip-range-check'\n    try {\n      const [network, mask] = cidr.split('/');\n      // This is a simplified implementation\n      return ip.startsWith(network.split('.').slice(0, Math.floor(parseInt(mask) / 8)).join('.'));\n    } catch {\n      return false;\n    }\n  }\n\n  generateRequestId() {\n    return Math.random().toString(36).substr(2, 9) + Date.now().toString(36);\n  }\n\n  getRateLimitInfo(ip) {\n    // Implementation would depend on rate limiter used\n    return null;\n  }\n\n  cleanupDdosTracking() {\n    const now = Date.now();\n    const cutoff = now - (this.ddosThresholds.windowMs * 2);\n\n    for (const [ip, tracking] of this.ddosAttempts.entries()) {\n      if (tracking.lastSeen < cutoff) {\n        this.ddosAttempts.delete(ip);\n      }\n    }\n  }\n\n  // IP management methods\n  addToWhitelist(ip) {\n    this.ipWhitelist.add(ip);\n  }\n\n  removeFromWhitelist(ip) {\n    this.ipWhitelist.delete(ip);\n  }\n\n  addToBlacklist(ip) {\n    this.ipBlacklist.add(ip);\n  }\n\n  removeFromBlacklist(ip) {\n    this.ipBlacklist.delete(ip);\n  }\n\n  getWhitelist() {\n    return Array.from(this.ipWhitelist);\n  }\n\n  getBlacklist() {\n    return Array.from(this.ipBlacklist);\n  }\n}\n\nmodule.exports = new EnhancedSecurityMiddleware();"],"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","ignoreList":[]}