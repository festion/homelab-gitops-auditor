{"version":3,"names":["crypto","require","rateLimit","helmet","Security","constructor","config","tokenCache","Map","ipWhitelist","Set","security","blockedIPs","suspiciousActivity","maxFailedAttempts","blockDuration","tokenExpiry","setupCleanupInterval","cleanupInterval","setInterval","cleanupExpiredTokens","cleanupBlockedIPs","createRateLimiter","options","defaultOptions","windowMs","max","standardHeaders","legacyHeaders","message","error","retryAfter","Math","ceil","skip","req","isIPWhitelisted","ip","onLimitReached","recordSuspiciousActivity","createStrictRateLimiter","createWebhookRateLimiter","getHelmetConfiguration","contentSecurityPolicy","directives","defaultSrc","styleSrc","scriptSrc","imgSrc","connectSrc","fontSrc","objectSrc","mediaSrc","frameSrc","crossOriginEmbedderPolicy","hsts","maxAge","includeSubDomains","preload","noSniff","xssFilter","referrerPolicy","policy","validateWebhookSignature","signature","payload","secret","Error","startsWith","expectedSignature","calculateHMAC","providedSignature","replace","timingSafeEqual","Buffer","from","hmac","createHmac","update","JSON","stringify","digest","generateSecureToken","expiresIn","tokenId","randomUUID","now","Date","expiry","token","id","createdAt","expiresAt","set","validateToken","get","delete","revokeToken","cleanedCount","console","log","has","isIPBlocked","blockInfo","until","blockIP","duration","oldBlocked","forEach","blockedIP","reason","toISOString","unblockIP","unblocked","activity","metadata","activities","push","timestamp","oneHourAgo","recentActivities","filter","a","length","getSuspiciousActivity","createSecurityMiddleware","res","next","connection","remoteAddress","status","json","securityContext","userAgent","isWhitelisted","createWebhookSecurityMiddleware","event","delivery","isValid","body","webhookContext","validated","sanitizeInput","input","trim","validateOrigin","origin","allowedOrigins","some","allowed","domain","slice","endsWith","generateCSRFToken","randomBytes","toString","validateCSRFToken","sessionToken","getSecurityHeaders","getSecurityStats","whitelistedIPs","size","activeTokens","suspiciousActivityEntries","cleanup","clearInterval","clear","module","exports"],"sources":["security.js"],"sourcesContent":["const crypto = require('crypto');\nconst rateLimit = require('express-rate-limit');\nconst helmet = require('helmet');\n\nclass Security {\n  constructor(config = {}) {\n    this.config = config;\n    this.tokenCache = new Map();\n    this.ipWhitelist = new Set(config.security?.ipWhitelist || []);\n    this.blockedIPs = new Set();\n    this.suspiciousActivity = new Map();\n    \n    // Security configuration\n    this.maxFailedAttempts = config.security?.maxFailedAttempts || 5;\n    this.blockDuration = config.security?.blockDuration || 300000; // 5 minutes\n    this.tokenExpiry = config.security?.tokenExpiry || 3600000; // 1 hour\n    \n    this.setupCleanupInterval();\n  }\n\n  setupCleanupInterval() {\n    // Clean up expired tokens and unblock IPs every 5 minutes\n    this.cleanupInterval = setInterval(() => {\n      this.cleanupExpiredTokens();\n      this.cleanupBlockedIPs();\n    }, 300000);\n  }\n\n  createRateLimiter(options = {}) {\n    const defaultOptions = {\n      windowMs: 15 * 60 * 1000, // 15 minutes\n      max: 100, // limit each IP to 100 requests per windowMs\n      standardHeaders: true,\n      legacyHeaders: false,\n      message: {\n        error: 'Too many requests from this IP, please try again later.',\n        retryAfter: Math.ceil(15 * 60 * 1000 / 1000)\n      },\n      skip: (req) => {\n        // Skip rate limiting for whitelisted IPs\n        return this.isIPWhitelisted(req.ip);\n      },\n      onLimitReached: (req) => {\n        this.recordSuspiciousActivity(req.ip, 'rate_limit_exceeded');\n      }\n    };\n\n    return rateLimit({ ...defaultOptions, ...options });\n  }\n\n  createStrictRateLimiter() {\n    return this.createRateLimiter({\n      windowMs: 5 * 60 * 1000, // 5 minutes\n      max: 10, // very strict limit\n      message: {\n        error: 'API rate limit exceeded. This endpoint has strict limits.',\n        retryAfter: 300\n      }\n    });\n  }\n\n  createWebhookRateLimiter() {\n    return this.createRateLimiter({\n      windowMs: 1 * 60 * 1000, // 1 minute\n      max: 30, // Allow burst webhook activity\n      message: {\n        error: 'Webhook rate limit exceeded.',\n        retryAfter: 60\n      }\n    });\n  }\n\n  getHelmetConfiguration() {\n    return helmet({\n      contentSecurityPolicy: {\n        directives: {\n          defaultSrc: [\"'self'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          scriptSrc: [\"'self'\"],\n          imgSrc: [\"'self'\", \"data:\", \"https:\"],\n          connectSrc: [\"'self'\"],\n          fontSrc: [\"'self'\"],\n          objectSrc: [\"'none'\"],\n          mediaSrc: [\"'self'\"],\n          frameSrc: [\"'none'\"]\n        }\n      },\n      crossOriginEmbedderPolicy: false,\n      hsts: {\n        maxAge: 31536000,\n        includeSubDomains: true,\n        preload: true\n      },\n      noSniff: true,\n      xssFilter: true,\n      referrerPolicy: {\n        policy: \"strict-origin-when-cross-origin\"\n      }\n    });\n  }\n\n  validateWebhookSignature(signature, payload, secret) {\n    if (!signature || !secret) {\n      throw new Error('Missing signature or secret');\n    }\n\n    if (!signature.startsWith('sha256=')) {\n      throw new Error('Invalid signature format');\n    }\n\n    const expectedSignature = this.calculateHMAC(payload, secret);\n    const providedSignature = signature.replace('sha256=', '');\n\n    try {\n      return crypto.timingSafeEqual(\n        Buffer.from(expectedSignature, 'hex'),\n        Buffer.from(providedSignature, 'hex')\n      );\n    } catch (error) {\n      return false;\n    }\n  }\n\n  calculateHMAC(payload, secret) {\n    const hmac = crypto.createHmac('sha256', secret);\n    hmac.update(JSON.stringify(payload), 'utf8');\n    return hmac.digest('hex');\n  }\n\n  generateSecureToken(payload = {}, expiresIn = null) {\n    const tokenId = crypto.randomUUID();\n    const now = Date.now();\n    const expiry = expiresIn ? now + expiresIn : now + this.tokenExpiry;\n    \n    const token = {\n      id: tokenId,\n      payload,\n      createdAt: now,\n      expiresAt: expiry\n    };\n    \n    this.tokenCache.set(tokenId, token);\n    \n    return tokenId;\n  }\n\n  validateToken(tokenId) {\n    const token = this.tokenCache.get(tokenId);\n    \n    if (!token) {\n      throw new Error('Invalid token');\n    }\n    \n    if (Date.now() > token.expiresAt) {\n      this.tokenCache.delete(tokenId);\n      throw new Error('Token expired');\n    }\n    \n    return token;\n  }\n\n  revokeToken(tokenId) {\n    return this.tokenCache.delete(tokenId);\n  }\n\n  cleanupExpiredTokens() {\n    const now = Date.now();\n    let cleanedCount = 0;\n    \n    for (const [tokenId, token] of this.tokenCache) {\n      if (now > token.expiresAt) {\n        this.tokenCache.delete(tokenId);\n        cleanedCount++;\n      }\n    }\n    \n    if (cleanedCount > 0) {\n      console.log(`Cleaned up ${cleanedCount} expired tokens`);\n    }\n  }\n\n  isIPWhitelisted(ip) {\n    return this.ipWhitelist.has(ip);\n  }\n\n  isIPBlocked(ip) {\n    const blockInfo = this.blockedIPs.get ? this.blockedIPs.get(ip) : this.blockedIPs.has(ip);\n    \n    if (!blockInfo) return false;\n    \n    // If blockedIPs is a Map (with expiry), check if block has expired\n    if (this.blockedIPs.get) {\n      return Date.now() < blockInfo.until;\n    }\n    \n    // If blockedIPs is a Set (permanent blocks)\n    return true;\n  }\n\n  blockIP(ip, duration = null) {\n    const blockDuration = duration || this.blockDuration;\n    const until = Date.now() + blockDuration;\n    \n    if (!this.blockedIPs.set) {\n      // Convert Set to Map if needed\n      const oldBlocked = [...this.blockedIPs];\n      this.blockedIPs = new Map();\n      oldBlocked.forEach(blockedIP => {\n        this.blockedIPs.set(blockedIP, { until: Date.now() + this.blockDuration });\n      });\n    }\n    \n    this.blockedIPs.set(ip, { until, reason: 'security_violation' });\n    \n    console.log(`Blocked IP ${ip} until ${new Date(until).toISOString()}`);\n  }\n\n  unblockIP(ip) {\n    if (this.blockedIPs.delete) {\n      return this.blockedIPs.delete(ip);\n    } else {\n      this.blockedIPs.delete(ip);\n      return true;\n    }\n  }\n\n  cleanupBlockedIPs() {\n    if (!this.blockedIPs.forEach) return; // Not a Map\n    \n    const now = Date.now();\n    let unblocked = 0;\n    \n    for (const [ip, blockInfo] of this.blockedIPs) {\n      if (now >= blockInfo.until) {\n        this.blockedIPs.delete(ip);\n        unblocked++;\n      }\n    }\n    \n    if (unblocked > 0) {\n      console.log(`Unblocked ${unblocked} IPs`);\n    }\n  }\n\n  recordSuspiciousActivity(ip, activity, metadata = {}) {\n    if (!this.suspiciousActivity.has(ip)) {\n      this.suspiciousActivity.set(ip, []);\n    }\n    \n    const activities = this.suspiciousActivity.get(ip);\n    activities.push({\n      activity,\n      timestamp: Date.now(),\n      metadata\n    });\n    \n    // Keep only recent activities (last hour)\n    const oneHourAgo = Date.now() - 3600000;\n    const recentActivities = activities.filter(a => a.timestamp > oneHourAgo);\n    this.suspiciousActivity.set(ip, recentActivities);\n    \n    // Check if IP should be blocked\n    if (recentActivities.length >= this.maxFailedAttempts) {\n      this.blockIP(ip);\n      console.log(`IP ${ip} blocked due to suspicious activity: ${activity}`);\n    }\n  }\n\n  getSuspiciousActivity(ip) {\n    return this.suspiciousActivity.get(ip) || [];\n  }\n\n  createSecurityMiddleware() {\n    return (req, res, next) => {\n      const ip = req.ip || req.connection.remoteAddress;\n      \n      // Check if IP is blocked\n      if (this.isIPBlocked(ip)) {\n        this.recordSuspiciousActivity(ip, 'blocked_ip_access_attempt');\n        return res.status(403).json({\n          error: 'Access denied',\n          reason: 'IP blocked due to security violations',\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      // Add security headers\n      res.set({\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'Referrer-Policy': 'strict-origin-when-cross-origin'\n      });\n      \n      // Track request for security monitoring\n      req.securityContext = {\n        ip,\n        timestamp: Date.now(),\n        userAgent: req.get('User-Agent'),\n        isWhitelisted: this.isIPWhitelisted(ip)\n      };\n      \n      next();\n    };\n  }\n\n  createWebhookSecurityMiddleware(secret) {\n    return (req, res, next) => {\n      const signature = req.get('X-Hub-Signature-256');\n      const event = req.get('X-GitHub-Event');\n      const delivery = req.get('X-GitHub-Delivery');\n      \n      // Basic validation\n      if (!signature || !event || !delivery) {\n        this.recordSuspiciousActivity(req.ip, 'incomplete_webhook_headers');\n        return res.status(400).json({\n          error: 'Missing required webhook headers',\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      // Validate signature\n      try {\n        const isValid = this.validateWebhookSignature(signature, req.body, secret);\n        \n        if (!isValid) {\n          this.recordSuspiciousActivity(req.ip, 'invalid_webhook_signature', {\n            event,\n            delivery\n          });\n          \n          return res.status(401).json({\n            error: 'Invalid webhook signature',\n            timestamp: new Date().toISOString()\n          });\n        }\n        \n        req.webhookContext = {\n          signature,\n          event,\n          delivery,\n          validated: true\n        };\n        \n        next();\n        \n      } catch (error) {\n        this.recordSuspiciousActivity(req.ip, 'webhook_validation_error', {\n          error: error.message\n        });\n        \n        return res.status(400).json({\n          error: 'Webhook validation failed',\n          timestamp: new Date().toISOString()\n        });\n      }\n    };\n  }\n\n  sanitizeInput(input) {\n    if (typeof input !== 'string') {\n      return input;\n    }\n    \n    // Remove potentially dangerous characters\n    return input\n      .replace(/[<>\\\"']/g, '') // Basic XSS prevention\n      .replace(/[;&|`$]/g, '') // Command injection prevention\n      .trim();\n  }\n\n  validateOrigin(origin, allowedOrigins) {\n    if (!origin) return false;\n    if (!allowedOrigins || allowedOrigins.length === 0) return true;\n    \n    return allowedOrigins.some(allowed => {\n      if (allowed === '*') return true;\n      if (allowed.startsWith('*.')) {\n        const domain = allowed.slice(2);\n        return origin.endsWith(domain);\n      }\n      return origin === allowed;\n    });\n  }\n\n  generateCSRFToken() {\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  validateCSRFToken(token, sessionToken) {\n    if (!token || !sessionToken) return false;\n    \n    try {\n      return crypto.timingSafeEqual(\n        Buffer.from(token, 'hex'),\n        Buffer.from(sessionToken, 'hex')\n      );\n    } catch (error) {\n      return false;\n    }\n  }\n\n  getSecurityHeaders() {\n    return {\n      'X-Content-Type-Options': 'nosniff',\n      'X-Frame-Options': 'DENY',\n      'X-XSS-Protection': '1; mode=block',\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains; preload',\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\n      'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',\n      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',\n      'Pragma': 'no-cache',\n      'Expires': '0'\n    };\n  }\n\n  getSecurityStats() {\n    return {\n      whitelistedIPs: this.ipWhitelist.size,\n      blockedIPs: this.blockedIPs.size,\n      activeTokens: this.tokenCache.size,\n      suspiciousActivityEntries: this.suspiciousActivity.size,\n      maxFailedAttempts: this.maxFailedAttempts,\n      blockDuration: this.blockDuration,\n      tokenExpiry: this.tokenExpiry\n    };\n  }\n\n  cleanup() {\n    if (this.cleanupInterval) {\n      clearInterval(this.cleanupInterval);\n      this.cleanupInterval = null;\n    }\n    \n    this.tokenCache.clear();\n    this.blockedIPs.clear();\n    this.suspiciousActivity.clear();\n    \n    console.log('Security service cleaned up');\n  }\n}\n\nmodule.exports = Security;"],"mappings":"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","ignoreList":[]}