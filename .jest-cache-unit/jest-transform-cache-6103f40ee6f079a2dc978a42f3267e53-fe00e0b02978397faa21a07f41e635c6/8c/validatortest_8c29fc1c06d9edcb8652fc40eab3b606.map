{"version":3,"names":["fs","require","promises","yaml","Validator","constructor","options","strictMode","allowedExtensions","maxFileSize","validateDeploymentRequest","request","errors","warnings","repository","push","branch","commitHash","test","deploymentType","includes","priority","force","valid","length","details","requiredFieldsPresent","formatValidationPassed","filter","e","validateConfiguration","configContent","filePath","result","syntax","semantics","security","issues","ext","extname","Buffer","byteLength","validateYAMLSyntax","validateJSONSyntax","config","JSON","parse","load","validateHomeAssistantSemantics","validateConfigurationSecurity","error","message","content","line","mark","column","snippet","position","match","homeassistant","default_config","sensor","sensorErrors","validateSensorConfig","automation","automationErrors","validateAutomationConfig","group","discovery","entityIdIssues","validateEntityIds","sensors","Array","isArray","forEach","index","platform","entity_id","automations","trigger","action","triggerIndex","entityIdPattern","findEntityIds","obj","path","Object","entries","key","value","currentPath","entityId","passwordPatterns","lines","split","pattern","validateFileIntegrity","expectedChecksum","algorithm","Promise","resolve","crypto","hash","createHash","mockContent","update","actualChecksum","digest","expected","actual","validateBackupIntegrity","backupData","id","created","files","metadata","size","checksum","file","age","Date","now","getTime","summary","fileCount","totalSize","Math","floor","describe","validator","beforeEach","it","expect","toBe","toHaveLength","toContain","yamlContent","invalidYaml","jsonContent","invalidJson","insecureContent","some","issue","configWithErrors","not","toISOString","incompleteBackup","backupWithInvalidFiles","oldLargeBackup","toBeGreaterThan"],"sources":["validator.test.js"],"sourcesContent":["/**\n * Unit tests for Validator utility\n * Tests validation functions for configurations, deployments, and data integrity\n */\n\nconst fs = require('fs').promises;\nconst yaml = require('js-yaml');\n\n// Mock validator implementation\nclass Validator {\n  constructor(options = {}) {\n    this.strictMode = options.strictMode || false;\n    this.allowedExtensions = options.allowedExtensions || ['.yaml', '.yml', '.json'];\n    this.maxFileSize = options.maxFileSize || 10 * 1024 * 1024; // 10MB\n  }\n\n  async validateDeploymentRequest(request) {\n    const errors = [];\n    const warnings = [];\n\n    // Required fields validation\n    if (!request.repository) {\n      errors.push('Repository is required');\n    }\n\n    if (!request.branch) {\n      errors.push('Branch is required');\n    }\n\n    if (!request.commitHash) {\n      errors.push('Commit hash is required');\n    }\n\n    // Format validation\n    if (request.repository && !/^[\\w\\-\\.]+\\/[\\w\\-\\.]+$/.test(request.repository)) {\n      errors.push('Invalid repository format (expected: owner/repo)');\n    }\n\n    if (request.branch && !/^[\\w\\-\\.\\/]+$/.test(request.branch)) {\n      errors.push('Invalid branch name format');\n    }\n\n    if (request.commitHash && !/^[a-f0-9]{7,40}$/.test(request.commitHash)) {\n      errors.push('Invalid commit hash format');\n    }\n\n    // Optional field validation\n    if (request.deploymentType && !['full', 'incremental', 'rollback'].includes(request.deploymentType)) {\n      errors.push('Invalid deployment type (must be: full, incremental, or rollback)');\n    }\n\n    if (request.priority && !['low', 'normal', 'high', 'urgent'].includes(request.priority)) {\n      errors.push('Invalid priority level');\n    }\n\n    // Warnings for potentially problematic values\n    if (request.branch === 'master' || request.branch === 'main') {\n      warnings.push('Deploying from main/master branch - ensure this is intentional');\n    }\n\n    if (request.force === true) {\n      warnings.push('Force deployment enabled - this may overwrite manual changes');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      details: {\n        requiredFieldsPresent: !request.repository ? false : !request.branch ? false : !!request.commitHash,\n        formatValidationPassed: errors.filter(e => e.includes('format')).length === 0\n      }\n    };\n  }\n\n  async validateConfiguration(configContent, filePath) {\n    const result = {\n      valid: true,\n      errors: [],\n      warnings: [],\n      syntax: { valid: true, errors: [] },\n      semantics: { valid: true, errors: [], warnings: [] },\n      security: { valid: true, issues: [] }\n    };\n\n    try {\n      // File extension validation\n      const ext = require('path').extname(filePath);\n      if (!this.allowedExtensions.includes(ext)) {\n        result.errors.push(`Unsupported file extension: ${ext}`);\n        result.valid = false;\n        return result;\n      }\n\n      // Size validation\n      if (Buffer.byteLength(configContent, 'utf8') > this.maxFileSize) {\n        result.errors.push('Configuration file exceeds maximum size limit');\n        result.valid = false;\n        return result;\n      }\n\n      // Syntax validation\n      if (ext === '.yaml' || ext === '.yml') {\n        result.syntax = await this.validateYAMLSyntax(configContent);\n      } else if (ext === '.json') {\n        result.syntax = this.validateJSONSyntax(configContent);\n      }\n\n      if (!result.syntax.valid) {\n        result.valid = false;\n        result.errors.push(...result.syntax.errors);\n        return result;\n      }\n\n      // Parse configuration for semantic validation\n      const config = ext === '.json' ? \n        JSON.parse(configContent) : \n        yaml.load(configContent);\n\n      // Semantic validation\n      result.semantics = this.validateHomeAssistantSemantics(config);\n      if (!result.semantics.valid) {\n        result.valid = false;\n        result.errors.push(...result.semantics.errors);\n      }\n      result.warnings.push(...result.semantics.warnings);\n\n      // Security validation\n      result.security = this.validateConfigurationSecurity(configContent);\n      if (!result.security.valid) {\n        if (this.strictMode) {\n          result.valid = false;\n          result.errors.push(...result.security.issues);\n        } else {\n          result.warnings.push(...result.security.issues);\n        }\n      }\n\n    } catch (error) {\n      result.valid = false;\n      result.errors.push(`Configuration validation failed: ${error.message}`);\n    }\n\n    return result;\n  }\n\n  async validateYAMLSyntax(content) {\n    try {\n      yaml.load(content);\n      return { valid: true, errors: [] };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [{\n          line: error.mark?.line || 0,\n          column: error.mark?.column || 0,\n          message: error.message,\n          snippet: error.mark?.snippet || null\n        }]\n      };\n    }\n  }\n\n  validateJSONSyntax(content) {\n    try {\n      JSON.parse(content);\n      return { valid: true, errors: [] };\n    } catch (error) {\n      return {\n        valid: false,\n        errors: [{\n          message: error.message,\n          position: error.message.match(/position (\\d+)/)?.[1] || 0\n        }]\n      };\n    }\n  }\n\n  validateHomeAssistantSemantics(config) {\n    const errors = [];\n    const warnings = [];\n\n    // Check for required Home Assistant sections\n    if (!config.homeassistant && !config.default_config) {\n      errors.push('Missing required homeassistant or default_config section');\n    }\n\n    // Validate sensor configurations\n    if (config.sensor) {\n      const sensorErrors = this.validateSensorConfig(config.sensor);\n      errors.push(...sensorErrors);\n    }\n\n    // Validate automation configurations\n    if (config.automation) {\n      const automationErrors = this.validateAutomationConfig(config.automation);\n      errors.push(...automationErrors);\n    }\n\n    // Check for deprecated configurations\n    if (config.group) {\n      warnings.push('The \"group\" domain is deprecated, consider using the Groups UI');\n    }\n\n    if (config.discovery) {\n      warnings.push('The \"discovery\" component is deprecated, use \"zeroconf\" instead');\n    }\n\n    // Validate entity IDs format\n    const entityIdIssues = this.validateEntityIds(config);\n    errors.push(...entityIdIssues);\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  validateSensorConfig(sensors) {\n    const errors = [];\n\n    if (!Array.isArray(sensors)) {\n      errors.push('Sensor configuration must be an array');\n      return errors;\n    }\n\n    sensors.forEach((sensor, index) => {\n      if (!sensor.platform) {\n        errors.push(`Sensor ${index}: Missing required 'platform' field`);\n      }\n\n      if (sensor.platform === 'template' && !sensor.sensors) {\n        errors.push(`Sensor ${index}: Template platform requires 'sensors' field`);\n      }\n\n      if (sensor.entity_id && !/^[a-z_]+\\.[a-z0-9_]+$/.test(sensor.entity_id)) {\n        errors.push(`Sensor ${index}: Invalid entity_id format`);\n      }\n    });\n\n    return errors;\n  }\n\n  validateAutomationConfig(automations) {\n    const errors = [];\n\n    if (!Array.isArray(automations)) {\n      errors.push('Automation configuration must be an array');\n      return errors;\n    }\n\n    automations.forEach((automation, index) => {\n      if (!automation.trigger) {\n        errors.push(`Automation ${index}: Missing required 'trigger' field`);\n      }\n\n      if (!automation.action) {\n        errors.push(`Automation ${index}: Missing required 'action' field`);\n      }\n\n      if (automation.trigger && Array.isArray(automation.trigger)) {\n        automation.trigger.forEach((trigger, triggerIndex) => {\n          if (!trigger.platform) {\n            errors.push(`Automation ${index}, trigger ${triggerIndex}: Missing 'platform' field`);\n          }\n        });\n      }\n    });\n\n    return errors;\n  }\n\n  validateEntityIds(config) {\n    const errors = [];\n    const entityIdPattern = /^[a-z_]+\\.[a-z0-9_]+$/;\n\n    const findEntityIds = (obj, path = '') => {\n      if (typeof obj !== 'object' || obj === null) return;\n\n      Object.entries(obj).forEach(([key, value]) => {\n        const currentPath = path ? `${path}.${key}` : key;\n\n        if (key === 'entity_id') {\n          if (typeof value === 'string' && !entityIdPattern.test(value)) {\n            errors.push(`Invalid entity_id format at ${currentPath}: ${value}`);\n          } else if (Array.isArray(value)) {\n            value.forEach((entityId, index) => {\n              if (!entityIdPattern.test(entityId)) {\n                errors.push(`Invalid entity_id format at ${currentPath}[${index}]: ${entityId}`);\n              }\n            });\n          }\n        } else if (typeof value === 'object') {\n          findEntityIds(value, currentPath);\n        }\n      });\n    };\n\n    findEntityIds(config);\n    return errors;\n  }\n\n  validateConfigurationSecurity(content) {\n    const issues = [];\n\n    // Check for hardcoded passwords\n    const passwordPatterns = [\n      /password:\\s*[^!]/i,\n      /api_key:\\s*[^!]/i,\n      /token:\\s*[^!]/i,\n      /secret:\\s*[^!]/i\n    ];\n\n    const lines = content.split('\\n');\n    lines.forEach((line, index) => {\n      passwordPatterns.forEach(pattern => {\n        if (pattern.test(line) && !line.includes('!secret')) {\n          issues.push(`Line ${index + 1}: Potential hardcoded secret detected`);\n        }\n      });\n\n      // Check for HTTP URLs (should use HTTPS)\n      if (line.includes('http://') && !line.includes('localhost') && !line.includes('127.0.0.1')) {\n        issues.push(`Line ${index + 1}: HTTP URL detected, consider using HTTPS`);\n      }\n\n      // Check for weak encryption\n      if (line.match(/\\b(md5|sha1)\\b/i)) {\n        issues.push(`Line ${index + 1}: Weak encryption algorithm detected`);\n      }\n    });\n\n    return {\n      valid: issues.length === 0,\n      issues\n    };\n  }\n\n  validateFileIntegrity(filePath, expectedChecksum, algorithm = 'sha256') {\n    return new Promise((resolve) => {\n      const crypto = require('crypto');\n      const hash = crypto.createHash(algorithm);\n\n      // Mock file reading for testing\n      const mockContent = 'mock file content for testing';\n      hash.update(mockContent);\n      const actualChecksum = hash.digest('hex');\n\n      resolve({\n        valid: actualChecksum === expectedChecksum,\n        expected: expectedChecksum,\n        actual: actualChecksum,\n        algorithm,\n        filePath\n      });\n    });\n  }\n\n  validateBackupIntegrity(backupData) {\n    const errors = [];\n    const warnings = [];\n\n    // Check required backup fields\n    if (!backupData.id) {\n      errors.push('Backup ID is required');\n    }\n\n    if (!backupData.created) {\n      errors.push('Backup creation timestamp is required');\n    }\n\n    if (!backupData.files || !Array.isArray(backupData.files)) {\n      errors.push('Backup must contain a files array');\n    }\n\n    // Validate backup metadata\n    if (backupData.metadata) {\n      if (typeof backupData.metadata.size !== 'number' || backupData.metadata.size <= 0) {\n        errors.push('Invalid backup size in metadata');\n      }\n\n      if (backupData.metadata.checksum && !/^[a-f0-9]+$/.test(backupData.metadata.checksum)) {\n        errors.push('Invalid checksum format in metadata');\n      }\n    }\n\n    // Check file entries\n    if (backupData.files) {\n      backupData.files.forEach((file, index) => {\n        if (!file.path) {\n          errors.push(`File ${index}: Missing path`);\n        }\n\n        if (typeof file.size !== 'number' || file.size < 0) {\n          errors.push(`File ${index}: Invalid size`);\n        }\n\n        if (file.checksum && !/^[a-f0-9]+$/.test(file.checksum)) {\n          errors.push(`File ${index}: Invalid checksum format`);\n        }\n      });\n    }\n\n    // Warnings for potentially problematic backups\n    if (backupData.metadata?.size > 1024 * 1024 * 1024) { // 1GB\n      warnings.push('Large backup size detected - may take significant time to restore');\n    }\n\n    const age = Date.now() - new Date(backupData.created).getTime();\n    if (age > 30 * 24 * 60 * 60 * 1000) { // 30 days\n      warnings.push('Backup is older than 30 days - consider creating a fresh backup');\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      warnings,\n      summary: {\n        fileCount: backupData.files?.length || 0,\n        totalSize: backupData.metadata?.size || 0,\n        age: Math.floor(age / (24 * 60 * 60 * 1000)) // days\n      }\n    };\n  }\n}\n\ndescribe('Validator', () => {\n  let validator;\n\n  beforeEach(() => {\n    validator = new Validator();\n  });\n\n  describe('deployment request validation', () => {\n    it('should validate complete deployment request', async () => {\n      const request = {\n        repository: 'user/home-assistant-config',\n        branch: 'main',\n        commitHash: 'abc123def456',\n        deploymentType: 'full',\n        priority: 'normal'\n      };\n\n      const result = await validator.validateDeploymentRequest(request);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.details.requiredFieldsPresent).toBe(true);\n      expect(result.details.formatValidationPassed).toBe(true);\n    });\n\n    it('should reject request with missing required fields', async () => {\n      const request = {\n        repository: 'user/repo'\n        // Missing branch and commitHash\n      };\n\n      const result = await validator.validateDeploymentRequest(request);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Branch is required');\n      expect(result.errors).toContain('Commit hash is required');\n    });\n\n    it('should validate format requirements', async () => {\n      const request = {\n        repository: 'invalid-repo-format',\n        branch: 'feature/invalid@branch',\n        commitHash: 'not-a-valid-hash',\n        deploymentType: 'invalid-type',\n        priority: 'invalid-priority'\n      };\n\n      const result = await validator.validateDeploymentRequest(request);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Invalid repository format (expected: owner/repo)');\n      expect(result.errors).toContain('Invalid branch name format');\n      expect(result.errors).toContain('Invalid commit hash format');\n      expect(result.errors).toContain('Invalid deployment type (must be: full, incremental, or rollback)');\n      expect(result.errors).toContain('Invalid priority level');\n    });\n\n    it('should generate warnings for potentially problematic values', async () => {\n      const request = {\n        repository: 'user/repo',\n        branch: 'main',\n        commitHash: 'abc123def456',\n        force: true\n      };\n\n      const result = await validator.validateDeploymentRequest(request);\n\n      expect(result.valid).toBe(true);\n      expect(result.warnings).toContain('Deploying from main/master branch - ensure this is intentional');\n      expect(result.warnings).toContain('Force deployment enabled - this may overwrite manual changes');\n    });\n  });\n\n  describe('configuration validation', () => {\n    it('should validate correct YAML configuration', async () => {\n      const yamlContent = `\nhomeassistant:\n  name: Home\n  latitude: 40.7128\n  longitude: -74.0060\n\nsensor:\n  - platform: template\n    sensors:\n      temperature:\n        friendly_name: \"Temperature\"\n        value_template: \"{{ states('sensor.temp') }}\"\n`;\n\n      const result = await validator.validateConfiguration(yamlContent, 'configuration.yaml');\n\n      expect(result.valid).toBe(true);\n      expect(result.syntax.valid).toBe(true);\n      expect(result.semantics.valid).toBe(true);\n    });\n\n    it('should detect YAML syntax errors', async () => {\n      const invalidYaml = `\nhomeassistant:\n  name: Home\n  latitude: invalid: syntax\n`;\n\n      const result = await validator.validateConfiguration(invalidYaml, 'configuration.yaml');\n\n      expect(result.valid).toBe(false);\n      expect(result.syntax.valid).toBe(false);\n      expect(result.syntax.errors).toHaveLength(1);\n    });\n\n    it('should validate JSON configuration', async () => {\n      const jsonContent = `{\n        \"homeassistant\": {\n          \"name\": \"Home\"\n        }\n      }`;\n\n      const result = await validator.validateConfiguration(jsonContent, 'configuration.json');\n\n      expect(result.valid).toBe(true);\n      expect(result.syntax.valid).toBe(true);\n    });\n\n    it('should detect JSON syntax errors', async () => {\n      const invalidJson = `{\n        \"homeassistant\": {\n          \"name\": \"Home\",\n        }\n      }`;\n\n      const result = await validator.validateConfiguration(invalidJson, 'configuration.json');\n\n      expect(result.valid).toBe(false);\n      expect(result.syntax.valid).toBe(false);\n    });\n\n    it('should reject unsupported file extensions', async () => {\n      const result = await validator.validateConfiguration('content', 'config.txt');\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Unsupported file extension: .txt');\n    });\n\n    it('should detect security issues in configuration', async () => {\n      const insecureContent = `\nhomeassistant:\n  name: Home\nmqtt:\n  password: hardcoded123\n  broker: http://insecure.example.com\nencryption:\n  algorithm: md5\n`;\n\n      const result = await validator.validateConfiguration(insecureContent, 'configuration.yaml');\n\n      expect(result.security.valid).toBe(false);\n      expect(result.security.issues.some(issue => issue.includes('hardcoded secret'))).toBe(true);\n      expect(result.security.issues.some(issue => issue.includes('HTTP URL'))).toBe(true);\n      expect(result.security.issues.some(issue => issue.includes('Weak encryption'))).toBe(true);\n    });\n\n    it('should validate Home Assistant semantics', async () => {\n      const configWithErrors = `\nsensor:\n  - name: \"Missing Platform\"\n  - platform: template\nautomation:\n  - alias: \"Missing Trigger\"\n    action:\n      - service: light.turn_on\n`;\n\n      const result = await validator.validateConfiguration(configWithErrors, 'configuration.yaml');\n\n      expect(result.semantics.valid).toBe(false);\n      expect(result.semantics.errors.some(e => e.includes('Missing required'))).toBe(true);\n    });\n  });\n\n  describe('file integrity validation', () => {\n    it('should validate file with correct checksum', async () => {\n      const crypto = require('crypto');\n      const mockContent = 'mock file content for testing';\n      const expectedChecksum = crypto.createHash('sha256').update(mockContent).digest('hex');\n\n      const result = await validator.validateFileIntegrity('/path/to/file', expectedChecksum);\n\n      expect(result.valid).toBe(true);\n      expect(result.actual).toBe(expectedChecksum);\n      expect(result.algorithm).toBe('sha256');\n    });\n\n    it('should detect file with incorrect checksum', async () => {\n      const result = await validator.validateFileIntegrity('/path/to/file', 'wrong-checksum');\n\n      expect(result.valid).toBe(false);\n      expect(result.expected).toBe('wrong-checksum');\n      expect(result.actual).not.toBe('wrong-checksum');\n    });\n  });\n\n  describe('backup integrity validation', () => {\n    it('should validate complete backup data', () => {\n      const backupData = {\n        id: 'backup-123',\n        created: new Date().toISOString(),\n        files: [\n          { path: 'configuration.yaml', size: 1024, checksum: 'abc123' },\n          { path: 'automations.yaml', size: 512, checksum: 'def456' }\n        ],\n        metadata: {\n          size: 1536,\n          checksum: 'backup-checksum-123'\n        }\n      };\n\n      const result = validator.validateBackupIntegrity(backupData);\n\n      expect(result.valid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n      expect(result.summary.fileCount).toBe(2);\n      expect(result.summary.totalSize).toBe(1536);\n    });\n\n    it('should detect missing required backup fields', () => {\n      const incompleteBackup = {\n        files: []\n      };\n\n      const result = validator.validateBackupIntegrity(incompleteBackup);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors).toContain('Backup ID is required');\n      expect(result.errors).toContain('Backup creation timestamp is required');\n    });\n\n    it('should validate file entries in backup', () => {\n      const backupWithInvalidFiles = {\n        id: 'backup-123',\n        created: new Date().toISOString(),\n        files: [\n          { size: 1024 }, // Missing path\n          { path: 'test.yaml', size: -1 }, // Invalid size\n          { path: 'other.yaml', size: 512, checksum: 'invalid-checksum-format' }\n        ],\n        metadata: { size: 1536 }\n      };\n\n      const result = validator.validateBackupIntegrity(backupWithInvalidFiles);\n\n      expect(result.valid).toBe(false);\n      expect(result.errors.some(e => e.includes('Missing path'))).toBe(true);\n      expect(result.errors.some(e => e.includes('Invalid size'))).toBe(true);\n      expect(result.errors.some(e => e.includes('Invalid checksum format'))).toBe(true);\n    });\n\n    it('should generate warnings for old or large backups', () => {\n      const oldLargeBackup = {\n        id: 'backup-123',\n        created: new Date(Date.now() - 31 * 24 * 60 * 60 * 1000).toISOString(), // 31 days ago\n        files: [],\n        metadata: {\n          size: 2 * 1024 * 1024 * 1024 // 2GB\n        }\n      };\n\n      const result = validator.validateBackupIntegrity(oldLargeBackup);\n\n      expect(result.warnings).toContain('Large backup size detected - may take significant time to restore');\n      expect(result.warnings).toContain('Backup is older than 30 days - consider creating a fresh backup');\n    });\n  });\n\n  describe('entity ID validation', () => {\n    it('should validate proper entity ID formats', () => {\n      const config = {\n        sensor: {\n          entity_id: 'sensor.temperature'\n        },\n        automation: [\n          {\n            trigger: {\n              entity_id: ['light.living_room', 'switch.kitchen']\n            }\n          }\n        ]\n      };\n\n      const errors = validator.validateEntityIds(config);\n\n      expect(errors).toHaveLength(0);\n    });\n\n    it('should detect invalid entity ID formats', () => {\n      const config = {\n        sensor: {\n          entity_id: 'Invalid-Entity-ID'\n        },\n        automation: [\n          {\n            trigger: {\n              entity_id: ['valid.entity', 'Invalid.Entity.ID']\n            }\n          }\n        ]\n      };\n\n      const errors = validator.validateEntityIds(config);\n\n      expect(errors.length).toBeGreaterThan(0);\n      expect(errors.some(e => e.includes('Invalid-Entity-ID'))).toBe(true);\n      expect(errors.some(e => e.includes('Invalid.Entity.ID'))).toBe(true);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}