{"version":3,"names":["_getJestObj","mock","promises","mkdir","jest","fn","readdir","stat","readFile","writeFile","copyFile","access","require","MockBackupManager","fs","path","exec","MockedBackupManager","constructor","backups","Map","initialized","initialize","createPreDeploymentBackup","deploymentId","Error","backupId","Date","now","backup","id","type","created","toISOString","size","metadata","configFiles","entityStates","databaseSize","set","validateBackup","get","valid","integrity","checksumMatches","readableFiles","corruptedFiles","estimatedRestoreTime","rollbackDeployment","success","restoredFiles","duration","details","configurationRestored","databaseRestored","entityStatesRestored","listBackups","Array","from","values","total","length","totalSize","reduce","sum","b","deleteBackup","delete","deletedSize","freedSpace","getBackupMetadata","homeAssistantVersion","addons","integrations","describe","backupManager","mockExec","mockFs","beforeEach","mockImplementation","command","options","callback","mockResolvedValue","isFile","afterEach","clearAllMocks","it","expect","resolves","toBe","toMatch","toContain","toBeGreaterThan","toBeDefined","uninitializedManager","rejects","toThrow","backup1","backup2","not","validation","rollback","list","toHaveLength","forEach","deletion","toBeInstanceOf","originalCreate","mockRejectedValue","originalValidate","originalRollback","errors"],"sources":["backup-manager.test.js"],"sourcesContent":["/**\n * Unit tests for Backup Manager\n * Tests backup creation, validation, and recovery functionality\n */\n\nconst { MockBackupManager } = require('../../mocks/backup-manager.mock');\nconst fs = require('fs').promises;\nconst path = require('path');\nconst { exec } = require('child_process');\n\n// Mock external dependencies\njest.mock('fs', () => ({\n  promises: {\n    mkdir: jest.fn(),\n    readdir: jest.fn(),\n    stat: jest.fn(),\n    readFile: jest.fn(),\n    writeFile: jest.fn(),\n    copyFile: jest.fn(),\n    access: jest.fn()\n  }\n}));\njest.mock('child_process');\n\n// Mock the actual backup manager for this test\nclass MockedBackupManager {\n  constructor() {\n    this.backups = new Map();\n    this.initialized = false;\n  }\n\n  async initialize() {\n    this.initialized = true;\n    return true;\n  }\n\n  async createPreDeploymentBackup(deploymentId) {\n    if (!this.initialized) {\n      throw new Error('Backup manager not initialized');\n    }\n\n    const backupId = `backup-${Date.now()}`;\n    const backup = {\n      id: backupId,\n      deploymentId,\n      type: 'pre-deployment',\n      created: new Date().toISOString(),\n      path: `/backup/${backupId}.tar.gz`,\n      size: 2048576,\n      metadata: {\n        configFiles: 156,\n        entityStates: 234,\n        databaseSize: 1048576\n      }\n    };\n\n    this.backups.set(backupId, backup);\n    return backup;\n  }\n\n  async validateBackup(backupId) {\n    const backup = this.backups.get(backupId);\n    if (!backup) {\n      throw new Error(`Backup ${backupId} not found`);\n    }\n\n    // Simulate validation process\n    return {\n      valid: true,\n      integrity: 'verified',\n      checksumMatches: true,\n      readableFiles: backup.metadata.configFiles,\n      corruptedFiles: 0,\n      estimatedRestoreTime: 12000\n    };\n  }\n\n  async rollbackDeployment(backupId) {\n    const backup = this.backups.get(backupId);\n    if (!backup) {\n      throw new Error(`Backup ${backupId} not found`);\n    }\n\n    return {\n      success: true,\n      backupId,\n      restoredFiles: backup.metadata.configFiles,\n      duration: 12000,\n      details: {\n        configurationRestored: true,\n        databaseRestored: true,\n        entityStatesRestored: true\n      }\n    };\n  }\n\n  async listBackups() {\n    const backups = Array.from(this.backups.values());\n    return {\n      backups,\n      total: backups.length,\n      totalSize: backups.reduce((sum, b) => sum + b.size, 0)\n    };\n  }\n\n  async deleteBackup(backupId) {\n    const backup = this.backups.get(backupId);\n    if (!backup) {\n      throw new Error(`Backup ${backupId} not found`);\n    }\n\n    this.backups.delete(backupId);\n    return {\n      success: true,\n      deletedSize: backup.size,\n      freedSpace: backup.size\n    };\n  }\n\n  async getBackupMetadata(backupId) {\n    const backup = this.backups.get(backupId);\n    if (!backup) {\n      throw new Error(`Backup ${backupId} not found`);\n    }\n\n    return {\n      id: backupId,\n      ...backup,\n      metadata: {\n        ...backup.metadata,\n        homeAssistantVersion: '2025.7.0',\n        addons: ['ESPHome', 'Node-RED', 'Mosquitto broker'],\n        integrations: ['mqtt', 'homekit', 'google_assistant']\n      }\n    };\n  }\n}\n\ndescribe('BackupManager', () => {\n  let backupManager;\n  let mockExec;\n  let mockFs;\n\n  beforeEach(() => {\n    backupManager = new MockedBackupManager();\n    \n    mockExec = jest.fn();\n    exec.mockImplementation((command, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      mockExec(command, options, callback);\n    });\n\n    mockFs = fs;\n    mockFs.mkdir.mockResolvedValue();\n    mockFs.readdir.mockResolvedValue([]);\n    mockFs.stat.mockResolvedValue({ isFile: () => true, size: 1024 });\n    mockFs.readFile.mockResolvedValue('mock file content');\n    mockFs.writeFile.mockResolvedValue();\n    mockFs.copyFile.mockResolvedValue();\n    mockFs.access.mockResolvedValue();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('initialization', () => {\n    it('should initialize successfully', async () => {\n      await expect(backupManager.initialize()).resolves.toBe(true);\n      expect(backupManager.initialized).toBe(true);\n    });\n  });\n\n  describe('backup creation', () => {\n    beforeEach(async () => {\n      await backupManager.initialize();\n    });\n\n    it('should create pre-deployment backup successfully', async () => {\n      const deploymentId = 'deploy-20250713-101117';\n      \n      const backup = await backupManager.createPreDeploymentBackup(deploymentId);\n\n      expect(backup.id).toMatch(/^backup-\\d+$/);\n      expect(backup.deploymentId).toBe(deploymentId);\n      expect(backup.type).toBe('pre-deployment');\n      expect(backup.path).toContain('.tar.gz');\n      expect(backup.size).toBeGreaterThan(0);\n      expect(backup.metadata).toBeDefined();\n      expect(backup.metadata.configFiles).toBeGreaterThan(0);\n      expect(backup.created).toBeDefined();\n    });\n\n    it('should fail backup creation when not initialized', async () => {\n      const uninitializedManager = new MockedBackupManager();\n      \n      await expect(\n        uninitializedManager.createPreDeploymentBackup('deploy-123')\n      ).rejects.toThrow('Backup manager not initialized');\n    });\n\n    it('should include comprehensive metadata in backup', async () => {\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n\n      expect(backup.metadata.configFiles).toBeGreaterThan(0);\n      expect(backup.metadata.entityStates).toBeGreaterThan(0);\n      expect(backup.metadata.databaseSize).toBeGreaterThan(0);\n    });\n\n    it('should generate unique backup IDs', async () => {\n      const backup1 = await backupManager.createPreDeploymentBackup('deploy-1');\n      const backup2 = await backupManager.createPreDeploymentBackup('deploy-2');\n\n      expect(backup1.id).not.toBe(backup2.id);\n      expect(backup1.path).not.toBe(backup2.path);\n    });\n  });\n\n  describe('backup validation', () => {\n    let backupId;\n\n    beforeEach(async () => {\n      await backupManager.initialize();\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      backupId = backup.id;\n    });\n\n    it('should validate backup successfully', async () => {\n      const validation = await backupManager.validateBackup(backupId);\n\n      expect(validation.valid).toBe(true);\n      expect(validation.integrity).toBe('verified');\n      expect(validation.checksumMatches).toBe(true);\n      expect(validation.readableFiles).toBeGreaterThan(0);\n      expect(validation.corruptedFiles).toBe(0);\n      expect(validation.estimatedRestoreTime).toBeGreaterThan(0);\n    });\n\n    it('should fail validation for non-existent backup', async () => {\n      await expect(\n        backupManager.validateBackup('non-existent-backup')\n      ).rejects.toThrow('Backup non-existent-backup not found');\n    });\n  });\n\n  describe('backup rollback', () => {\n    let backupId;\n\n    beforeEach(async () => {\n      await backupManager.initialize();\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      backupId = backup.id;\n    });\n\n    it('should rollback deployment successfully', async () => {\n      const rollback = await backupManager.rollbackDeployment(backupId);\n\n      expect(rollback.success).toBe(true);\n      expect(rollback.backupId).toBe(backupId);\n      expect(rollback.restoredFiles).toBeGreaterThan(0);\n      expect(rollback.duration).toBeGreaterThan(0);\n      expect(rollback.details.configurationRestored).toBe(true);\n      expect(rollback.details.databaseRestored).toBe(true);\n      expect(rollback.details.entityStatesRestored).toBe(true);\n    });\n\n    it('should fail rollback for non-existent backup', async () => {\n      await expect(\n        backupManager.rollbackDeployment('non-existent-backup')\n      ).rejects.toThrow('Backup non-existent-backup not found');\n    });\n  });\n\n  describe('backup listing', () => {\n    beforeEach(async () => {\n      await backupManager.initialize();\n    });\n\n    it('should list all backups', async () => {\n      // Create multiple backups\n      await backupManager.createPreDeploymentBackup('deploy-1');\n      await backupManager.createPreDeploymentBackup('deploy-2');\n      await backupManager.createPreDeploymentBackup('deploy-3');\n\n      const list = await backupManager.listBackups();\n\n      expect(list.backups).toHaveLength(3);\n      expect(list.total).toBe(3);\n      expect(list.totalSize).toBeGreaterThan(0);\n      \n      // Check that all backups have required fields\n      list.backups.forEach(backup => {\n        expect(backup.id).toBeDefined();\n        expect(backup.type).toBeDefined();\n        expect(backup.created).toBeDefined();\n        expect(backup.size).toBeGreaterThan(0);\n      });\n    });\n\n    it('should return empty list when no backups exist', async () => {\n      const list = await backupManager.listBackups();\n\n      expect(list.backups).toHaveLength(0);\n      expect(list.total).toBe(0);\n      expect(list.totalSize).toBe(0);\n    });\n  });\n\n  describe('backup deletion', () => {\n    let backupId;\n\n    beforeEach(async () => {\n      await backupManager.initialize();\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      backupId = backup.id;\n    });\n\n    it('should delete backup successfully', async () => {\n      const deletion = await backupManager.deleteBackup(backupId);\n\n      expect(deletion.success).toBe(true);\n      expect(deletion.deletedSize).toBeGreaterThan(0);\n      expect(deletion.freedSpace).toBeGreaterThan(0);\n\n      // Verify backup is actually deleted\n      await expect(\n        backupManager.validateBackup(backupId)\n      ).rejects.toThrow('not found');\n    });\n\n    it('should fail deletion for non-existent backup', async () => {\n      await expect(\n        backupManager.deleteBackup('non-existent-backup')\n      ).rejects.toThrow('Backup non-existent-backup not found');\n    });\n  });\n\n  describe('backup metadata', () => {\n    let backupId;\n\n    beforeEach(async () => {\n      await backupManager.initialize();\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      backupId = backup.id;\n    });\n\n    it('should retrieve comprehensive backup metadata', async () => {\n      const metadata = await backupManager.getBackupMetadata(backupId);\n\n      expect(metadata.id).toBe(backupId);\n      expect(metadata.metadata.homeAssistantVersion).toBeDefined();\n      expect(metadata.metadata.configFiles).toBeGreaterThan(0);\n      expect(metadata.metadata.entityStates).toBeGreaterThan(0);\n      expect(metadata.metadata.addons).toBeInstanceOf(Array);\n      expect(metadata.metadata.integrations).toBeInstanceOf(Array);\n      expect(metadata.metadata.addons.length).toBeGreaterThan(0);\n      expect(metadata.metadata.integrations.length).toBeGreaterThan(0);\n    });\n\n    it('should fail metadata retrieval for non-existent backup', async () => {\n      await expect(\n        backupManager.getBackupMetadata('non-existent-backup')\n      ).rejects.toThrow('Backup non-existent-backup not found');\n    });\n  });\n\n  describe('error handling', () => {\n    beforeEach(async () => {\n      await backupManager.initialize();\n    });\n\n    it('should handle backup creation errors gracefully', async () => {\n      // Mock file system error\n      const originalCreate = backupManager.createPreDeploymentBackup;\n      backupManager.createPreDeploymentBackup = jest.fn().mockRejectedValue(\n        new Error('Insufficient disk space')\n      );\n\n      await expect(\n        backupManager.createPreDeploymentBackup('deploy-test')\n      ).rejects.toThrow('Insufficient disk space');\n    });\n\n    it('should handle validation errors gracefully', async () => {\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      \n      // Mock validation error\n      const originalValidate = backupManager.validateBackup;\n      backupManager.validateBackup = jest.fn().mockRejectedValue(\n        new Error('Backup file corrupted')\n      );\n\n      await expect(\n        backupManager.validateBackup(backup.id)\n      ).rejects.toThrow('Backup file corrupted');\n    });\n\n    it('should handle rollback errors gracefully', async () => {\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      \n      // Mock rollback error\n      const originalRollback = backupManager.rollbackDeployment;\n      backupManager.rollbackDeployment = jest.fn().mockRejectedValue(\n        new Error('Configuration files locked')\n      );\n\n      await expect(\n        backupManager.rollbackDeployment(backup.id)\n      ).rejects.toThrow('Configuration files locked');\n    });\n  });\n\n  describe('backup integrity checks', () => {\n    beforeEach(async () => {\n      await backupManager.initialize();\n    });\n\n    it('should verify backup integrity during creation', async () => {\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      \n      // The backup should have been created with integrity information\n      expect(backup.metadata).toBeDefined();\n      expect(backup.size).toBeGreaterThan(0);\n      expect(backup.path).toBeDefined();\n    });\n\n    it('should detect corrupted backups during validation', async () => {\n      const backup = await backupManager.createPreDeploymentBackup('deploy-test');\n      \n      // Mock a corrupted backup scenario\n      const originalValidate = backupManager.validateBackup;\n      backupManager.validateBackup = jest.fn().mockResolvedValue({\n        valid: false,\n        integrity: 'corrupted',\n        checksumMatches: false,\n        readableFiles: 100,\n        corruptedFiles: 56,\n        errors: [\n          'Checksum mismatch for configuration.yaml',\n          'Database file appears truncated'\n        ]\n      });\n\n      const validation = await backupManager.validateBackup(backup.id);\n      \n      expect(validation.valid).toBe(false);\n      expect(validation.integrity).toBe('corrupted');\n      expect(validation.checksumMatches).toBe(false);\n      expect(validation.corruptedFiles).toBeGreaterThan(0);\n      expect(validation.errors).toBeInstanceOf(Array);\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}