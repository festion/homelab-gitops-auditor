{"version":3,"names":["MockMCPCoordinator","constructor","deployConfiguration","jest","fn","transferFile","createBackup","rollbackDeployment","getAllStatus","getHealthStatus","checkHealth","reconnect","initialize","shutdown","_deploymentInProgress","_healthStatus","Map","_connectionStatus","_initializeDefaults","set","status","lastCheck","Date","connectedAt","mockDeploymentSuccess","mockResolvedValue","success","deploymentId","filesDeployed","duration","state","setTimeout","mockDeploymentFailure","errorMessage","mockRejectedValue","Error","mockSlowDeployment","mockImplementation","Promise","resolve","mockTransferSuccess","transferred","size","mockTransferFailure","mockBackupSuccess","backupId","now","path","mockBackupFailure","mockHealthyStatus","mockReturnValue","networkFs","connection","health","github","serverName","get","mockUnhealthyStatus","lastError","mockConnectionSuccess","mockConnectionFailure","mockRollbackSuccess","rolledBack","restoredFiles","isDeploymentInProgress","setServerHealth","error","reset","clearAllMocks","clear","module","exports"],"sources":["mcp-coordinator.mock.js"],"sourcesContent":["/**\n * Mock implementation for MCP Coordinator\n * Used to isolate deployment service and other components during testing\n */\nclass MockMCPCoordinator {\n  constructor() {\n    this.deployConfiguration = jest.fn();\n    this.transferFile = jest.fn();\n    this.createBackup = jest.fn();\n    this.rollbackDeployment = jest.fn();\n    this.getAllStatus = jest.fn();\n    this.getHealthStatus = jest.fn();\n    this.checkHealth = jest.fn();\n    this.reconnect = jest.fn();\n    this.initialize = jest.fn();\n    this.shutdown = jest.fn();\n    \n    // Internal state tracking\n    this._deploymentInProgress = false;\n    this._healthStatus = new Map();\n    this._connectionStatus = new Map();\n    \n    // Initialize default states\n    this._initializeDefaults();\n  }\n\n  _initializeDefaults() {\n    this._healthStatus.set('networkFs', { status: 'healthy', lastCheck: new Date() });\n    this._healthStatus.set('github', { status: 'healthy', lastCheck: new Date() });\n    this._connectionStatus.set('networkFs', { status: 'connected', connectedAt: new Date() });\n    this._connectionStatus.set('github', { status: 'connected', connectedAt: new Date() });\n  }\n\n  // Mock successful deployment\n  mockDeploymentSuccess() {\n    this.deployConfiguration.mockResolvedValue({\n      success: true,\n      deploymentId: 'deploy-20250713-101117',\n      filesDeployed: 15,\n      duration: 45000,\n      state: 'completed'\n    });\n    this._deploymentInProgress = true;\n    setTimeout(() => { this._deploymentInProgress = false; }, 100);\n  }\n\n  // Mock deployment failure\n  mockDeploymentFailure(errorMessage = 'Configuration validation error') {\n    this.deployConfiguration.mockRejectedValue(\n      new Error(`Deployment failed: ${errorMessage}`)\n    );\n  }\n\n  // Mock slow deployment for concurrency testing\n  mockSlowDeployment(duration = 5000) {\n    this.deployConfiguration.mockImplementation(() => {\n      this._deploymentInProgress = true;\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          this._deploymentInProgress = false;\n          resolve({\n            success: true,\n            deploymentId: 'deploy-20250713-101117',\n            filesDeployed: 15,\n            duration,\n            state: 'completed'\n          });\n        }, duration);\n      });\n    });\n  }\n\n  // Mock successful file transfer\n  mockTransferSuccess() {\n    this.transferFile.mockResolvedValue({\n      success: true,\n      transferred: true,\n      size: 1024\n    });\n  }\n\n  // Mock file transfer failure with retry logic\n  mockTransferFailure() {\n    this.transferFile.mockRejectedValue(\n      new Error('File transfer failed: Network timeout')\n    );\n  }\n\n  // Mock successful backup creation\n  mockBackupSuccess() {\n    this.createBackup.mockResolvedValue({\n      success: true,\n      backupId: `backup-${Date.now()}`,\n      path: '/backup/config-backup.tar.gz',\n      size: 2048576\n    });\n  }\n\n  // Mock backup failure\n  mockBackupFailure(errorMessage = 'Insufficient disk space') {\n    this.createBackup.mockRejectedValue(\n      new Error(`Backup failed: ${errorMessage}`)\n    );\n  }\n\n  // Mock healthy server status\n  mockHealthyStatus() {\n    this.getAllStatus.mockReturnValue({\n      networkFs: {\n        connection: { status: 'connected', connectedAt: new Date() },\n        health: { status: 'healthy', lastCheck: new Date() }\n      },\n      github: {\n        connection: { status: 'connected', connectedAt: new Date() },\n        health: { status: 'healthy', lastCheck: new Date() }\n      }\n    });\n\n    this.getHealthStatus.mockImplementation((serverName) => {\n      return this._healthStatus.get(serverName) || { status: 'unknown' };\n    });\n\n    this.checkHealth.mockResolvedValue(true);\n  }\n\n  // Mock unhealthy server status\n  mockUnhealthyStatus() {\n    this._healthStatus.set('networkFs', { \n      status: 'unhealthy', \n      lastError: 'Connection timeout',\n      lastCheck: new Date()\n    });\n\n    this.getAllStatus.mockReturnValue({\n      networkFs: {\n        connection: { status: 'failed', lastError: 'Connection timeout' },\n        health: { status: 'unhealthy', lastError: 'Connection timeout' }\n      },\n      github: {\n        connection: { status: 'connected', connectedAt: new Date() },\n        health: { status: 'healthy', lastCheck: new Date() }\n      }\n    });\n\n    this.getHealthStatus.mockImplementation((serverName) => {\n      return this._healthStatus.get(serverName) || { status: 'unknown' };\n    });\n\n    this.checkHealth.mockResolvedValue(false);\n  }\n\n  // Mock connection success\n  mockConnectionSuccess() {\n    this.initialize.mockResolvedValue(true);\n  }\n\n  // Mock connection failure\n  mockConnectionFailure(serverName = 'Network-FS') {\n    this.initialize.mockRejectedValue(\n      new Error(`Failed to connect to ${serverName} MCP server`)\n    );\n  }\n\n  // Mock rollback success\n  mockRollbackSuccess() {\n    this.rollbackDeployment.mockResolvedValue({\n      success: true,\n      rolledBack: true,\n      restoredFiles: 12\n    });\n  }\n\n  // Utility methods for test state management\n  isDeploymentInProgress() {\n    return this._deploymentInProgress;\n  }\n\n  setServerHealth(serverName, status, error = null) {\n    this._healthStatus.set(serverName, {\n      status,\n      lastError: error,\n      lastCheck: new Date()\n    });\n  }\n\n  // Reset all mocks to default state\n  reset() {\n    jest.clearAllMocks();\n    this._deploymentInProgress = false;\n    this._healthStatus.clear();\n    this._connectionStatus.clear();\n    this._initializeDefaults();\n  }\n}\n\nmodule.exports = { MockMCPCoordinator };"],"mappings":"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","ignoreList":[]}