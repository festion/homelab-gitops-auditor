{"version":3,"names":["spawn","exec","require","promisify","EventEmitter","fs","promises","path","execAsync","MCPCoordinator","constructor","options","networkFsWrapper","githubWrapper","timeout","logger","connections","Map","healthCheckInterval","maxRetries","connectionStates","DISCONNECTED","CONNECTING","CONNECTED","ERROR","initialize","info","initializeConnection","startHealthChecks","error","message","stack","name","wrapperPath","warn","exists","access","then","catch","Error","connection","state","lastHealthCheck","lastError","retryCount","process","set","testConnection","get","testCommand","buildTestCommand","result","executeCommand","Date","toISOString","debug","emit","connectionName","command","commandId","now","Math","random","toString","substr","Array","isArray","join","runCommand","duration","includes","startTime","Promise","resolve","reject","commandArgs","stdio","stdout","stderr","timeoutId","setTimeout","kill","on","data","code","clearTimeout","trim","exitCode","networkFsOperation","operation","params","commands","shareName","filePath","encoding","content","directoryPath","filter","Boolean","githubOperation","query","owner","repo","title","body","ref","branch","sha","author","head","base","deploymentOperations","deploymentParams","operations","BackupManager","preDeploymentBackup","createBackup","backupManager","createPreDeploymentBackup","deploymentId","push","backupId","backupPath","size","backupError","requireBackup","repository","currentConfig","split","latestCommits","legacyBackupPath","configFiles","getConfigurationFiles","file","fileContent","success","deployedFiles","length","repoContents","contents","JSON","parse","configExtensions","configDirectories","item","type","hasConfigExtension","some","ext","endsWith","dirFiles","getDirectoryFiles","dirPath","dirContents","files","subFiles","rollbackOperations","RecoveryService","recoveryService","rollbackResult","performControlledRollback","validateBefore","createBackupBefore","healthCheckAfter","rolledBackToBackup","method","restoredFiles","restoredSize","currentStateBackup","recoveryError","backupFiles","healthCheckTimer","clearInterval","setInterval","performHealthChecks","interval","checkHealth","health","status","hasUnhealthyConnections","Object","values","conn","getConnectionStatus","getAllConnections","cleanup","killed","clear","removeAllListeners","module","exports"],"sources":["mcp-coordinator.js"],"sourcesContent":["const { spawn, exec } = require('child_process');\nconst { promisify } = require('util');\nconst { EventEmitter } = require('events');\nconst fs = require('fs').promises;\nconst path = require('path');\n\nconst execAsync = promisify(exec);\n\nclass MCPCoordinator extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    \n    this.networkFsWrapper = options.networkFsWrapper;\n    this.githubWrapper = options.githubWrapper;\n    this.timeout = options.timeout || 30000;\n    this.logger = options.logger;\n    \n    this.connections = new Map();\n    this.healthCheckInterval = options.healthCheckInterval || 60000; // 1 minute\n    this.maxRetries = options.maxRetries || 3;\n    \n    this.connectionStates = {\n      DISCONNECTED: 'disconnected',\n      CONNECTING: 'connecting',\n      CONNECTED: 'connected',\n      ERROR: 'error'\n    };\n  }\n\n  async initialize() {\n    try {\n      this.logger?.info('Initializing MCP coordinator');\n      \n      await this.initializeConnection('networkFs', this.networkFsWrapper);\n      await this.initializeConnection('github', this.githubWrapper);\n      \n      this.startHealthChecks();\n      \n      this.logger?.info('MCP coordinator initialized successfully');\n      return true;\n      \n    } catch (error) {\n      this.logger?.error('Failed to initialize MCP coordinator', {\n        error: error.message,\n        stack: error.stack\n      });\n      throw error;\n    }\n  }\n\n  async initializeConnection(name, wrapperPath) {\n    if (!wrapperPath) {\n      this.logger?.warn(`No wrapper path provided for ${name}, skipping initialization`);\n      return;\n    }\n    \n    try {\n      const exists = await fs.access(wrapperPath).then(() => true).catch(() => false);\n      if (!exists) {\n        throw new Error(`Wrapper script not found: ${wrapperPath}`);\n      }\n      \n      const connection = {\n        name,\n        wrapperPath,\n        state: this.connectionStates.DISCONNECTED,\n        lastHealthCheck: null,\n        lastError: null,\n        retryCount: 0,\n        process: null\n      };\n      \n      this.connections.set(name, connection);\n      await this.testConnection(name);\n      \n      this.logger?.info(`MCP connection initialized`, { name, wrapperPath });\n      \n    } catch (error) {\n      this.logger?.error(`Failed to initialize MCP connection`, {\n        name,\n        wrapperPath,\n        error: error.message\n      });\n      \n      this.connections.set(name, {\n        name,\n        wrapperPath,\n        state: this.connectionStates.ERROR,\n        lastError: error.message,\n        retryCount: 0\n      });\n    }\n  }\n\n  async testConnection(name) {\n    const connection = this.connections.get(name);\n    if (!connection) {\n      throw new Error(`Connection ${name} not found`);\n    }\n    \n    connection.state = this.connectionStates.CONNECTING;\n    \n    try {\n      const testCommand = this.buildTestCommand(name);\n      const result = await this.executeCommand(name, testCommand, { timeout: 10000 });\n      \n      connection.state = this.connectionStates.CONNECTED;\n      connection.lastHealthCheck = new Date().toISOString();\n      connection.lastError = null;\n      connection.retryCount = 0;\n      \n      this.logger?.debug(`MCP connection test successful`, { name });\n      this.emit('connection_established', name);\n      \n      return result;\n      \n    } catch (error) {\n      connection.state = this.connectionStates.ERROR;\n      connection.lastError = error.message;\n      connection.retryCount++;\n      \n      this.logger?.error(`MCP connection test failed`, {\n        name,\n        error: error.message,\n        retryCount: connection.retryCount\n      });\n      \n      this.emit('connection_failed', { name, error: error.message });\n      throw error;\n    }\n  }\n\n  buildTestCommand(name) {\n    switch (name) {\n      case 'networkFs':\n        return ['list_allowed_directories'];\n      case 'github':\n        return ['get_me'];\n      default:\n        return ['help'];\n    }\n  }\n\n  async executeCommand(connectionName, command, options = {}) {\n    const connection = this.connections.get(connectionName);\n    if (!connection) {\n      throw new Error(`Connection ${connectionName} not found`);\n    }\n    \n    if (connection.state !== this.connectionStates.CONNECTED) {\n      await this.testConnection(connectionName);\n    }\n    \n    const timeout = options.timeout || this.timeout;\n    const commandId = `${connectionName}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    \n    this.logger?.debug('Executing MCP command', {\n      connectionName,\n      command: Array.isArray(command) ? command.join(' ') : command,\n      commandId,\n      timeout\n    });\n    \n    try {\n      const result = await this.runCommand(connection, command, timeout, commandId);\n      \n      this.logger?.debug('MCP command completed successfully', {\n        connectionName,\n        commandId,\n        duration: result.duration\n      });\n      \n      return result;\n      \n    } catch (error) {\n      this.logger?.error('MCP command failed', {\n        connectionName,\n        commandId,\n        error: error.message,\n        command: Array.isArray(command) ? command.join(' ') : command\n      });\n      \n      connection.lastError = error.message;\n      \n      if (error.message.includes('timeout') || error.message.includes('ECONNRESET')) {\n        connection.state = this.connectionStates.ERROR;\n        this.emit('connection_lost', connectionName);\n      }\n      \n      throw error;\n    }\n  }\n\n  async runCommand(connection, command, timeout, commandId) {\n    const startTime = Date.now();\n    \n    return new Promise((resolve, reject) => {\n      const commandArgs = Array.isArray(command) ? command : [command];\n      const process = spawn('bash', [connection.wrapperPath, ...commandArgs], {\n        stdio: ['pipe', 'pipe', 'pipe'],\n        timeout\n      });\n      \n      let stdout = '';\n      let stderr = '';\n      let timeoutId;\n      \n      // Set up timeout\n      timeoutId = setTimeout(() => {\n        process.kill('SIGTERM');\n        reject(new Error(`Command timeout after ${timeout}ms`));\n      }, timeout);\n      \n      process.stdout.on('data', (data) => {\n        stdout += data.toString();\n      });\n      \n      process.stderr.on('data', (data) => {\n        stderr += data.toString();\n      });\n      \n      process.on('close', (code) => {\n        clearTimeout(timeoutId);\n        \n        const duration = Date.now() - startTime;\n        \n        if (code === 0) {\n          resolve({\n            stdout: stdout.trim(),\n            stderr: stderr.trim(),\n            exitCode: code,\n            duration,\n            commandId\n          });\n        } else {\n          reject(new Error(`Command failed with exit code ${code}: ${stderr || stdout}`));\n        }\n      });\n      \n      process.on('error', (error) => {\n        clearTimeout(timeoutId);\n        reject(new Error(`Process error: ${error.message}`));\n      });\n    });\n  }\n\n  async networkFsOperation(operation, params = {}) {\n    const commands = {\n      'list_directory': ['list_network_directory', params.shareName, params.path || ''],\n      'read_file': ['read_network_file', params.shareName, params.filePath, params.encoding || 'utf-8'],\n      'write_file': ['write_network_file', params.shareName, params.filePath, params.content, params.encoding || 'utf-8'],\n      'delete_file': ['delete_network_file', params.shareName, params.filePath],\n      'create_directory': ['create_network_directory', params.shareName, params.directoryPath],\n      'get_file_info': ['get_network_file_info', params.shareName, params.path],\n      'get_share_info': ['get_share_info', params.shareName || '']\n    };\n    \n    const command = commands[operation];\n    if (!command) {\n      throw new Error(`Unknown network FS operation: ${operation}`);\n    }\n    \n    return await this.executeCommand('networkFs', command.filter(Boolean));\n  }\n\n  async githubOperation(operation, params = {}) {\n    const commands = {\n      'get_me': ['get_me'],\n      'list_repositories': ['search_repositories', params.query || ''],\n      'get_repository': ['get_repository', params.owner, params.repo],\n      'list_issues': ['list_issues', params.owner, params.repo],\n      'create_issue': ['create_issue', params.owner, params.repo, params.title, params.body || ''],\n      'get_file_contents': ['get_file_contents', params.owner, params.repo, params.path, params.ref || ''],\n      'create_or_update_file': ['create_or_update_file', params.owner, params.repo, params.path, params.content, params.message, params.branch, params.sha || ''],\n      'list_commits': ['list_commits', params.owner, params.repo, params.sha || '', params.author || ''],\n      'create_pull_request': ['create_pull_request', params.owner, params.repo, params.title, params.head, params.base, params.body || '']\n    };\n    \n    const command = commands[operation];\n    if (!command) {\n      throw new Error(`Unknown GitHub operation: ${operation}`);\n    }\n    \n    return await this.executeCommand('github', command.filter(Boolean));\n  }\n\n  async deploymentOperations(deploymentParams) {\n    const operations = [];\n    \n    try {\n      // Import backup manager if needed\n      const { BackupManager } = require('../backup/backup-manager');\n      \n      // 1. Create pre-deployment backup if backup manager is available\n      let preDeploymentBackup = null;\n      if (deploymentParams.createBackup !== false) {\n        try {\n          const backupManager = new BackupManager();\n          await backupManager.initialize();\n          \n          preDeploymentBackup = await backupManager.createPreDeploymentBackup(\n            deploymentParams.deploymentId || `deployment-${Date.now()}`\n          );\n          \n          operations.push({\n            operation: 'create_pre_deployment_backup',\n            result: 'success',\n            backupId: preDeploymentBackup.backupId,\n            backupPath: preDeploymentBackup.path\n          });\n          \n          this.logger?.info('Pre-deployment backup created', {\n            backupId: preDeploymentBackup.backupId,\n            size: preDeploymentBackup.size\n          });\n          \n        } catch (backupError) {\n          this.logger?.warn('Failed to create pre-deployment backup', { \n            error: backupError.message \n          });\n          \n          operations.push({\n            operation: 'create_pre_deployment_backup',\n            result: 'failed',\n            error: backupError.message\n          });\n          \n          // Continue with deployment unless backup is required\n          if (deploymentParams.requireBackup) {\n            throw new Error(`Pre-deployment backup failed: ${backupError.message}`);\n          }\n        }\n      }\n      \n      // 2. Get current configuration from target server\n      this.logger?.info('Fetching current configuration', { repository: deploymentParams.repository });\n      \n      const currentConfig = await this.networkFsOperation('list_directory', {\n        shareName: 'home-assistant',\n        path: '/config'\n      });\n      \n      operations.push({\n        operation: 'fetch_current_config',\n        result: 'success',\n        data: currentConfig\n      });\n      \n      // 3. Get latest changes from GitHub\n      this.logger?.info('Fetching latest changes from GitHub', {\n        repository: deploymentParams.repository,\n        branch: deploymentParams.branch\n      });\n      \n      const [owner, repo] = deploymentParams.repository.split('/');\n      const latestCommits = await this.githubOperation('list_commits', {\n        owner,\n        repo,\n        sha: deploymentParams.branch\n      });\n      \n      operations.push({\n        operation: 'fetch_github_changes',\n        result: 'success',\n        data: latestCommits\n      });\n      \n      // 4. Create legacy backup for compatibility (if no backup manager)\n      let legacyBackupPath = null;\n      if (!preDeploymentBackup) {\n        legacyBackupPath = `/config/backups/backup-${Date.now()}`;\n        await this.networkFsOperation('create_directory', {\n          shareName: 'home-assistant',\n          directoryPath: legacyBackupPath\n        });\n        \n        operations.push({\n          operation: 'create_legacy_backup',\n          result: 'success',\n          backupPath: legacyBackupPath\n        });\n      }\n      \n      // 5. Download and apply new configuration files\n      const configFiles = await this.getConfigurationFiles(owner, repo, deploymentParams.branch);\n      \n      for (const file of configFiles) {\n        const fileContent = await this.githubOperation('get_file_contents', {\n          owner,\n          repo,\n          path: file.path,\n          ref: deploymentParams.branch\n        });\n        \n        await this.networkFsOperation('write_file', {\n          shareName: 'home-assistant',\n          filePath: `/config/${file.path}`,\n          content: fileContent.stdout\n        });\n        \n        operations.push({\n          operation: 'deploy_file',\n          result: 'success',\n          file: file.path\n        });\n      }\n      \n      return {\n        success: true,\n        operations,\n        backupPath: preDeploymentBackup?.path || legacyBackupPath,\n        backupId: preDeploymentBackup?.backupId,\n        deployedFiles: configFiles.length,\n        preDeploymentBackup: preDeploymentBackup\n      };\n      \n    } catch (error) {\n      this.logger?.error('Deployment operations failed', {\n        error: error.message,\n        operations: operations.length\n      });\n      \n      operations.push({\n        operation: 'deployment',\n        result: 'failed',\n        error: error.message\n      });\n      \n      return {\n        success: false,\n        error: error.message,\n        operations\n      };\n    }\n  }\n\n  async getConfigurationFiles(owner, repo, branch = 'main') {\n    try {\n      const repoContents = await this.githubOperation('get_file_contents', {\n        owner,\n        repo,\n        path: '',\n        ref: branch\n      });\n      \n      const contents = JSON.parse(repoContents.stdout);\n      const configFiles = [];\n      \n      const configExtensions = ['.yaml', '.yml', '.json'];\n      const configDirectories = ['packages', 'lovelace', 'integrations'];\n      \n      for (const item of contents) {\n        if (item.type === 'file') {\n          const hasConfigExtension = configExtensions.some(ext => item.name.endsWith(ext));\n          if (hasConfigExtension) {\n            configFiles.push({\n              path: item.path,\n              name: item.name,\n              size: item.size,\n              sha: item.sha\n            });\n          }\n        } else if (item.type === 'dir' && configDirectories.includes(item.name)) {\n          const dirFiles = await this.getDirectoryFiles(owner, repo, item.path, branch);\n          configFiles.push(...dirFiles);\n        }\n      }\n      \n      return configFiles;\n      \n    } catch (error) {\n      this.logger?.error('Failed to get configuration files', {\n        owner,\n        repo,\n        branch,\n        error: error.message\n      });\n      throw error;\n    }\n  }\n\n  async getDirectoryFiles(owner, repo, dirPath, branch) {\n    try {\n      const dirContents = await this.githubOperation('get_file_contents', {\n        owner,\n        repo,\n        path: dirPath,\n        ref: branch\n      });\n      \n      const contents = JSON.parse(dirContents.stdout);\n      const files = [];\n      \n      for (const item of contents) {\n        if (item.type === 'file') {\n          files.push({\n            path: item.path,\n            name: item.name,\n            size: item.size,\n            sha: item.sha\n          });\n        } else if (item.type === 'dir') {\n          const subFiles = await this.getDirectoryFiles(owner, repo, item.path, branch);\n          files.push(...subFiles);\n        }\n      }\n      \n      return files;\n      \n    } catch (error) {\n      this.logger?.error('Failed to get directory files', {\n        dirPath,\n        error: error.message\n      });\n      return [];\n    }\n  }\n\n  async rollbackOperations(backupPath, options = {}) {\n    try {\n      this.logger?.info('Starting rollback operations', { backupPath, options });\n      \n      // Try to use BackupManager for rollback if deploymentId is provided\n      if (options.deploymentId) {\n        try {\n          const { RecoveryService } = require('../backup/recovery-service');\n          const recoveryService = new RecoveryService();\n          await recoveryService.initialize();\n          \n          const rollbackResult = await recoveryService.performControlledRollback(\n            options.deploymentId,\n            {\n              validateBefore: options.validateBefore !== false,\n              createBackupBefore: options.createBackupBefore !== false,\n              healthCheckAfter: options.healthCheckAfter !== false\n            }\n          );\n          \n          this.logger?.info('Rollback completed using RecoveryService', {\n            deploymentId: options.deploymentId,\n            backupId: rollbackResult.rolledBackToBackup\n          });\n          \n          return {\n            success: true,\n            method: 'recovery-service',\n            deploymentId: options.deploymentId,\n            backupId: rollbackResult.rolledBackToBackup,\n            restoredFiles: rollbackResult.restoredFiles,\n            restoredSize: rollbackResult.restoredSize,\n            currentStateBackup: rollbackResult.currentStateBackup\n          };\n          \n        } catch (recoveryError) {\n          this.logger?.warn('RecoveryService rollback failed, falling back to legacy method', {\n            error: recoveryError.message\n          });\n          // Fall through to legacy rollback method\n        }\n      }\n      \n      // Legacy rollback method for backward compatibility\n      this.logger?.info('Using legacy rollback method');\n      \n      // List backup files\n      const backupFiles = await this.networkFsOperation('list_directory', {\n        shareName: 'home-assistant',\n        path: backupPath\n      });\n      \n      // Restore each file\n      const restoredFiles = [];\n      for (const file of JSON.parse(backupFiles.stdout)) {\n        if (file.type === 'file') {\n          const fileContent = await this.networkFsOperation('read_file', {\n            shareName: 'home-assistant',\n            filePath: `${backupPath}/${file.name}`\n          });\n          \n          await this.networkFsOperation('write_file', {\n            shareName: 'home-assistant',\n            filePath: `/config/${file.name}`,\n            content: fileContent.stdout\n          });\n          \n          restoredFiles.push(file.name);\n        }\n      }\n      \n      return {\n        success: true,\n        method: 'legacy',\n        restoredFiles: restoredFiles.length,\n        files: restoredFiles,\n        backupPath\n      };\n      \n    } catch (error) {\n      this.logger?.error('Rollback operations failed', {\n        backupPath,\n        options,\n        error: error.message\n      });\n      \n      return {\n        success: false,\n        error: error.message,\n        backupPath,\n        method: 'failed'\n      };\n    }\n  }\n\n  startHealthChecks() {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n    }\n    \n    this.healthCheckTimer = setInterval(async () => {\n      await this.performHealthChecks();\n    }, this.healthCheckInterval);\n    \n    this.logger?.debug('Health checks started', { interval: this.healthCheckInterval });\n  }\n\n  async performHealthChecks() {\n    for (const [name, connection] of this.connections) {\n      try {\n        if (connection.state === this.connectionStates.CONNECTED) {\n          await this.testConnection(name);\n        } else if (connection.state === this.connectionStates.ERROR && connection.retryCount < this.maxRetries) {\n          this.logger?.info('Attempting to reconnect MCP connection', {\n            name,\n            retryCount: connection.retryCount,\n            maxRetries: this.maxRetries\n          });\n          \n          await this.testConnection(name);\n        }\n      } catch (error) {\n        this.logger?.debug('Health check failed', {\n          name,\n          error: error.message\n        });\n      }\n    }\n  }\n\n  async checkHealth() {\n    const health = {\n      status: 'healthy',\n      connections: {}\n    };\n    \n    for (const [name, connection] of this.connections) {\n      health.connections[name] = {\n        status: connection.state,\n        lastHealthCheck: connection.lastHealthCheck,\n        lastError: connection.lastError,\n        retryCount: connection.retryCount,\n        wrapperPath: connection.wrapperPath\n      };\n    }\n    \n    const hasUnhealthyConnections = Object.values(health.connections).some(\n      conn => conn.status === this.connectionStates.ERROR\n    );\n    \n    if (hasUnhealthyConnections) {\n      health.status = 'degraded';\n    }\n    \n    return health;\n  }\n\n  getConnectionStatus(name) {\n    const connection = this.connections.get(name);\n    return connection ? connection.state : 'not_found';\n  }\n\n  getAllConnections() {\n    const connections = {};\n    for (const [name, connection] of this.connections) {\n      connections[name] = {\n        name: connection.name,\n        state: connection.state,\n        lastHealthCheck: connection.lastHealthCheck,\n        lastError: connection.lastError,\n        retryCount: connection.retryCount\n      };\n    }\n    return connections;\n  }\n\n  async cleanup() {\n    if (this.healthCheckTimer) {\n      clearInterval(this.healthCheckTimer);\n      this.healthCheckTimer = null;\n    }\n    \n    // Close any active processes\n    for (const [name, connection] of this.connections) {\n      if (connection.process && !connection.process.killed) {\n        connection.process.kill('SIGTERM');\n      }\n    }\n    \n    this.connections.clear();\n    this.removeAllListeners();\n    \n    this.logger?.info('MCP coordinator cleaned up');\n  }\n}\n\nmodule.exports = MCPCoordinator;"],"mappings":"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","ignoreList":[]}