{"version":3,"names":["_getJestObj","mock","promises","access","jest","fn","require","MCPCoordinator","DeploymentFixtures","spawn","fs","EventEmitter","describe","coordinator","mockLogger","mockProcess","beforeEach","info","error","warn","debug","stdout","stderr","kill","mockReturnValue","mockResolvedValue","networkFsWrapper","githubWrapper","timeout","logger","healthCheckInterval","maxRetries","afterEach","clearAllMocks","healthCheckTimer","clearInterval","it","setTimeout","emit","JSON","stringify","success","expect","initialize","resolves","toBe","toHaveBeenCalledWith","connections","size","has","mockRejectedValue","Error","rejects","toThrow","objectContaining","stringContaining","coordinatorWithMissingPaths","networkFsConnection","get","state","connectionStates","ERROR","lastError","toContain","set","name","wrapperPath","DISCONNECTED","lastHealthCheck","retryCount","process","directories","result","testConnection","exitCode","connection","CONNECTED","toBeTruthy","fastTimeout","Date","toISOString","expectedOutput","files","executeCommand","commandId","duration","toBeGreaterThan","stdio","callCount","toHaveBeenCalledTimes","errorPromise","connectionLostPromise","Promise","resolve","once","expectedFiles","type","networkFsOperation","shareName","path","any","Object","fileContent","filePath","encoding","content","directoryPath","userInfo","login","id","githubOperation","owner","repo","ref","commits","sha","message","issueData","number","title","body","deploymentParams","repository","branch","deploymentId","createBackup","response","deploymentOperations","operations","toHaveLength","deployedFiles","backupPath","backupOperation","find","op","operation","toBeUndefined","health","checkHealth","status","toHaveProperty","networkFs","github","spyOn","startHealthChecks","performHealthChecks","toHaveBeenCalled","not","getConnectionStatus","getAllConnections","toEqual","setInterval","killed","cleanup","toBeNull","eventPromise","eventData"],"sources":["mcp-coordinator.test.js"],"sourcesContent":["/**\n * Unit tests for MCP Coordinator\n * Tests all MCP server coordination and communication functionality\n */\n\nconst MCPCoordinator = require('../../../scripts/services/mcp-coordinator');\nconst { DeploymentFixtures } = require('../../fixtures/deployment-data');\nconst { spawn } = require('child_process');\nconst fs = require('fs').promises;\nconst EventEmitter = require('events');\n\n// Mock child_process and fs\njest.mock('child_process');\njest.mock('fs', () => ({\n  promises: {\n    access: jest.fn()\n  }\n}));\n\ndescribe('MCPCoordinator', () => {\n  let coordinator;\n  let mockLogger;\n  let mockProcess;\n\n  beforeEach(() => {\n    mockLogger = {\n      info: jest.fn(),\n      error: jest.fn(),\n      warn: jest.fn(),\n      debug: jest.fn()\n    };\n\n    mockProcess = new EventEmitter();\n    mockProcess.stdout = new EventEmitter();\n    mockProcess.stderr = new EventEmitter();\n    mockProcess.kill = jest.fn();\n\n    spawn.mockReturnValue(mockProcess);\n    fs.access.mockResolvedValue(true);\n\n    coordinator = new MCPCoordinator({\n      networkFsWrapper: '/test/network-mcp-wrapper.sh',\n      githubWrapper: '/test/github-wrapper.sh',\n      timeout: 30000,\n      logger: mockLogger,\n      healthCheckInterval: 60000,\n      maxRetries: 3\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    if (coordinator.healthCheckTimer) {\n      clearInterval(coordinator.healthCheckTimer);\n    }\n  });\n\n  describe('initialization', () => {\n    it('should initialize successfully with valid wrapper paths', async () => {\n      // Mock successful connection tests\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify({ success: true }));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      await expect(coordinator.initialize()).resolves.toBe(true);\n\n      expect(fs.access).toHaveBeenCalledWith('/test/network-mcp-wrapper.sh');\n      expect(fs.access).toHaveBeenCalledWith('/test/github-wrapper.sh');\n      expect(coordinator.connections.size).toBe(2);\n      expect(coordinator.connections.has('networkFs')).toBe(true);\n      expect(coordinator.connections.has('github')).toBe(true);\n      expect(mockLogger.info).toHaveBeenCalledWith('MCP coordinator initialized successfully');\n    });\n\n    it('should fail initialization when wrapper scripts do not exist', async () => {\n      fs.access.mockRejectedValue(new Error('ENOENT: no such file or directory'));\n\n      await expect(coordinator.initialize()).rejects.toThrow();\n\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Failed to initialize MCP coordinator',\n        expect.objectContaining({\n          error: expect.stringContaining('ENOENT')\n        })\n      );\n    });\n\n    it('should handle missing wrapper paths gracefully', async () => {\n      const coordinatorWithMissingPaths = new MCPCoordinator({\n        networkFsWrapper: null,\n        githubWrapper: '/test/github-wrapper.sh',\n        logger: mockLogger\n      });\n\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify({ success: true }));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      await coordinatorWithMissingPaths.initialize();\n\n      expect(mockLogger.warn).toHaveBeenCalledWith(\n        'No wrapper path provided for networkFs, skipping initialization'\n      );\n      expect(coordinatorWithMissingPaths.connections.size).toBe(1);\n      expect(coordinatorWithMissingPaths.connections.has('github')).toBe(true);\n    });\n\n    it('should set connection to error state when test fails', async () => {\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Connection failed');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      await coordinator.initialize();\n\n      const networkFsConnection = coordinator.connections.get('networkFs');\n      expect(networkFsConnection.state).toBe(coordinator.connectionStates.ERROR);\n      expect(networkFsConnection.lastError).toContain('Command failed with exit code 1');\n    });\n  });\n\n  describe('connection testing', () => {\n    beforeEach(async () => {\n      // Setup connections without testing\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: coordinator.connectionStates.DISCONNECTED,\n        lastHealthCheck: null,\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n    });\n\n    it('should test connection successfully', async () => {\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify({ directories: ['/allowed'] }));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.testConnection('networkFs');\n\n      expect(result.exitCode).toBe(0);\n      expect(result.stdout).toContain('directories');\n      \n      const connection = coordinator.connections.get('networkFs');\n      expect(connection.state).toBe(coordinator.connectionStates.CONNECTED);\n      expect(connection.lastHealthCheck).toBeTruthy();\n      expect(connection.retryCount).toBe(0);\n    });\n\n    it('should handle connection test failure', async () => {\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Authentication failed');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      await expect(coordinator.testConnection('networkFs')).rejects.toThrow('Command failed with exit code 1');\n      \n      const connection = coordinator.connections.get('networkFs');\n      expect(connection.state).toBe(coordinator.connectionStates.ERROR);\n      expect(connection.lastError).toContain('Authentication failed');\n      expect(connection.retryCount).toBe(1);\n    });\n\n    it('should handle connection test timeout', async () => {\n      const fastTimeout = new MCPCoordinator({\n        networkFsWrapper: '/test/network-mcp-wrapper.sh',\n        timeout: 100,\n        logger: mockLogger\n      });\n      \n      fastTimeout.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: fastTimeout.connectionStates.DISCONNECTED,\n        lastHealthCheck: null,\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n\n      // Don't emit any events to simulate hanging process\n      await expect(\n        fastTimeout.testConnection('networkFs')\n      ).rejects.toThrow('Command timeout after');\n    });\n\n    it('should fail when testing non-existent connection', async () => {\n      await expect(\n        coordinator.testConnection('nonexistent')\n      ).rejects.toThrow('Connection nonexistent not found');\n    });\n  });\n\n  describe('command execution', () => {\n    beforeEach(() => {\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n    });\n\n    it('should execute command successfully', async () => {\n      const expectedOutput = JSON.stringify({ files: ['config.yaml', 'secrets.yaml'] });\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', expectedOutput);\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.executeCommand('networkFs', ['list_network_directory', 'home-assistant', '/config']);\n\n      expect(result.stdout).toBe(expectedOutput);\n      expect(result.exitCode).toBe(0);\n      expect(result.commandId).toBeTruthy();\n      expect(result.duration).toBeGreaterThan(0);\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'list_network_directory', 'home-assistant', '/config'],\n        expect.objectContaining({\n          stdio: ['pipe', 'pipe', 'pipe'],\n          timeout: 30000\n        })\n      );\n    });\n\n    it('should test connection if disconnected before executing command', async () => {\n      coordinator.connections.get('networkFs').state = coordinator.connectionStates.DISCONNECTED;\n      \n      let callCount = 0;\n      setTimeout(() => {\n        callCount++;\n        mockProcess.stdout.emit('data', callCount === 1 ? '{\"success\": true}' : '{\"files\": []}');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.executeCommand('networkFs', ['test_command']);\n\n      expect(result.exitCode).toBe(0);\n      expect(spawn).toHaveBeenCalledTimes(2); // One for test, one for actual command\n    });\n\n    it('should handle command execution failure', async () => {\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Network timeout');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      await expect(\n        coordinator.executeCommand('networkFs', ['failing_command'])\n      ).rejects.toThrow('Command failed with exit code 1: Network timeout');\n\n      const connection = coordinator.connections.get('networkFs');\n      expect(connection.lastError).toContain('Network timeout');\n    });\n\n    it('should detect connection loss on timeout error', async () => {\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Connection timeout occurred');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      const errorPromise = coordinator.executeCommand('networkFs', ['test']);\n      \n      // Listen for connection_lost event\n      const connectionLostPromise = new Promise(resolve => {\n        coordinator.once('connection_lost', resolve);\n      });\n\n      await expect(errorPromise).rejects.toThrow();\n      await expect(connectionLostPromise).resolves.toBe('networkFs');\n\n      const connection = coordinator.connections.get('networkFs');\n      expect(connection.state).toBe(coordinator.connectionStates.ERROR);\n    });\n\n    it('should fail when executing command on non-existent connection', async () => {\n      await expect(\n        coordinator.executeCommand('nonexistent', ['test'])\n      ).rejects.toThrow('Connection nonexistent not found');\n    });\n  });\n\n  describe('network FS operations', () => {\n    beforeEach(() => {\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n    });\n\n    it('should list directory successfully', async () => {\n      const expectedFiles = [\n        { name: 'configuration.yaml', type: 'file', size: 1024 },\n        { name: 'automations.yaml', type: 'file', size: 2048 }\n      ];\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify(expectedFiles));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.networkFsOperation('list_directory', {\n        shareName: 'home-assistant',\n        path: '/config'\n      });\n\n      expect(result.stdout).toBe(JSON.stringify(expectedFiles));\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'list_network_directory', 'home-assistant', '/config'],\n        expect.any(Object)\n      );\n    });\n\n    it('should read file successfully', async () => {\n      const fileContent = 'homeassistant:\\n  name: Home\\n  latitude: 40.7128';\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', fileContent);\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.networkFsOperation('read_file', {\n        shareName: 'home-assistant',\n        filePath: '/config/configuration.yaml',\n        encoding: 'utf-8'\n      });\n\n      expect(result.stdout).toBe(fileContent);\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'read_network_file', 'home-assistant', '/config/configuration.yaml', 'utf-8'],\n        expect.any(Object)\n      );\n    });\n\n    it('should write file successfully', async () => {\n      const fileContent = 'automation:\\n  - alias: \"Test Automation\"';\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', '{\"success\": true}');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.networkFsOperation('write_file', {\n        shareName: 'home-assistant',\n        filePath: '/config/automations.yaml',\n        content: fileContent,\n        encoding: 'utf-8'\n      });\n\n      expect(result.exitCode).toBe(0);\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'write_network_file', 'home-assistant', '/config/automations.yaml', fileContent, 'utf-8'],\n        expect.any(Object)\n      );\n    });\n\n    it('should create directory successfully', async () => {\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', '{\"created\": true}');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.networkFsOperation('create_directory', {\n        shareName: 'home-assistant',\n        directoryPath: '/config/packages'\n      });\n\n      expect(result.exitCode).toBe(0);\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'create_network_directory', 'home-assistant', '/config/packages'],\n        expect.any(Object)\n      );\n    });\n\n    it('should handle unknown operations', async () => {\n      await expect(\n        coordinator.networkFsOperation('unknown_operation', {})\n      ).rejects.toThrow('Unknown network FS operation: unknown_operation');\n    });\n\n    it('should filter empty parameters correctly', async () => {\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', '{\"shares\": []}');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      await coordinator.networkFsOperation('get_share_info', {\n        shareName: '' // Empty string should be filtered\n      });\n\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/network-mcp-wrapper.sh', 'get_share_info'],\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('GitHub operations', () => {\n    beforeEach(() => {\n      coordinator.connections.set('github', {\n        name: 'github',\n        wrapperPath: '/test/github-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n    });\n\n    it('should get user info successfully', async () => {\n      const userInfo = {\n        login: 'festion',\n        id: 12345,\n        name: 'Test User'\n      };\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify(userInfo));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.githubOperation('get_me', {});\n\n      expect(result.stdout).toBe(JSON.stringify(userInfo));\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/github-wrapper.sh', 'get_me'],\n        expect.any(Object)\n      );\n    });\n\n    it('should get file contents successfully', async () => {\n      const fileContent = 'homeassistant:\\n  name: Home';\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', fileContent);\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.githubOperation('get_file_contents', {\n        owner: 'festion',\n        repo: 'home-assistant-config',\n        path: 'configuration.yaml',\n        ref: 'main'\n      });\n\n      expect(result.stdout).toBe(fileContent);\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/github-wrapper.sh', 'get_file_contents', 'festion', 'home-assistant-config', 'configuration.yaml', 'main'],\n        expect.any(Object)\n      );\n    });\n\n    it('should list commits successfully', async () => {\n      const commits = [\n        { sha: 'abc123', message: 'Update configuration' },\n        { sha: 'def456', message: 'Add new automation' }\n      ];\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify(commits));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.githubOperation('list_commits', {\n        owner: 'festion',\n        repo: 'home-assistant-config',\n        sha: 'main'\n      });\n\n      expect(result.stdout).toBe(JSON.stringify(commits));\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/github-wrapper.sh', 'list_commits', 'festion', 'home-assistant-config', 'main'],\n        expect.any(Object)\n      );\n    });\n\n    it('should handle unknown GitHub operations', async () => {\n      await expect(\n        coordinator.githubOperation('unknown_operation', {})\n      ).rejects.toThrow('Unknown GitHub operation: unknown_operation');\n    });\n\n    it('should create issue successfully', async () => {\n      const issueData = {\n        number: 42,\n        title: 'Test Issue',\n        state: 'open'\n      };\n      \n      setTimeout(() => {\n        mockProcess.stdout.emit('data', JSON.stringify(issueData));\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.githubOperation('create_issue', {\n        owner: 'festion',\n        repo: 'home-assistant-config',\n        title: 'Test Issue',\n        body: 'Issue description'\n      });\n\n      expect(result.stdout).toBe(JSON.stringify(issueData));\n      expect(spawn).toHaveBeenCalledWith(\n        'bash',\n        ['/test/github-wrapper.sh', 'create_issue', 'festion', 'home-assistant-config', 'Test Issue', 'Issue description'],\n        expect.any(Object)\n      );\n    });\n  });\n\n  describe('deployment operations', () => {\n    beforeEach(() => {\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n\n      coordinator.connections.set('github', {\n        name: 'github',\n        wrapperPath: '/test/github-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n    });\n\n    it('should execute deployment operations successfully', async () => {\n      const deploymentParams = {\n        repository: 'festion/home-assistant-config',\n        branch: 'main',\n        deploymentId: 'deploy-20250713-101117',\n        createBackup: false // Skip backup for this test\n      };\n\n      // Mock responses in sequence\n      let callCount = 0;\n      setTimeout(() => {\n        callCount++;\n        let response;\n        \n        switch (callCount) {\n          case 1: // list_directory for current config\n            response = JSON.stringify([\n              { name: 'configuration.yaml', type: 'file' },\n              { name: 'automations.yaml', type: 'file' }\n            ]);\n            break;\n          case 2: // list_commits from GitHub\n            response = JSON.stringify([\n              { sha: 'abc123', message: 'Latest commit' }\n            ]);\n            break;\n          case 3: // create_directory for legacy backup\n            response = '{\"created\": true}';\n            break;\n          case 4: // get_file_contents for repo root\n            response = JSON.stringify([\n              { name: 'configuration.yaml', type: 'file', path: 'configuration.yaml' },\n              { name: 'automations.yaml', type: 'file', path: 'automations.yaml' }\n            ]);\n            break;\n          case 5: // get_file_contents for configuration.yaml\n            response = 'homeassistant:\\n  name: Home';\n            break;\n          case 6: // write_file for configuration.yaml\n            response = '{\"written\": true}';\n            break;\n          case 7: // get_file_contents for automations.yaml\n            response = 'automation:\\n  - alias: \"Test\"';\n            break;\n          case 8: // write_file for automations.yaml\n            response = '{\"written\": true}';\n            break;\n          default:\n            response = '{\"success\": true}';\n        }\n        \n        mockProcess.stdout.emit('data', response);\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.deploymentOperations(deploymentParams);\n\n      expect(result.success).toBe(true);\n      expect(result.operations).toHaveLength(6); // Should have multiple operations\n      expect(result.deployedFiles).toBe(2);\n      expect(result.backupPath).toBeTruthy();\n      expect(mockLogger.info).toHaveBeenCalledWith('Fetching current configuration', {\n        repository: deploymentParams.repository\n      });\n    });\n\n    it('should handle deployment failure gracefully', async () => {\n      const deploymentParams = {\n        repository: 'festion/home-assistant-config',\n        branch: 'main',\n        createBackup: false\n      };\n\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Network error');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      const result = await coordinator.deploymentOperations(deploymentParams);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toContain('Command failed with exit code 1');\n      expect(result.operations).toHaveLength(2); // Initial operations plus failure\n      expect(mockLogger.error).toHaveBeenCalledWith(\n        'Deployment operations failed',\n        expect.objectContaining({\n          error: expect.stringContaining('Command failed'),\n          operations: 2\n        })\n      );\n    });\n\n    it('should skip backup when createBackup is false', async () => {\n      const deploymentParams = {\n        repository: 'festion/home-assistant-config',\n        branch: 'main',\n        createBackup: false\n      };\n\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', '[]');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      const result = await coordinator.deploymentOperations(deploymentParams);\n\n      // Should not have a backup operation in the results\n      const backupOperation = result.operations.find(op => op.operation === 'create_pre_deployment_backup');\n      expect(backupOperation).toBeUndefined();\n    });\n  });\n\n  describe('health checks', () => {\n    beforeEach(() => {\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        wrapperPath: '/test/network-mcp-wrapper.sh',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0,\n        process: null\n      });\n\n      coordinator.connections.set('github', {\n        name: 'github',\n        wrapperPath: '/test/github-wrapper.sh',\n        state: coordinator.connectionStates.ERROR,\n        lastHealthCheck: null,\n        lastError: 'Connection timeout',\n        retryCount: 1,\n        process: null\n      });\n    });\n\n    it('should return health status for all connections', async () => {\n      const health = await coordinator.checkHealth();\n\n      expect(health.status).toBe('degraded'); // One connection is in error state\n      expect(health.connections).toHaveProperty('networkFs');\n      expect(health.connections).toHaveProperty('github');\n      expect(health.connections.networkFs.status).toBe(coordinator.connectionStates.CONNECTED);\n      expect(health.connections.github.status).toBe(coordinator.connectionStates.ERROR);\n      expect(health.connections.github.lastError).toBe('Connection timeout');\n    });\n\n    it('should return healthy status when all connections are healthy', async () => {\n      coordinator.connections.get('github').state = coordinator.connectionStates.CONNECTED;\n\n      const health = await coordinator.checkHealth();\n\n      expect(health.status).toBe('healthy');\n    });\n\n    it('should perform periodic health checks', async () => {\n      jest.spyOn(coordinator, 'performHealthChecks').mockResolvedValue();\n      \n      coordinator.healthCheckInterval = 50; // Fast interval for testing\n      coordinator.startHealthChecks();\n\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      expect(coordinator.performHealthChecks).toHaveBeenCalled();\n      clearInterval(coordinator.healthCheckTimer);\n    });\n\n    it('should attempt reconnection for failed connections', async () => {\n      jest.spyOn(coordinator, 'testConnection').mockResolvedValue({ success: true });\n\n      await coordinator.performHealthChecks();\n\n      expect(coordinator.testConnection).toHaveBeenCalledWith('github');\n      expect(mockLogger.info).toHaveBeenCalledWith(\n        'Attempting to reconnect MCP connection',\n        expect.objectContaining({\n          name: 'github',\n          retryCount: 1,\n          maxRetries: 3\n        })\n      );\n    });\n\n    it('should not attempt reconnection when max retries exceeded', async () => {\n      coordinator.connections.get('github').retryCount = 5; // Exceeds maxRetries\n      jest.spyOn(coordinator, 'testConnection').mockResolvedValue({ success: true });\n\n      await coordinator.performHealthChecks();\n\n      expect(coordinator.testConnection).not.toHaveBeenCalledWith('github');\n    });\n  });\n\n  describe('connection status methods', () => {\n    beforeEach(() => {\n      coordinator.connections.set('networkFs', {\n        name: 'networkFs',\n        state: coordinator.connectionStates.CONNECTED,\n        lastHealthCheck: new Date().toISOString(),\n        lastError: null,\n        retryCount: 0\n      });\n    });\n\n    it('should get connection status by name', () => {\n      const status = coordinator.getConnectionStatus('networkFs');\n      expect(status).toBe(coordinator.connectionStates.CONNECTED);\n    });\n\n    it('should return not_found for non-existent connection', () => {\n      const status = coordinator.getConnectionStatus('nonexistent');\n      expect(status).toBe('not_found');\n    });\n\n    it('should get all connections', () => {\n      const connections = coordinator.getAllConnections();\n      \n      expect(connections).toHaveProperty('networkFs');\n      expect(connections.networkFs).toEqual(\n        expect.objectContaining({\n          name: 'networkFs',\n          state: coordinator.connectionStates.CONNECTED,\n          retryCount: 0\n        })\n      );\n    });\n  });\n\n  describe('cleanup', () => {\n    beforeEach(() => {\n      coordinator.healthCheckTimer = setInterval(() => {}, 1000);\n      \n      const mockProcess = {\n        killed: false,\n        kill: jest.fn()\n      };\n      \n      coordinator.connections.set('test', {\n        name: 'test',\n        process: mockProcess\n      });\n    });\n\n    it('should cleanup resources properly', async () => {\n      const connection = coordinator.connections.get('test');\n      \n      await coordinator.cleanup();\n\n      expect(coordinator.healthCheckTimer).toBeNull();\n      expect(connection.process.kill).toHaveBeenCalledWith('SIGTERM');\n      expect(coordinator.connections.size).toBe(0);\n      expect(mockLogger.info).toHaveBeenCalledWith('MCP coordinator cleaned up');\n    });\n\n    it('should handle cleanup when no health check timer exists', async () => {\n      coordinator.healthCheckTimer = null;\n\n      await expect(coordinator.cleanup()).resolves.not.toThrow();\n    });\n\n    it('should handle cleanup when processes are already killed', async () => {\n      coordinator.connections.get('test').process.killed = true;\n\n      await coordinator.cleanup();\n\n      expect(coordinator.connections.get('test').process.kill).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('event handling', () => {\n    it('should emit connection_established event on successful test', async () => {\n      coordinator.connections.set('test', {\n        name: 'test',\n        wrapperPath: '/test/wrapper.sh',\n        state: coordinator.connectionStates.DISCONNECTED\n      });\n\n      const eventPromise = new Promise(resolve => {\n        coordinator.once('connection_established', resolve);\n      });\n\n      setTimeout(() => {\n        mockProcess.stdout.emit('data', '{\"success\": true}');\n        mockProcess.emit('close', 0);\n      }, 10);\n\n      await coordinator.testConnection('test');\n      const eventData = await eventPromise;\n\n      expect(eventData).toBe('test');\n    });\n\n    it('should emit connection_failed event on test failure', async () => {\n      coordinator.connections.set('test', {\n        name: 'test',\n        wrapperPath: '/test/wrapper.sh',\n        state: coordinator.connectionStates.DISCONNECTED\n      });\n\n      const eventPromise = new Promise(resolve => {\n        coordinator.once('connection_failed', resolve);\n      });\n\n      setTimeout(() => {\n        mockProcess.stderr.emit('data', 'Connection failed');\n        mockProcess.emit('close', 1);\n      }, 10);\n\n      try {\n        await coordinator.testConnection('test');\n      } catch (error) {\n        // Expected to fail\n      }\n\n      const eventData = await eventPromise;\n      expect(eventData.name).toBe('test');\n      expect(eventData.error).toContain('Connection failed');\n    });\n  });\n});"],"mappings":"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","ignoreList":[]}