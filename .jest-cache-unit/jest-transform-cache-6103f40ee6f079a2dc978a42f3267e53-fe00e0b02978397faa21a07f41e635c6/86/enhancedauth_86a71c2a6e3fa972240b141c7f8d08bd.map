{"version":3,"names":["cov_2a3yq6jmpo","actualCoverage","AuthService","s","require","Permission","EnhancedAuthMiddleware","constructor","f","authService","failedAttempts","Map","securityConfig","maxFailedAttempts","lockoutDuration","tokenRefreshThreshold","ipWhitelist","process","env","IP_WHITELIST","b","split","ipBlacklist","IP_BLACKLIST","authenticateJWT","req","res","next","isIpAllowed","ip","logSecurityEvent","endpoint","path","status","json","error","message","isRateLimited","authHeader","headers","authorization","recordFailedAttempt","token","startsWith","slice","user","decoded","verifyToken","timeToExpiry","exp","Date","now","needsRefresh","auth","type","userId","id","username","role","permissions","tokenPayload","expiresAt","issuedAt","iat","clearFailedAttempts","logAuthEvent","method","userAgent","get","tokenId","jti","setHeader","Math","floor","errorType","getTokenErrorType","code","getTokenErrorCode","authenticateApiKey","apiKey","query","isValidApiKeyFormat","keyData","verifyApiKey","keyId","keyName","name","createdAt","lastUsed","requireMFA","mfaCode","mfaMethod","supportedMethods","mfaValid","verifyMFACode","mfaVerified","console","authenticate","authorize","resource","action","options","allowAdmin","hasPermission","checkResourcePermission","userPermissions","requiredPermission","resourceContext","getResourceContext","required","granted","permission","requireRole","requiredRoles","userRole","hasRole","includes","join","currentRole","refreshToken","newToken","generateToken","oldTokenExp","expiresIn","jwtExpiresIn","refreshedAt","toISOString","length","reason","details","key","attempt","timestamp","has","set","attempts","push","cutoff","recentAttempts","filter","a","delete","checkPermission","params","eventType","securityAudit","authType","requireAdmin","enhancedAuthMiddleware","module","exports"],"sources":["enhanced-auth.js"],"sourcesContent":["const AuthService = require('../services/auth/authService');\nconst { Permission } = require('../models/user');\n\n/**\n * Enhanced Authentication middleware for Express.js\n * Provides JWT and API key authentication with comprehensive security features\n */\nclass EnhancedAuthMiddleware {\n  constructor() {\n    this.authService = new AuthService();\n    this.failedAttempts = new Map(); // Track failed authentication attempts\n    this.securityConfig = {\n      maxFailedAttempts: 5,\n      lockoutDuration: 15 * 60 * 1000, // 15 minutes\n      tokenRefreshThreshold: 10 * 60 * 1000, // 10 minutes before expiry\n      ipWhitelist: process.env.IP_WHITELIST ? process.env.IP_WHITELIST.split(',') : [],\n      ipBlacklist: process.env.IP_BLACKLIST ? process.env.IP_BLACKLIST.split(',') : []\n    };\n  }\n\n  /**\n   * Enhanced JWT authentication middleware with security features\n   */\n  authenticateJWT = async (req, res, next) => {\n    try {\n      // IP filtering\n      if (!this.isIpAllowed(req.ip)) {\n        await this.logSecurityEvent('ip_blocked', { ip: req.ip, endpoint: req.path }, req);\n        return res.status(403).json({ \n          error: 'Access denied', \n          message: 'Your IP address is not allowed' \n        });\n      }\n\n      // Rate limiting check\n      if (this.isRateLimited(req.ip)) {\n        await this.logSecurityEvent('rate_limited', { ip: req.ip, endpoint: req.path }, req);\n        return res.status(429).json({ \n          error: 'Too many attempts', \n          message: 'Too many authentication attempts. Please try again later.' \n        });\n      }\n\n      const authHeader = req.headers.authorization;\n      \n      if (!authHeader) {\n        await this.recordFailedAttempt(req.ip, 'missing_auth_header');\n        return res.status(401).json({ \n          error: 'Access denied', \n          message: 'No authorization header provided' \n        });\n      }\n\n      const token = authHeader.startsWith('Bearer ') \n        ? authHeader.slice(7) \n        : authHeader;\n\n      if (!token) {\n        await this.recordFailedAttempt(req.ip, 'missing_token');\n        return res.status(401).json({ \n          error: 'Access denied', \n          message: 'No token provided' \n        });\n      }\n\n      const { user, decoded } = await this.authService.verifyToken(token);\n      \n      // Check for token refresh needs\n      const timeToExpiry = decoded.exp * 1000 - Date.now();\n      const needsRefresh = timeToExpiry < this.securityConfig.tokenRefreshThreshold;\n      \n      // Attach enhanced user and token info to request\n      req.user = user;\n      req.auth = {\n        type: 'jwt',\n        userId: user.id,\n        username: user.username,\n        role: user.role,\n        permissions: user.permissions,\n        tokenPayload: decoded,\n        needsRefresh: needsRefresh,\n        expiresAt: new Date(decoded.exp * 1000),\n        issuedAt: new Date(decoded.iat * 1000)\n      };\n\n      // Clear failed attempts on successful authentication\n      this.clearFailedAttempts(req.ip);\n\n      // Log successful authentication with enhanced details\n      await this.authService.logAuthEvent(\n        user.id, \n        user.username, \n        'jwt_auth_success', \n        true, \n        { \n          endpoint: req.path, \n          method: req.method,\n          userAgent: req.get('User-Agent'),\n          tokenId: decoded.jti,\n          needsRefresh: needsRefresh\n        },\n        req\n      );\n\n      // Add refresh token header if needed\n      if (needsRefresh) {\n        res.setHeader('X-Token-Refresh-Needed', 'true');\n        res.setHeader('X-Token-Expires-In', Math.floor(timeToExpiry / 1000));\n      }\n\n      next();\n    } catch (error) {\n      await this.recordFailedAttempt(req.ip, 'invalid_token', error.message);\n      \n      // Log failed authentication with detailed error info\n      await this.authService.logAuthEvent(\n        null, \n        null, \n        'jwt_auth_failure', \n        false, \n        { \n          error: error.message, \n          endpoint: req.path, \n          method: req.method,\n          userAgent: req.get('User-Agent'),\n          errorType: this.getTokenErrorType(error)\n        },\n        req\n      );\n\n      return res.status(401).json({ \n        error: 'Access denied', \n        message: 'Invalid or expired token',\n        code: this.getTokenErrorCode(error)\n      });\n    }\n  };\n\n  /**\n   * Enhanced API key authentication middleware\n   */\n  authenticateApiKey = async (req, res, next) => {\n    try {\n      // IP filtering\n      if (!this.isIpAllowed(req.ip)) {\n        await this.logSecurityEvent('ip_blocked', { ip: req.ip, endpoint: req.path }, req);\n        return res.status(403).json({ \n          error: 'Access denied', \n          message: 'Your IP address is not allowed' \n        });\n      }\n\n      const apiKey = req.headers['x-api-key'] || req.query.apiKey;\n\n      if (!apiKey) {\n        await this.recordFailedAttempt(req.ip, 'missing_api_key');\n        return res.status(401).json({ \n          error: 'Access denied', \n          message: 'No API key provided' \n        });\n      }\n\n      // Validate API key format\n      if (!this.isValidApiKeyFormat(apiKey)) {\n        await this.recordFailedAttempt(req.ip, 'invalid_api_key_format');\n        return res.status(401).json({ \n          error: 'Access denied', \n          message: 'Invalid API key format' \n        });\n      }\n\n      const keyData = await this.authService.verifyApiKey(apiKey);\n      \n      // Attach enhanced API key info to request\n      req.auth = {\n        type: 'api_key',\n        keyId: keyData.id,\n        keyName: keyData.name,\n        permissions: keyData.permissions,\n        keyData: keyData,\n        createdAt: keyData.createdAt,\n        lastUsed: keyData.lastUsed,\n        expiresAt: keyData.expiresAt\n      };\n\n      // Clear failed attempts on successful authentication\n      this.clearFailedAttempts(req.ip);\n\n      // Log successful authentication\n      await this.authService.logAuthEvent(\n        null, \n        keyData.name, \n        'api_key_auth_success', \n        true, \n        { \n          endpoint: req.path, \n          method: req.method, \n          keyId: keyData.id,\n          userAgent: req.get('User-Agent')\n        },\n        req\n      );\n\n      next();\n    } catch (error) {\n      await this.recordFailedAttempt(req.ip, 'invalid_api_key', error.message);\n      \n      // Log failed authentication\n      await this.authService.logAuthEvent(\n        null, \n        null, \n        'api_key_auth_failure', \n        false, \n        { \n          error: error.message, \n          endpoint: req.path, \n          method: req.method,\n          userAgent: req.get('User-Agent')\n        },\n        req\n      );\n\n      return res.status(401).json({ \n        error: 'Access denied', \n        message: 'Invalid or expired API key' \n      });\n    }\n  };\n\n  /**\n   * Multi-factor authentication middleware\n   */\n  requireMFA = () => {\n    return async (req, res, next) => {\n      try {\n        if (!req.auth || req.auth.type !== 'jwt') {\n          return res.status(401).json({\n            error: 'Access denied',\n            message: 'JWT authentication required for MFA operations'\n          });\n        }\n\n        const mfaCode = req.headers['x-mfa-code'];\n        const mfaMethod = req.headers['x-mfa-method'] || 'totp';\n\n        if (!mfaCode) {\n          return res.status(401).json({\n            error: 'MFA required',\n            message: 'Multi-factor authentication code required',\n            supportedMethods: ['totp', 'sms', 'email']\n          });\n        }\n\n        // Verify MFA code (this would integrate with your MFA provider)\n        const mfaValid = await this.verifyMFACode(req.user.id, mfaCode, mfaMethod);\n\n        if (!mfaValid) {\n          await this.logSecurityEvent('mfa_failure', {\n            userId: req.user.id,\n            method: mfaMethod,\n            endpoint: req.path\n          }, req);\n\n          return res.status(401).json({\n            error: 'MFA failed',\n            message: 'Invalid multi-factor authentication code'\n          });\n        }\n\n        // Mark request as MFA verified\n        req.auth.mfaVerified = true;\n        req.auth.mfaMethod = mfaMethod;\n\n        await this.logSecurityEvent('mfa_success', {\n          userId: req.user.id,\n          method: mfaMethod,\n          endpoint: req.path\n        }, req);\n\n        next();\n      } catch (error) {\n        console.error('MFA verification error:', error.message);\n        return res.status(500).json({\n          error: 'Internal server error',\n          message: 'MFA verification failed'\n        });\n      }\n    };\n  };\n\n  /**\n   * Combined authentication with fallback\n   */\n  authenticate = async (req, res, next) => {\n    // Try JWT authentication first\n    if (req.headers.authorization) {\n      return this.authenticateJWT(req, res, next);\n    }\n    \n    // Try API key authentication\n    if (req.headers['x-api-key'] || req.query.apiKey) {\n      return this.authenticateApiKey(req, res, next);\n    }\n\n    // No authentication provided\n    await this.recordFailedAttempt(req.ip, 'no_auth_provided');\n    return res.status(401).json({ \n      error: 'Access denied', \n      message: 'Authentication required. Use Authorization header (Bearer token) or X-API-Key header',\n      supportedMethods: ['jwt', 'api_key']\n    });\n  };\n\n  /**\n   * Enhanced authorization with resource-based permissions\n   */\n  authorize = (resource, action, options = {}) => {\n    return async (req, res, next) => {\n      try {\n        if (!req.auth) {\n          return res.status(401).json({ \n            error: 'Access denied', \n            message: 'Authentication required' \n          });\n        }\n\n        // Check for admin bypass\n        if (options.allowAdmin && req.auth.role === 'admin') {\n          await this.logSecurityEvent('admin_access_granted', {\n            userId: req.auth.userId,\n            username: req.auth.username,\n            resource: resource,\n            action: action,\n            endpoint: req.path\n          }, req);\n          return next();\n        }\n\n        // Resource-level permission check\n        const hasPermission = this.checkResourcePermission(req.auth, resource, action, req);\n        \n        if (!hasPermission) {\n          // Log authorization failure with detailed context\n          await this.authService.logAuthEvent(\n            req.auth.userId || null,\n            req.auth.username || req.auth.keyName || null,\n            'authorization_denied',\n            false,\n            { \n              resource, \n              action, \n              endpoint: req.path, \n              method: req.method,\n              userPermissions: req.auth.permissions,\n              requiredPermission: `${resource}:${action}`,\n              resourceContext: this.getResourceContext(req)\n            },\n            req\n          );\n\n          return res.status(403).json({ \n            error: 'Forbidden', \n            message: `Insufficient permissions for ${resource}:${action}`,\n            required: `${resource}:${action}`,\n            granted: req.auth.permissions\n          });\n        }\n\n        // Log successful authorization\n        await this.authService.logAuthEvent(\n          req.auth.userId || null,\n          req.auth.username || req.auth.keyName || null,\n          'authorization_granted',\n          true,\n          { \n            resource, \n            action, \n            endpoint: req.path, \n            method: req.method,\n            permission: `${resource}:${action}`\n          },\n          req\n        );\n\n        next();\n      } catch (error) {\n        console.error('Authorization error:', error.message);\n        return res.status(500).json({ \n          error: 'Internal server error', \n          message: 'Authorization check failed' \n        });\n      }\n    };\n  };\n\n  /**\n   * Enhanced role-based authorization\n   */\n  requireRole = (requiredRoles, options = {}) => {\n    if (typeof requiredRoles === 'string') {\n      requiredRoles = [requiredRoles];\n    }\n\n    return async (req, res, next) => {\n      try {\n        if (!req.auth) {\n          return res.status(401).json({ \n            error: 'Access denied', \n            message: 'Authentication required' \n          });\n        }\n\n        // API keys don't have roles, only users do\n        if (req.auth.type !== 'jwt') {\n          return res.status(403).json({ \n            error: 'Forbidden', \n            message: 'User authentication required for role-based operations' \n          });\n        }\n\n        const userRole = req.auth.role;\n        const hasRole = requiredRoles.includes(userRole) || userRole === 'admin';\n\n        if (!hasRole) {\n          await this.logSecurityEvent('role_denied', {\n            userId: req.auth.userId,\n            userRole: userRole,\n            requiredRoles: requiredRoles,\n            endpoint: req.path\n          }, req);\n\n          return res.status(403).json({ \n            error: 'Forbidden', \n            message: `Required role: ${requiredRoles.join(' or ')}`,\n            currentRole: userRole\n          });\n        }\n\n        next();\n      } catch (error) {\n        console.error('Role authorization error:', error.message);\n        return res.status(500).json({ \n          error: 'Internal server error', \n          message: 'Role check failed' \n        });\n      }\n    };\n  };\n\n  /**\n   * Token refresh middleware\n   */\n  refreshToken = async (req, res, next) => {\n    try {\n      if (!req.auth || req.auth.type !== 'jwt') {\n        return res.status(401).json({\n          error: 'Access denied',\n          message: 'JWT authentication required for token refresh'\n        });\n      }\n\n      // Generate new token with same payload but fresh expiration\n      const newToken = this.authService.generateToken(req.user);\n      \n      // Log token refresh\n      await this.authService.logAuthEvent(\n        req.user.id,\n        req.user.username,\n        'token_refresh',\n        true,\n        { endpoint: req.path, oldTokenExp: req.auth.expiresAt },\n        req\n      );\n\n      res.json({\n        status: 'success',\n        token: newToken,\n        expiresIn: this.authService.jwtExpiresIn,\n        refreshedAt: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error('Token refresh error:', error.message);\n      return res.status(500).json({\n        error: 'Internal server error',\n        message: 'Token refresh failed'\n      });\n    }\n  };\n\n  /**\n   * Security utility methods\n   */\n  isIpAllowed(ip) {\n    // If whitelist is configured, IP must be in whitelist\n    if (this.securityConfig.ipWhitelist.length > 0) {\n      return this.securityConfig.ipWhitelist.includes(ip);\n    }\n    \n    // If blacklist is configured, IP must not be in blacklist\n    if (this.securityConfig.ipBlacklist.length > 0) {\n      return !this.securityConfig.ipBlacklist.includes(ip);\n    }\n    \n    // No IP filtering configured\n    return true;\n  }\n\n  isValidApiKeyFormat(apiKey) {\n    // API keys should start with 'hga_' and be 64+ characters\n    return typeof apiKey === 'string' && \n           apiKey.startsWith('hga_') && \n           apiKey.length >= 35;\n  }\n\n  recordFailedAttempt(ip, reason, details = null) {\n    const key = ip;\n    const attempt = {\n      timestamp: Date.now(),\n      reason: reason,\n      details: details\n    };\n\n    if (!this.failedAttempts.has(key)) {\n      this.failedAttempts.set(key, []);\n    }\n\n    const attempts = this.failedAttempts.get(key);\n    attempts.push(attempt);\n\n    // Clean old attempts (older than lockout duration)\n    const cutoff = Date.now() - this.securityConfig.lockoutDuration;\n    const recentAttempts = attempts.filter(a => a.timestamp > cutoff);\n    this.failedAttempts.set(key, recentAttempts);\n  }\n\n  clearFailedAttempts(ip) {\n    this.failedAttempts.delete(ip);\n  }\n\n  isRateLimited(ip) {\n    const attempts = this.failedAttempts.get(ip) || [];\n    const cutoff = Date.now() - this.securityConfig.lockoutDuration;\n    const recentAttempts = attempts.filter(a => a.timestamp > cutoff);\n    \n    return recentAttempts.length >= this.securityConfig.maxFailedAttempts;\n  }\n\n  checkResourcePermission(auth, resource, action, req) {\n    const hasPermission = this.authService.checkPermission(auth, resource, action);\n    \n    // Additional context-based checks could go here\n    // For example, checking if user owns the resource they're trying to access\n    \n    return hasPermission;\n  }\n\n  getResourceContext(req) {\n    // Extract resource context from request (e.g., repository name, deployment ID)\n    return {\n      params: req.params,\n      query: req.query,\n      path: req.path\n    };\n  }\n\n  getTokenErrorType(error) {\n    if (error.name === 'TokenExpiredError') return 'expired';\n    if (error.name === 'JsonWebTokenError') return 'invalid';\n    if (error.name === 'NotBeforeError') return 'not_active';\n    return 'unknown';\n  }\n\n  getTokenErrorCode(error) {\n    if (error.name === 'TokenExpiredError') return 'TOKEN_EXPIRED';\n    if (error.name === 'JsonWebTokenError') return 'TOKEN_INVALID';\n    if (error.name === 'NotBeforeError') return 'TOKEN_NOT_ACTIVE';\n    return 'TOKEN_ERROR';\n  }\n\n  async verifyMFACode(userId, code, method) {\n    // This would integrate with your MFA provider (e.g., Google Authenticator, SMS service)\n    // For now, return false as MFA is not fully implemented\n    return false;\n  }\n\n  async logSecurityEvent(eventType, details, req) {\n    try {\n      await this.authService.logAuthEvent(\n        req.auth?.userId || null,\n        req.auth?.username || null,\n        `security_${eventType}`,\n        false,\n        {\n          ...details,\n          userAgent: req.get('User-Agent'),\n          timestamp: new Date().toISOString()\n        },\n        req\n      );\n    } catch (error) {\n      console.error('Failed to log security event:', error);\n    }\n  }\n\n  /**\n   * Security audit middleware\n   */\n  securityAudit = () => {\n    return async (req, res, next) => {\n      // Log all authenticated requests for security audit\n      if (req.auth) {\n        await this.logSecurityEvent('request_audit', {\n          endpoint: req.path,\n          method: req.method,\n          authType: req.auth.type,\n          userId: req.auth.userId,\n          username: req.auth.username || req.auth.keyName\n        }, req);\n      }\n      \n      next();\n    };\n  };\n\n  /**\n   * Admin-only middleware\n   */\n  requireAdmin = () => {\n    return this.requireRole('admin');\n  };\n}\n\n// Create singleton instance\nconst enhancedAuthMiddleware = new EnhancedAuthMiddleware();\n\n// Export individual middleware functions\nmodule.exports = {\n  authenticate: enhancedAuthMiddleware.authenticate,\n  authenticateJWT: enhancedAuthMiddleware.authenticateJWT,\n  authenticateApiKey: enhancedAuthMiddleware.authenticateApiKey,\n  authorize: enhancedAuthMiddleware.authorize,\n  requireRole: enhancedAuthMiddleware.requireRole,\n  requireAdmin: enhancedAuthMiddleware.requireAdmin,\n  requireMFA: enhancedAuthMiddleware.requireMFA,\n  refreshToken: enhancedAuthMiddleware.refreshToken,\n  securityAudit: enhancedAuthMiddleware.securityAudit,\n  EnhancedAuthMiddleware\n};"],"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","ignoreList":[]}