{"version":3,"names":["MockBackupManager","constructor","createPreDeploymentBackup","jest","fn","createPostDeploymentBackup","rollbackDeployment","validateBackup","listBackups","deleteBackup","getBackupMetadata","estimateBackupSize","_backups","Map","_currentBackupId","mockBackupSuccess","backupId","Date","now","mockResolvedValue","success","path","size","duration","timestamp","toISOString","metadata","configFiles","entityStates","databaseSize","set","id","type","status","created","mockBackupFailure","errorMessage","mockRejectedValue","Error","mockSlowBackup","mockImplementation","Promise","resolve","setTimeout","mockRollbackSuccess","restoredFiles","details","configurationRestored","databaseRestored","entityStatesRestored","mockRollbackFailure","mockValidationSuccess","valid","integrity","checksumMatches","readableFiles","corruptedFiles","estimatedRestoreTime","mockValidationFailure","errors","mockBackupList","backups","deploymentId","total","length","totalSize","reduce","sum","b","forEach","backup","mockBackupMetadata","homeAssistantVersion","automations","scripts","scenes","addons","integrations","creation","trigger","mockSizeEstimation","estimatedSize","breakdown","configuration","database","customComponents","www","estimatedDuration","mockDeleteSuccess","deletedSize","freedSpace","mockDeleteFailure","getCurrentBackupId","hasBackup","has","getBackupCount","reset","clearAllMocks","clear","module","exports"],"sources":["backup-manager.mock.js"],"sourcesContent":["/**\n * Mock implementation for Backup Manager\n * Used to isolate deployment and recovery components during testing\n */\nclass MockBackupManager {\n  constructor() {\n    this.createPreDeploymentBackup = jest.fn();\n    this.createPostDeploymentBackup = jest.fn();\n    this.rollbackDeployment = jest.fn();\n    this.validateBackup = jest.fn();\n    this.listBackups = jest.fn();\n    this.deleteBackup = jest.fn();\n    this.getBackupMetadata = jest.fn();\n    this.estimateBackupSize = jest.fn();\n    \n    // Internal state tracking\n    this._backups = new Map();\n    this._currentBackupId = null;\n  }\n\n  // Mock successful backup creation\n  mockBackupSuccess() {\n    const backupId = `backup-${Date.now()}`;\n    this._currentBackupId = backupId;\n    \n    this.createPreDeploymentBackup.mockResolvedValue({\n      success: true,\n      backupId,\n      path: `/backup/${backupId}.tar.gz`,\n      size: 2048576,\n      duration: 15000,\n      timestamp: new Date().toISOString(),\n      metadata: {\n        configFiles: 156,\n        entityStates: 234,\n        databaseSize: 1048576\n      }\n    });\n\n    this._backups.set(backupId, {\n      id: backupId,\n      type: 'pre-deployment',\n      status: 'completed',\n      size: 2048576,\n      created: new Date()\n    });\n  }\n\n  // Mock backup failure\n  mockBackupFailure(errorMessage = 'Insufficient disk space') {\n    this.createPreDeploymentBackup.mockRejectedValue(\n      new Error(`Backup creation failed: ${errorMessage}`)\n    );\n  }\n\n  // Mock slow backup for testing timeouts\n  mockSlowBackup(duration = 30000) {\n    this.createPreDeploymentBackup.mockImplementation(() => {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const backupId = `backup-${Date.now()}`;\n          resolve({\n            success: true,\n            backupId,\n            path: `/backup/${backupId}.tar.gz`,\n            size: 2048576,\n            duration,\n            timestamp: new Date().toISOString()\n          });\n        }, duration);\n      });\n    });\n  }\n\n  // Mock successful rollback\n  mockRollbackSuccess() {\n    this.rollbackDeployment.mockResolvedValue({\n      success: true,\n      backupId: this._currentBackupId,\n      restoredFiles: 156,\n      duration: 12000,\n      timestamp: new Date().toISOString(),\n      details: {\n        configurationRestored: true,\n        databaseRestored: true,\n        entityStatesRestored: true\n      }\n    });\n  }\n\n  // Mock rollback failure\n  mockRollbackFailure(errorMessage = 'Backup file corrupted') {\n    this.rollbackDeployment.mockRejectedValue(\n      new Error(`Rollback failed: ${errorMessage}`)\n    );\n  }\n\n  // Mock backup validation success\n  mockValidationSuccess() {\n    this.validateBackup.mockResolvedValue({\n      valid: true,\n      integrity: 'verified',\n      checksumMatches: true,\n      readableFiles: 156,\n      corruptedFiles: 0,\n      estimatedRestoreTime: 12000\n    });\n  }\n\n  // Mock backup validation failure\n  mockValidationFailure() {\n    this.validateBackup.mockResolvedValue({\n      valid: false,\n      integrity: 'corrupted',\n      checksumMatches: false,\n      readableFiles: 143,\n      corruptedFiles: 13,\n      errors: [\n        'Checksum mismatch for configuration.yaml',\n        'Database file appears truncated',\n        'Missing automation files'\n      ]\n    });\n  }\n\n  // Mock backup listing\n  mockBackupList() {\n    const backups = [\n      {\n        id: 'backup-20250713-090000',\n        type: 'pre-deployment',\n        status: 'completed',\n        size: 2048576,\n        created: new Date('2025-07-13T09:00:00Z'),\n        deploymentId: 'deploy-20250713-090030'\n      },\n      {\n        id: 'backup-20250713-080000',\n        type: 'scheduled',\n        status: 'completed',\n        size: 1987654,\n        created: new Date('2025-07-13T08:00:00Z')\n      },\n      {\n        id: 'backup-20250712-210000',\n        type: 'manual',\n        status: 'completed',\n        size: 2156789,\n        created: new Date('2025-07-12T21:00:00Z')\n      }\n    ];\n\n    this.listBackups.mockResolvedValue({\n      backups,\n      total: backups.length,\n      totalSize: backups.reduce((sum, b) => sum + b.size, 0)\n    });\n\n    backups.forEach(backup => {\n      this._backups.set(backup.id, backup);\n    });\n  }\n\n  // Mock backup metadata retrieval\n  mockBackupMetadata(backupId) {\n    this.getBackupMetadata.mockResolvedValue({\n      id: backupId,\n      metadata: {\n        homeAssistantVersion: '2025.7.0',\n        configFiles: 156,\n        entityStates: 234,\n        automations: 15,\n        scripts: 8,\n        scenes: 12,\n        databaseSize: 1048576,\n        addons: [\n          'ESPHome',\n          'Node-RED',\n          'Mosquitto broker'\n        ],\n        integrations: [\n          'mqtt',\n          'homekit',\n          'google_assistant',\n          'alexa'\n        ]\n      },\n      creation: {\n        timestamp: new Date().toISOString(),\n        duration: 15000,\n        trigger: 'pre-deployment'\n      }\n    });\n  }\n\n  // Mock backup size estimation\n  mockSizeEstimation() {\n    this.estimateBackupSize.mockResolvedValue({\n      estimatedSize: 2097152,\n      breakdown: {\n        configuration: 524288,\n        database: 1048576,\n        customComponents: 262144,\n        www: 131072,\n        addons: 131072\n      },\n      estimatedDuration: 15000\n    });\n  }\n\n  // Mock backup deletion\n  mockDeleteSuccess() {\n    this.deleteBackup.mockResolvedValue({\n      success: true,\n      deletedSize: 2048576,\n      freedSpace: 2048576\n    });\n  }\n\n  // Mock delete failure\n  mockDeleteFailure() {\n    this.deleteBackup.mockRejectedValue(\n      new Error('Backup deletion failed: File is locked')\n    );\n  }\n\n  // Utility methods\n  getCurrentBackupId() {\n    return this._currentBackupId;\n  }\n\n  hasBackup(backupId) {\n    return this._backups.has(backupId);\n  }\n\n  getBackupCount() {\n    return this._backups.size;\n  }\n\n  // Reset all mocks and state\n  reset() {\n    jest.clearAllMocks();\n    this._backups.clear();\n    this._currentBackupId = null;\n  }\n}\n\nmodule.exports = { MockBackupManager };"],"mappings":"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","ignoreList":[]}