name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "{{PYTHON_VERSION|3.11}}"
  POETRY_VERSION: "{{POETRY_VERSION|1.6.1}}"

jobs:
  lint-and-format:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      if: hashFiles('pyproject.toml') != ''
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      if: hashFiles('pyproject.toml') != ''
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies with Poetry
      if: hashFiles('pyproject.toml') != '' && steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install dependencies with pip
      if: hashFiles('requirements.txt') != ''
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pylint bandit safety
    
    - name: Run flake8
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run flake8 .
        else
          flake8 .
        fi
    
    - name: Check black formatting
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run black --check .
        else
          black --check .
        fi
    
    - name: Check import sorting
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run isort --check-only .
        else
          isort --check-only .
        fi
    
    - name: Run MyPy type checking
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run mypy . || echo "MyPy completed with warnings"
        else
          mypy . || echo "MyPy completed with warnings"
        fi

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: bandit -r . -x */tests/* || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        if [ -f "requirements.txt" ]; then
          safety check -r requirements.txt
        fi
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      if: hashFiles('pyproject.toml') != ''
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies with Poetry
      if: hashFiles('pyproject.toml') != ''
      run: |
        poetry install --no-interaction
        poetry add pytest pytest-cov pytest-xdist pytest-mock
    
    - name: Install dependencies with pip
      if: hashFiles('requirements.txt') != ''
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock
    
    - name: Run unit tests
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
        else
          pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
        fi
    
    - name: Run integration tests
      if: hashFiles('tests/integration/**') != ''
      run: |
        if [ -f "pyproject.toml" ]; then
          poetry run pytest tests/integration/ -v
        else
          pytest tests/integration/ -v
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_VERSION && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: unittests
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
        path: |
          test-results.xml
          htmlcov/
          .coverage

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      if: hashFiles('pyproject.toml') != ''
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    
    - name: Build with Poetry
      if: hashFiles('pyproject.toml') != ''
      run: poetry build
    
    - name: Build with setuptools
      if: hashFiles('setup.py') != ''
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: |
          dist/
          *.tar.gz
          *.whl
        retention-days: 7

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest-benchmark
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
    
    - name: Run performance tests
      if: hashFiles('tests/performance/**') != ''
      run: |
        pytest tests/performance/ --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: benchmark.json