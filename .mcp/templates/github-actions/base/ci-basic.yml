name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  # Template variables that will be replaced
  NODE_VERSION: "{{NODE_VERSION|18}}"
  PYTHON_VERSION: "{{PYTHON_VERSION|3.11}}"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      uses: ./.github/actions/setup-env
      with:
        node-version: ${{ env.NODE_VERSION }}
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run linting
      run: |
        if [ -f "package.json" ]; then
          npm run lint
        elif [ -f "requirements.txt" ] || [ -f "pyproject.toml" ]; then
          flake8 . || pylint . || echo "No Python linter configured"
        fi
    
    - name: Check formatting
      run: |
        if [ -f "package.json" ]; then
          npm run format:check || echo "No format check configured"
        elif [ -f "pyproject.toml" ]; then
          black --check . || echo "No black formatter configured"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        if [ -f "package.json" ]; then
          npm audit --audit-level=moderate
        elif [ -f "requirements.txt" ]; then
          pip install safety
          safety check
        fi
    
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,python
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [lint]
    
    strategy:
      matrix:
        os: [ubuntu-latest]
        # Add matrix for multiple versions if needed
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      uses: ./.github/actions/setup-env
      with:
        node-version: ${{ env.NODE_VERSION }}
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run tests
      run: |
        if [ -f "package.json" ]; then
          npm test
        elif [ -f "pytest.ini" ] || [ -f "pyproject.toml" ]; then
          pytest --cov=. --cov-report=xml
        fi
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment
      uses: ./.github/actions/setup-env
      with:
        node-version: ${{ env.NODE_VERSION }}
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Build project
      run: |
        if [ -f "package.json" ]; then
          npm run build
        elif [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
          python -m build
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts
        path: |
          dist/
          build/
          *.tar.gz
          *.whl