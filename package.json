{
  "name": "homelab-gitops-auditor",
  "version": "1.0.0",
  "description": "Automated deployment system for homelab GitOps with comprehensive integration testing",
  "main": "api/server.js",
  "scripts": {
    "start": "node api/server.js",
    "dev": "nodemon api/server.js",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "jest --config tests/unit/jest.config.js",
    "test:integration": "jest --config tests/integration/jest.config.js",
    "test:integration:watch": "jest --config tests/integration/jest.config.js --watch",
    "test:integration:coverage": "jest --config tests/integration/jest.config.js --coverage",
    "test:integration:verbose": "VERBOSE_TESTS=true jest --config tests/integration/jest.config.js --verbose",
    "test:e2e": "jest --config tests/e2e/jest.config.js",
    "test:e2e:watch": "jest --config tests/e2e/jest.config.js --watch",
    "test:e2e:verbose": "VERBOSE_TESTS=true jest --config tests/e2e/jest.config.js --verbose",
    "test:e2e:complete": "jest --config tests/e2e/jest.config.js tests/e2e/tests/complete-deployment-workflow.test.js",
    "test:e2e:rollback": "jest --config tests/e2e/jest.config.js tests/e2e/tests/rollback-scenarios.test.js",
    "test:e2e:dashboard": "jest --config tests/e2e/jest.config.js tests/e2e/tests/dashboard-integration.test.js",
    "test:e2e:security": "jest --config tests/e2e/jest.config.js tests/e2e/tests/security-workflows.test.js",
    "test:e2e:performance": "jest --config tests/e2e/jest.config.js tests/e2e/tests/performance-reliability.test.js",
    "test:all": "npm run test:unit && npm run test:integration && npm run test:e2e",
    "test:env:start": "node tests/integration/scripts/start-test-environment.js",
    "test:env:stop": "node tests/integration/scripts/stop-test-environment.js",
    "test:env:reset": "npm run test:env:stop && npm run test:env:start",
    "lint": "eslint api/ tests/ --ext .js",
    "lint:fix": "eslint api/ tests/ --ext .js --fix",
    "format": "prettier --write 'api/**/*.js' 'tests/**/*.js'",
    "format:check": "prettier --check 'api/**/*.js' 'tests/**/*.js'",
    "typecheck": "echo 'No TypeScript in this project'",
    "coverage": "jest --coverage --config tests/unit/jest.config.js && jest --coverage --config tests/integration/jest.config.js",
    "coverage:open": "open coverage/lcov-report/index.html",
    "db:migrate": "node scripts/migrate-database.js",
    "db:seed": "node scripts/seed-database.js",
    "db:reset": "node scripts/reset-database.js",
    "docker:build": "docker build -t homelab-gitops-auditor .",
    "docker:run": "docker run -p 3000:3000 homelab-gitops-auditor",
    "docker:test": "docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit",
    "health:check": "curl -f http://localhost:3000/health || exit 1",
    "docs:generate": "jsdoc -c jsdoc.conf.json",
    "docs:serve": "http-server docs/ -p 8080",
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "test:security": "jest --config tests/security/jest.config.js",
    "test:security:auth": "jest --config tests/security/jest.config.js tests/security/authentication/",
    "test:security:authz": "jest --config tests/security/jest.config.js tests/security/authorization/",
    "test:security:input": "jest --config tests/security/jest.config.js tests/security/input-validation/",
    "test:security:api": "jest --config tests/security/jest.config.js tests/security/api-security/",
    "test:security:crypto": "jest --config tests/security/jest.config.js tests/security/cryptographic/",
    "test:security:network": "jest --config tests/security/jest.config.js tests/security/network/",
    "test:security:penetration": "jest --config tests/security/jest.config.js tests/security/penetration/",
    "test:security:watch": "jest --config tests/security/jest.config.js --watch",
    "test:security:coverage": "jest --config tests/security/jest.config.js --coverage",
    "test:security:ci": "jest --config tests/security/jest.config.js --ci --coverage --watchAll=false",
    "security:scan": "node -e     "security:report": "node -e \"const {SecurityScanner} = require\('./tests/security/utils/security-scanner.js'\); new SecurityScanner\(\).runComprehensiveScan\(\).then\(report => console.log\(JSON.stringify\(report, null, 2\)\)\).catch\(console.error\);\"",
    "test:performance": "jest --config tests/performance/jest.config.js",
    "test:performance:load": "jest --config tests/performance/jest.config.js tests/performance/load/",
    "test:performance:stress": "jest --config tests/performance/jest.config.js tests/performance/stress/",
    "test:performance:spike": "jest --config tests/performance/jest.config.js tests/performance/spike/",
    "test:performance:volume": "jest --config tests/performance/jest.config.js tests/performance/volume/",
    "test:performance:endurance": "jest --config tests/performance/jest.config.js tests/performance/endurance/",
    "test:performance:scalability": "jest --config tests/performance/jest.config.js tests/performance/scalability/",
    "test:performance:watch": "jest --config tests/performance/jest.config.js --watch",
    "test:performance:coverage": "jest --config tests/performance/jest.config.js --coverage",
    "test:performance:api": "jest --config tests/performance/jest.config.js tests/performance/load/api-load.test.js",
    "test:performance:webhook": "jest --config tests/performance/jest.config.js tests/performance/load/webhook-load.test.js",
    "test:performance:system-stress": "jest --config tests/performance/jest.config.js tests/performance/stress/system-stress.test.js",
    "test:performance:report": "node -e \"const {ReportGenerator} = require('./tests/performance/utils/report-generator.js'); const {MetricsCollector} = require('./tests/performance/utils/metrics-collector.js'); const mc = new MetricsCollector(); const rg = new ReportGenerator(); mc.loadPreviousResults().then(() => mc.generateSummaryReport()).then(console.log).catch(console.error);\"",
    "test:performance:monitor": "node -e \"const {PerformanceMonitor} = require('./tests/performance/utils/performance-monitor.js'); const pm = new PerformanceMonitor(); pm.startMonitoring().then(() => { setTimeout(() => pm.stopMonitoring().then(console.log), 60000); });\"",
    "test:performance:benchmark": "jest --config tests/performance/jest.config.js tests/performance/benchmarks/",
    "prepare": "husky install \|\| true""const {SecurityScanner} = require('./tests/security/utils/security-scanner.js'); new SecurityScanner().runComprehensiveScan().then(console.log).catch(console.error);    "security:report": "node -e \"const {SecurityScanner} = require\('./tests/security/utils/security-scanner.js'\); new SecurityScanner\(\).runComprehensiveScan\(\).then\(report => console.log\(JSON.stringify\(report, null, 2\)\)\).catch\(console.error\);\"",
    "test:performance": "jest --config tests/performance/jest.config.js",
    "test:performance:load": "jest --config tests/performance/jest.config.js tests/performance/load/",
    "test:performance:stress": "jest --config tests/performance/jest.config.js tests/performance/stress/",
    "test:performance:spike": "jest --config tests/performance/jest.config.js tests/performance/spike/",
    "test:performance:volume": "jest --config tests/performance/jest.config.js tests/performance/volume/",
    "test:performance:endurance": "jest --config tests/performance/jest.config.js tests/performance/endurance/",
    "test:performance:scalability": "jest --config tests/performance/jest.config.js tests/performance/scalability/",
    "test:performance:watch": "jest --config tests/performance/jest.config.js --watch",
    "test:performance:coverage": "jest --config tests/performance/jest.config.js --coverage",
    "test:performance:api": "jest --config tests/performance/jest.config.js tests/performance/load/api-load.test.js",
    "test:performance:webhook": "jest --config tests/performance/jest.config.js tests/performance/load/webhook-load.test.js",
    "test:performance:system-stress": "jest --config tests/performance/jest.config.js tests/performance/stress/system-stress.test.js",
    "test:performance:report": "node -e \"const {ReportGenerator} = require('./tests/performance/utils/report-generator.js'); const {MetricsCollector} = require('./tests/performance/utils/metrics-collector.js'); const mc = new MetricsCollector(); const rg = new ReportGenerator(); mc.loadPreviousResults().then(() => mc.generateSummaryReport()).then(console.log).catch(console.error);\"",
    "test:performance:monitor": "node -e \"const {PerformanceMonitor} = require('./tests/performance/utils/performance-monitor.js'); const pm = new PerformanceMonitor(); pm.startMonitoring().then(() => { setTimeout(() => pm.stopMonitoring().then(console.log), 60000); });\"",
    "test:performance:benchmark": "jest --config tests/performance/jest.config.js tests/performance/benchmarks/",
    "prepare": "husky install \|\| true""",
    "security:report": "node -e     "security:report": "node -e \"const {SecurityScanner} = require\('./tests/security/utils/security-scanner.js'\); new SecurityScanner\(\).runComprehensiveScan\(\).then\(report => console.log\(JSON.stringify\(report, null, 2\)\)\).catch\(console.error\);\"",
    "test:performance": "jest --config tests/performance/jest.config.js",
    "test:performance:load": "jest --config tests/performance/jest.config.js tests/performance/load/",
    "test:performance:stress": "jest --config tests/performance/jest.config.js tests/performance/stress/",
    "test:performance:spike": "jest --config tests/performance/jest.config.js tests/performance/spike/",
    "test:performance:volume": "jest --config tests/performance/jest.config.js tests/performance/volume/",
    "test:performance:endurance": "jest --config tests/performance/jest.config.js tests/performance/endurance/",
    "test:performance:scalability": "jest --config tests/performance/jest.config.js tests/performance/scalability/",
    "test:performance:watch": "jest --config tests/performance/jest.config.js --watch",
    "test:performance:coverage": "jest --config tests/performance/jest.config.js --coverage",
    "test:performance:api": "jest --config tests/performance/jest.config.js tests/performance/load/api-load.test.js",
    "test:performance:webhook": "jest --config tests/performance/jest.config.js tests/performance/load/webhook-load.test.js",
    "test:performance:system-stress": "jest --config tests/performance/jest.config.js tests/performance/stress/system-stress.test.js",
    "test:performance:report": "node -e \"const {ReportGenerator} = require('./tests/performance/utils/report-generator.js'); const {MetricsCollector} = require('./tests/performance/utils/metrics-collector.js'); const mc = new MetricsCollector(); const rg = new ReportGenerator(); mc.loadPreviousResults().then(() => mc.generateSummaryReport()).then(console.log).catch(console.error);\"",
    "test:performance:monitor": "node -e \"const {PerformanceMonitor} = require('./tests/performance/utils/performance-monitor.js'); const pm = new PerformanceMonitor(); pm.startMonitoring().then(() => { setTimeout(() => pm.stopMonitoring().then(console.log), 60000); });\"",
    "test:performance:benchmark": "jest --config tests/performance/jest.config.js tests/performance/benchmarks/",
    "prepare": "husky install \|\| true""const {SecurityScanner} = require('./tests/security/utils/security-scanner.js'); new SecurityScanner().runComprehensiveScan().then(report => console.log(JSON.stringify(report, null, 2))).catch(console.error);    "security:report": "node -e \"const {SecurityScanner} = require\('./tests/security/utils/security-scanner.js'\); new SecurityScanner\(\).runComprehensiveScan\(\).then\(report => console.log\(JSON.stringify\(report, null, 2\)\)\).catch\(console.error\);\"",
    "test:performance": "jest --config tests/performance/jest.config.js",
    "test:performance:load": "jest --config tests/performance/jest.config.js tests/performance/load/",
    "test:performance:stress": "jest --config tests/performance/jest.config.js tests/performance/stress/",
    "test:performance:spike": "jest --config tests/performance/jest.config.js tests/performance/spike/",
    "test:performance:volume": "jest --config tests/performance/jest.config.js tests/performance/volume/",
    "test:performance:endurance": "jest --config tests/performance/jest.config.js tests/performance/endurance/",
    "test:performance:scalability": "jest --config tests/performance/jest.config.js tests/performance/scalability/",
    "test:performance:watch": "jest --config tests/performance/jest.config.js --watch",
    "test:performance:coverage": "jest --config tests/performance/jest.config.js --coverage",
    "test:performance:api": "jest --config tests/performance/jest.config.js tests/performance/load/api-load.test.js",
    "test:performance:webhook": "jest --config tests/performance/jest.config.js tests/performance/load/webhook-load.test.js",
    "test:performance:system-stress": "jest --config tests/performance/jest.config.js tests/performance/stress/system-stress.test.js",
    "test:performance:report": "node -e \"const {ReportGenerator} = require('./tests/performance/utils/report-generator.js'); const {MetricsCollector} = require('./tests/performance/utils/metrics-collector.js'); const mc = new MetricsCollector(); const rg = new ReportGenerator(); mc.loadPreviousResults().then(() => mc.generateSummaryReport()).then(console.log).catch(console.error);\"",
    "test:performance:monitor": "node -e \"const {PerformanceMonitor} = require('./tests/performance/utils/performance-monitor.js'); const pm = new PerformanceMonitor(); pm.startMonitoring().then(() => { setTimeout(() => pm.stopMonitoring().then(console.log), 60000); });\"",
    "test:performance:benchmark": "jest --config tests/performance/jest.config.js tests/performance/benchmarks/",
    "prepare": "husky install \|\| true""",
    "prepare": "husky install ||    "security:report": "node -e \"const {SecurityScanner} = require\('./tests/security/utils/security-scanner.js'\); new SecurityScanner\(\).runComprehensiveScan\(\).then\(report => console.log\(JSON.stringify\(report, null, 2\)\)\).catch\(console.error\);\"",
    "test:performance": "jest --config tests/performance/jest.config.js",
    "test:performance:load": "jest --config tests/performance/jest.config.js tests/performance/load/",
    "test:performance:stress": "jest --config tests/performance/jest.config.js tests/performance/stress/",
    "test:performance:spike": "jest --config tests/performance/jest.config.js tests/performance/spike/",
    "test:performance:volume": "jest --config tests/performance/jest.config.js tests/performance/volume/",
    "test:performance:endurance": "jest --config tests/performance/jest.config.js tests/performance/endurance/",
    "test:performance:scalability": "jest --config tests/performance/jest.config.js tests/performance/scalability/",
    "test:performance:watch": "jest --config tests/performance/jest.config.js --watch",
    "test:performance:coverage": "jest --config tests/performance/jest.config.js --coverage",
    "test:performance:api": "jest --config tests/performance/jest.config.js tests/performance/load/api-load.test.js",
    "test:performance:webhook": "jest --config tests/performance/jest.config.js tests/performance/load/webhook-load.test.js",
    "test:performance:system-stress": "jest --config tests/performance/jest.config.js tests/performance/stress/system-stress.test.js",
    "test:performance:report": "node -e \"const {ReportGenerator} = require('./tests/performance/utils/report-generator.js'); const {MetricsCollector} = require('./tests/performance/utils/metrics-collector.js'); const mc = new MetricsCollector(); const rg = new ReportGenerator(); mc.loadPreviousResults().then(() => mc.generateSummaryReport()).then(console.log).catch(console.error);\"",
    "test:performance:monitor": "node -e \"const {PerformanceMonitor} = require('./tests/performance/utils/performance-monitor.js'); const pm = new PerformanceMonitor(); pm.startMonitoring().then(() => { setTimeout(() => pm.stopMonitoring().then(console.log), 60000); });\"",
    "test:performance:benchmark": "jest --config tests/performance/jest.config.js tests/performance/benchmarks/",
    "prepare": "husky install \|\| true"
  },
  "keywords": [
    "homelab",
    "gitops",
    "automation",
    "deployment",
    "home-assistant",
    "mcp",
    "integration-testing"
  ],
  "author": "Homelab GitOps Team",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.3",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "morgan": "^1.10.0",
    "compression": "^1.7.4",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.0.1",
    "winston": "^3.11.0",
    "winston-daily-rotate-file": "^4.7.1",
    "dotenv": "^16.3.1",
    "joi": "^17.11.0",
    "multer": "^1.4.5-lts.1",
    "uuid": "^9.0.1",
    "crypto": "^1.0.1",
    "axios": "^1.6.2",
    "tar": "^6.2.0",
    "fs-extra": "^11.1.1",
    "chokidar": "^3.5.3",
    "node-cron": "^3.0.3",
    "eventemitter3": "^5.0.1",
    "pino": "^8.16.2",
    "pino-pretty": "^10.2.3"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "supertest": "^6.3.3",
    "nodemon": "^3.0.2",
    "eslint": "^8.55.0",
    "prettier": "^3.1.0",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "@types/jest": "^29.5.8",
    "jest-html-reporters": "^3.1.5",
    "jest-junit": "^16.0.0",
    "babel-jest": "^29.7.0",
    "@babel/core": "^7.23.5",
    "@babel/preset-env": "^7.23.5",
    "dockerode": "^4.0.0",
    "http-server": "^14.1.1",
    "jsdoc": "^4.0.2",
    "cross-env": "^7.0.3",
    "wait-on": "^7.2.0",
    "concurrently": "^8.2.2",
    "puppeteer": "^21.6.1",
    "playwright": "^1.40.1",
    "node-fetch": "^3.3.2",
    "ws": "^8.14.2",
    "jsdom": "^23.0.1",
    "jest-environment-jsdom": "^29.7.0"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/festion/homelab-gitops-auditor.git"
  },
  "bugs": {
    "url": "https://github.com/festion/homelab-gitops-auditor/issues"
  },
  "homepage": "https://github.com/festion/homelab-gitops-auditor#readme",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test:unit"
    }
  },
  "jest": {
    "projects": [
      "<rootDir>/tests/unit/jest.config.js",
      "<rootDir>/tests/integration/jest.config.js",
      "<rootDir>/tests/e2e/jest.config.js"
    ],
    "collectCoverage": true,
    "coverageDirectory": "coverage",
    "coverageReporters": [
      "text",
      "lcov",
      "html"
    ]
  }
}